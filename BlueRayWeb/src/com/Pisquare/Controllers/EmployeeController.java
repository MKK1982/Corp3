package com.Pisquare.Controllers;

import org.springframework.stereotype.Component;

import java.util.Date;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.KeySpec;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;

import javax.crypto.Cipher;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.net.ssl.SSLContext;
import javax.net.ssl.X509TrustManager;
import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import com.Pisquare.Beans.Admin_Master;
import com.Pisquare.Beans.Branch_Master;
import com.Pisquare.Beans.Cus;
import com.Pisquare.Beans.Customer;
import com.Pisquare.Beans.FD_Master;
import com.Pisquare.Beans.Incentive_Master;
import com.Pisquare.Beans.Inter_Branch;
import com.Pisquare.Beans.JL_Master;
import com.Pisquare.Beans.NEFT_Bank;
import com.Pisquare.Beans.Permission;
import com.Pisquare.Beans.RD_Master;
import com.Pisquare.Beans.Search;
import com.Pisquare.Beans.Share_Reports;
import com.Pisquare.Beans.Simple;
import com.Pisquare.Beans.SimpleBranch;
import com.Pisquare.Beans.UserDetails;
import com.Pisquare.Beans.Employee;

import javax.net.ssl.*;

import com.Pisquare.Beans.Verify_Transaction;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRXlsAbstractExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang3.text.WordUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.support.PagedListHolder;
import org.springframework.context.annotation.Scope;
import org.springframework.http.HttpRequest;
import org.springframework.jdbc.core.JdbcTemplate;

import sun.security.x509.X509CertImpl;

import java.util.Map;

import javax.validation.Valid;

import com.Pisquare.Beans.*;
import com.Pisquare.Dao.*;
import com.Pisquare.Beans.Login1;
//import com.sun.net.ssl.TrustManager;



@Component
@Controller
@Scope("session")
@SessionAttributes({"user","Current_Date","Branch","Current","Search_Info","Search_EmpInfo","Search_Info_PreClosure","JLSearch_Info"})
public class EmployeeController {
	

JdbcTemplate template;
	
@Autowired
private JLArrearDao JLDao;

//AuditDao
@Autowired
private Audit_ReportDao AuditDao;


	@Autowired
	private Configuration_Controller con;

	
	@Autowired 
	private UserDetailsDao dao10;
	
	@Autowired
	private ApprovalDao dao20;
	
	@Autowired
	private FingerPrintDataDao fingerDao;
	
	@Autowired
	private Permission_Dao perdao;
	
	@Autowired
	private EmployeeDao empDao;
	
	
	@Autowired
	private AK_TCDao attDao;
	
	
	public static String newline = System.getProperty("line.separator");
	
	int Binfo=201;
	
	//public static String File_Path="/resources/images/Upload_Files/";
	//public static String File_Path2="/SNNLJLIMAGE/";
	
	//public static String File_Path=Configuration_Controller.MEM_INFO;
	//public static String MEM_INFO="/resources/images/Upload_Files/";
	
	
	public static String File_Path2=Configuration_Controller.JL_IMAGE; 	public static String JL_IMAGE="/SNNLJLIMAGE/";
	
	
	
	
	//Key generation----------------------------------------------------------

	  private static final String UNICODE_FORMAT = "UTF8";
	    public static final String DESEDE_ENCRYPTION_SCHEME = "DESede";
	    private KeySpec ks;
	    private SecretKeyFactory skf;
	    private Cipher cipher;
	    byte[] arrayBytes;
	    private String myEncryptionKey;
	    private String myEncryptionScheme;
	    SecretKey key;

	    public EmployeeController() throws Exception {
	        myEncryptionKey = "ThisIsSpartaThisIsSparta";
	        myEncryptionScheme = DESEDE_ENCRYPTION_SCHEME;
	        arrayBytes = myEncryptionKey.getBytes(UNICODE_FORMAT);
	        ks = new DESedeKeySpec(arrayBytes);
	        skf = SecretKeyFactory.getInstance(myEncryptionScheme);
	        cipher = Cipher.getInstance(myEncryptionScheme);
	        key = skf.generateSecret(ks);
	    }
	  // end Key generation ---------------------------------------------------------

	    
	    public String encrypt(String unencryptedString) throws InvalidKeyException {
	    	
	    	
	    	  
	        String encryptedString = null;
	        try {
	            cipher.init(Cipher.ENCRYPT_MODE, key);
	            byte[] plainText = unencryptedString.getBytes(UNICODE_FORMAT);
	            byte[] encryptedText = cipher.doFinal(plainText);
	            encryptedString = new String(Base64.encodeBase64(encryptedText));
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return encryptedString;
	    }


	    public String decrypt(String encryptedString) {
	    	
	    	
	        String decryptedText=null;
	        try {
	            cipher.init(Cipher.DECRYPT_MODE, key);
	            byte[] encryptedText = Base64.decodeBase64(encryptedString);
	            byte[] plainText = cipher.doFinal(encryptedText);
	            decryptedText= new String(plainText);
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return decryptedText;
	    }

	    
	    
	
   

	@RequestMapping(value="/NDH3_Report", method=RequestMethod.GET)
		public String viewNDH3Report(ModelMap mp,HttpSession session,HttpServletRequest request) throws SQLException
		{
			session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
			return "Session";	
			
			
			String[] per1=perdao.GetPermission(user, "Business");
		
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 
		
		
		int btn_Verify=1;
		int btn_Save=1;
		int btn_Delete=1;
		int btn_Report=1;
		
		if (View.equalsIgnoreCase("N"))
			return ("/Authorization");
		System.out.println("0000000000000000000000");
	
	    if (Verify2.equalsIgnoreCase("N"))	
	       btn_Verify = 2;
	    System.out.println("111111111111");
	    if (Save.equalsIgnoreCase("N"))
	        btn_Save= 2;
	    System.out.println("222222222222222222222222");
	    if (Update.equalsIgnoreCase("N"))
	        btn_Save=2;
	    if (Reports1.equalsIgnoreCase("N"))
	    	btn_Report=2;
			
			Admin_Master am = new Admin_Master();
			
			mp.put("rep_disp", "display:none");
			mp.put("NDH3Report", am);
			
			SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
			int DBCode=(int) session.getAttribute("Branch");
			Date Current_Date=(Date) session.getAttribute("Current_Date");
			String Current=sd.format(Current_Date);
			am.setFrom_Date(Current);
			am.setTo_Date(Current);
			
			return "NDH3_Report";
		} 

  @RequestMapping(value = "/Deposit_Consolidted1")
    		   	public String Deposit_Consolidted1(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			
    		   		 //--------------------------------------------------------------------
	  					String fun_name="EOM Report";
						String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
		                String Operation_status=dao10.Get_ScalarFun(query, 201);
				 		 	if(!Operation_status.equalsIgnoreCase("Y"))
				 		 		return "/Report_Alert";
				 			//return  new ModelAndView("Authorization");
	  	
    		   			
    		   		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

 				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
 					String sys=sd.format(Current_Date);
 				
 					String[] per1=perdao.GetPermission(user, "Business");
					
					
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");

 					
    		   			
       		   		 Employee em = new Employee();
       		   		 
       				 mp.put("Employee2", em);
    		   			
    		   		return  "Deposit_Consolidated";
    		   	}
				
				
					 
 				    	  			@RequestMapping(value = "/getDepositConsolidated", params ="Btn_FD_Report", method=RequestMethod.POST)
									   public void viewDepositReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
									   { 
									session=request.getSession();
									int DBCode=(int) session.getAttribute("Branch");
									
									System.out.println("con----------------------------");
									
									 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

									 	Date Current_Date=(Date) session.getAttribute("Current_Date");
										String sys=sd.format(Current_Date);
									

										
										String Branch_Name1="";
					    				String Scheme_name="";
					    				String Account_No="";
					    				String Customer_Name="";
					    				String Open_date="";
					    				String Loan_Amount="";
					    				String CB="";
					    				String pending_days="";
					    				String Interest_Upto="";
					    				String Arrear_Interest="";
					    				String From_Date=em.getTxt_from_date();
					    				String To_Date=em.getTxt_to_date();
					    				
					    				int Bcode=201;
					    			System.out.println("Inside controller---------------------------------------");
					    			    String BranchName="";      
					    			   
									
									Connection conn=null;
							        try {
							       
							           
							      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
							            
							                 String jrxmlFile=null;
							        
							                 	 jrxmlFile=request.getRealPath("FD_Deposit_Report.jrxml");
							                 
							                // jrxmlFile=request.getRealPath("demo.jrxml");
							            InputStream input = new FileInputStream(new File(jrxmlFile));
							            
							            



							       
							          	       	    	           
							           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
							            String Filename2="FD Maturity Report as on "+To_Date;
							            
							   
							   			 Map parameters = new HashMap();
							   		
								         System.out.println("Filename2--------------------------------"+Filename2);   
							   	
							   			String  realPath = request.getRealPath("/resources/images/");
							   			List<SimpleBranch> list=null;
							   			
							   		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
							   			String Date2=To_Date;
							   			String Branch=BranchName;
							   			//String sql="";
							   		 	
							   		// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
							   			
							   		 
							   			 list=empDao.getFD_Maturity_Report(From_Date,To_Date,Bcode);
							   		
							   		 
							   		mp.put("list",list);
							   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
							   		
							   	        parameters.put("itemsJRBean", itemsJRBean); 
							   	    
							   	  parameters.put("Heading", Filename2); 
							   	  
							   	  System.out.println("11111-----------------------");
							   	  
							   	 String Branch_Name = null;
					             String Branch_Address = null;
					             String Branch_City = null;
					             String Branch_Pincode = null;
					             String Branch_Phone = null;
					             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
					             for(SimpleBranch sb:brInfo)
					             {
					            	Branch_Name=sb.getS2();
						             Branch_Address=sb.getS3();
						             Branch_City=sb.getS4();
						             Branch_Pincode=sb.getS5();
						             Branch_Phone=sb.getS6();
						             
						           }
					           System.out.println("222222222-----------------------");
					             parameters.put("Branch_Name", Branch_Name);
					             parameters.put("Branch_Address", Branch_Address);
					             parameters.put("Branch_City", Branch_City);
					             parameters.put("Branch_Pincode", Branch_Pincode);
					             parameters.put("Branch_Phone", Branch_Phone);
					             parameters.put("To_Date", To_Date);
							           JasperReport jasperReport = JasperCompileManager.compileReport(input);
							           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

							         System.out.println("33333333333333-----------------------");
							          
							           String  reportPath = request.getRealPath("/");
							           parameters.put("To_Date", To_Date);
							         parameters.put("From_Date", From_Date);
							       System.out.println("4444444444-----------------------");   
								          
								           response.setContentType("application/xls");
								           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
								           JRXlsExporter exporter = new JRXlsExporter();
								           // JRXlsExporter exporter = new JRXlsExporter();
								            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
								            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

								            exporter.exportReport();
								    
								          System.out.println("5555555555555-----------------------");							       

						         
						           response.getOutputStream().flush();
						           response.getOutputStream().close();
						           
						           
						         
						           String user = (String) session.getAttribute("user");
						         	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('FD Deposit Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);


							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

						    
						       } catch (FileNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("aa-----------------------"+e.getLocalizedMessage());
						       } catch (JRException e) {
						           e.printStackTrace();
						         System.out.println("bb-----------------------"+e.getLocalizedMessage());
						       } catch (ClassNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("cc-----------------------"+e.getLocalizedMessage());
						       } catch (InstantiationException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("dd-----------------------"+e.getLocalizedMessage());
							} catch (IllegalAccessException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("ee-----------------------"+e.getLocalizedMessage());
							}
						       finally {
						           if(conn!=null){
						               try {
										conn.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
										 System.out.println("ff-----------------------"+e.getLocalizedMessage());
									}
						           }
						       }
						       }



 				    	  			@RequestMapping(value = "/getDepositConsolidated1", params ="Btn_RD_Report", method=RequestMethod.POST)
									   public void viewDepositReportRD(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
									   { 
									session=request.getSession();
									int DBCode=(int) session.getAttribute("Branch");
									
									System.out.println("con----------------------------");
									
									 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

									 	Date Current_Date=(Date) session.getAttribute("Current_Date");
										String sys=sd.format(Current_Date);
									

										
										String Branch_Name1="";
					    				String Scheme_name="";
					    				String Account_No="";
					    				String Customer_Name="";
					    				String Open_date="";
					    				String Loan_Amount="";
					    				String CB="";
					    				String pending_days="";
					    				String Interest_Upto="";
					    				String Arrear_Interest="";
					    				String From_Date=em.getTxt_from_date();
					    				String To_Date=em.getTxt_to_date();
					    				
					    				int Bcode=201;
					    			System.out.println("Inside controller---------------------------------------");
					    			    String BranchName="";      
					    			   
									
									Connection conn=null;
							        try {
							       
							           
							      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
							            
							                 String jrxmlFile=null;
							        
							                 	 jrxmlFile=request.getRealPath("RD_Deposit_Report.jrxml");
							                 
							                // jrxmlFile=request.getRealPath("demo.jrxml");
							            InputStream input = new FileInputStream(new File(jrxmlFile));
							            
							            



							       
							          	       	    	           
							           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
							            String Filename2="RD Maturity Report as on "+To_Date;
							            
							   
							   			 Map parameters = new HashMap();
							   		
								         System.out.println("Filename2--------------------------------"+Filename2);   
							   	
							   			String  realPath = request.getRealPath("/resources/images/");
							   			List<SimpleBranch> list=null;
							   			
							   		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
							   			String Date2=To_Date;
							   			String Branch=BranchName;
							   			//String sql="";
							   		 	
							   		// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
							   			
							   		 
							   			 list=empDao.getRD_Maturity_Report(From_Date,To_Date,Bcode);
							   		
							   		 
							   		mp.put("list",list);
							   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
							   		
							   	        parameters.put("itemsJRBean", itemsJRBean); 
							   	    
							   	  parameters.put("Heading", Filename2); 
							   	  
							   	  System.out.println("11111-----------------------");
							   	  
							   	 String Branch_Name = null;
					             String Branch_Address = null;
					             String Branch_City = null;
					             String Branch_Pincode = null;
					             String Branch_Phone = null;
					             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
					             for(SimpleBranch sb:brInfo)
					             {
					            	Branch_Name=sb.getS2();
						             Branch_Address=sb.getS3();
						             Branch_City=sb.getS4();
						             Branch_Pincode=sb.getS5();
						             Branch_Phone=sb.getS6();
						             
						           }
					           System.out.println("222222222-----------------------");
					             parameters.put("Branch_Name", Branch_Name);
					             parameters.put("Branch_Address", Branch_Address);
					             parameters.put("Branch_City", Branch_City);
					             parameters.put("Branch_Pincode", Branch_Pincode);
					             parameters.put("Branch_Phone", Branch_Phone);
					             parameters.put("To_Date", To_Date);
							           JasperReport jasperReport = JasperCompileManager.compileReport(input);
							           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

							         System.out.println("33333333333333-----------------------");
							          
							           String  reportPath = request.getRealPath("/");
							           parameters.put("To_Date", To_Date);
							         parameters.put("From_Date", From_Date);
							       System.out.println("4444444444-----------------------");   
								          
								           response.setContentType("application/xls");
								           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
								           JRXlsExporter exporter = new JRXlsExporter();
								           // JRXlsExporter exporter = new JRXlsExporter();
								            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
								            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

								            exporter.exportReport();
								    
								          System.out.println("5555555555555-----------------------");							       

								          String user = (String) session.getAttribute("user");
								         	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('RD Deposit Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

						           response.getOutputStream().flush();
						           response.getOutputStream().close();
						           
						           
						         
						          // String user = (String) session.getAttribute("user");
							 			

							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

						    
						       } catch (FileNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("aa-----------------------"+e.getLocalizedMessage());
						       } catch (JRException e) {
						           e.printStackTrace();
						         System.out.println("bb-----------------------"+e.getLocalizedMessage());
						       } catch (ClassNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("cc-----------------------"+e.getLocalizedMessage());
						       } catch (InstantiationException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("dd-----------------------"+e.getLocalizedMessage());
							} catch (IllegalAccessException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("ee-----------------------"+e.getLocalizedMessage());
							}
						       finally {
						           if(conn!=null){
						               try {
										conn.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
										 System.out.println("ff-----------------------"+e.getLocalizedMessage());
									}
						           }
						       }
						       }





    
    
   /* @RequestMapping(value="/saveEmployee_Master",  params = "Save",method = RequestMethod.POST)  
    public ModelAndView saveEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

   	    session=request.getSession();
		String user=(String) session.getAttribute("user");
		if(user==null)
			 return new ModelAndView("Session"); 
		
		 int DBCode=(int) session.getAttribute("Branch");
		 
		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
	    	
	    	
	    	
	    	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    	String Current=sd.format(Current_Date);
		
		String Emp_Id=null;
		String Emp_Name=null;
		String Gender=null;
		String Dob=null;
		String Father_Name=null;
		String Marital_Status=null;
		String Email_id=null;
		String Mobile_number=null;
		String Address=null;
		String Edu_qualifi=null;
		
		String User_name=null;
		String Password=null;
		String Access_Level=null;
		String Login_type=null;
		String Status=null;
		String Designation=null;
		String User_Level=null;
		String Muli_branch=null;
		String Subakalyan=null;
		String Transaction_Edit=null;
		
		
		 Emp_Id=em.getEmp_Id();
		 Emp_Name=em.getEmp_Name();
		 Gender=em.getGender();
		 Dob=em.getDob();
		 Father_Name=em.getFather_Name();
		 Marital_Status=em.getMarital_Status();
		 Email_id=em.getEmail_id();
		 Mobile_number=em.getMobile_number();
		 Address=em.getAddress();
		 Edu_qualifi=em.getEdu_qualifi();
		
		 User_name=em.getUser_name();
		 Password=em.getPassword();
		 Access_Level=em.getAccess_Level();
		 Login_type=em.getLogin_type();
		 Status=em.getStatus();
		 Designation=em.getDesignation();
		 User_Level=em.getUser_Level();
		 Muli_branch=em.getMuli_branch();
		 Subakalyan=em.getSubakalyan();
		 Transaction_Edit=em.getTransaction_Edit();
		 
		   EmployeeController td= new EmployeeController();
		   String encrypted_Password=td.encrypt(Password);
		    
		   
		System.out.println("Emp_Id------------"+Emp_Id);
		System.out.println("Emp_Name----------------"+Emp_Name);
		System.out.println("Gender-------------"+Gender);
		System.out.println("Dob----------------"+Dob);
		System.out.println("Father_Name---------------------"+Father_Name);
		System.out.println("Marital_Status-------------"+Marital_Status);
		System.out.println("Email_id--------------------------"+Email_id);
		System.out.println("Mobile_number--------------------"+Mobile_number);
		System.out.println("Address-----------------"+Address);
		System.out.println("Edu_qualifi----------------------"+Edu_qualifi);
		
		System.out.println("User_name--------------"+User_name);
		System.out.println("Password---------------------------"+Password);
		System.out.println("Access_Level---------------"+Access_Level);
		System.out.println("Login_type------------------"+Login_type);
		System.out.println("Status-----------------"+Status);
		System.out.println("Designation-----------------------"+Designation);
		System.out.println("User_Level--------------------"+User_Level);
		System.out.println("Muli_branch-------------------"+Muli_branch);
		System.out.println("Subakalyan------------------"+Subakalyan);
		System.out.println("Transaction_Edit-----------"+Transaction_Edit);
		System.out.println("user-----------------------"+user);
		
		 //Part photo =  request.getPart("playerphoto");
        CommonsMultipartFile photo2 =  em.getFileData(); 
        System.out.println(photo2.getOriginalFilename());
        
       CommonsMultipartFile SignData=em.getSignData();
       System.out.println(SignData.getOriginalFilename());
       
      String fileName1 =User_name+"_"+SignData.getOriginalFilename();
       File imageFile1 = new File(File_Path2, fileName1);
       
       
       System.out.println("fileName1="+fileName1);

       int a = empDao.saveEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,encrypted_Password,em.getBranch_Type().substring(0,3),user,Current,photo2,em.getJoining_Date());
	   System.out.println("aaaaaaaaaaaaaaaa---"+a);
	  
	   //22/12/2021
	   empDao.Update_Attendance_Details(em.getAttendance_Status(),em.getAttendance_Level(), Emp_Id, 201);
        if(a==1 && em.getAttendance_Status().equalsIgnoreCase("N"))
        {
        	 String Branch_Type=em.getBranch_Type();
		   	  String bcode2=Branch_Type.substring(0, 3);
		            System.out.println(bcode2);
		            int bcode=Integer.parseInt(bcode2);
		    if(bcode==200)
		    {
		    	bcode=201;
		    }
             //insert staff attendance
		try {
			attDao.Insert_Staff_Attendance_Single(Current, bcode,Emp_Id);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}

        }
	   
	   
	   if(a==1){
        if(SignData != null)
     	{
     		try
     		{
     			SignData.transferTo(imageFile1);
     			//bm.setId_Type(bm.getId_Type()+"_"+fileName1);
     			empDao.Update_IdProof1_emp(fileName1, User_name, DBCode);
     		} catch (IOException e)
     		{
     			e.printStackTrace();
     		}
     	}
        }
        
String Btype=em.getBranch_Type().substring(0, 3);
		
		   
		if(a==1 && Access_Level.equalsIgnoreCase("B"))
		{
			int branchcount=empDao.Check_Already_User_Branch(User_name);
        if(branchcount==1)
        {
        	int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b); 
        }
        else
        {
        	int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
        }
        
        
			            
		}
		else if(a==1 && Access_Level.equalsIgnoreCase("C"))
		{
			int corpcount=empDao.Check_Already_User_Corp(User_name);
			
				int c = empDao.saveCorp_Login(User_name,encrypted_Password, User_Level);
			
			
			
		}
		else if(a==1 && Access_Level.equalsIgnoreCase("A"))
		{
			int branchcount=empDao.Check_Already_User_Branch(User_name);
	        if(branchcount==1){
	        	int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
				 System.out.println("bbbbbbbbbbbbbbbbb---"+b); 
	        }
	        else
	        {
	        	int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
				 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
	        }
	        int corpcount=empDao.Check_Already_User_Corp(User_name);
			
			int c = empDao.saveCorp_Login(User_name,encrypted_Password, User_Level);
		
		}
		//13-06-2022-------------------------------------
		if(Muli_branch.equalsIgnoreCase("Y"))
		{
			int countcheck=empDao.Check_Multiuser(User_name);
			if(countcheck==0)
			{
			  empDao.Add_in_Multibranch(User_name);
			}
		}
		else
		{
		int countcheck=empDao.Check_Multiuser(User_name);
		   if(countcheck>0)
			{
			  empDao.Delete_in_Multibranch(User_name);
			}
			
		}
		//-------------------------------------------------------------   
		  return new ModelAndView("redirect:/Employee_List");  

    }
    */
 				    	  			
 /*	//	23-12-2023

 				    	  		    @RequestMapping(value="/saveEmployee_Master",  params = "Save",method = RequestMethod.POST)  
 				    	  		    public ModelAndView saveEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

 				    	  		   	    session=request.getSession();
 				    	  				String user=(String) session.getAttribute("user");
 				    	  				if(user==null)
 				    	  					 return new ModelAndView("Session"); 
 				    	  				
 				    	  				 int DBCode=(int) session.getAttribute("Branch");
 				    	  				 
 				    	  				 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
 				    	  			    	
 				    	  			    	
 				    	  			    	
 				    	  			    	Date Current_Date=(Date) session.getAttribute("Current_Date");
 				    	  			    	String Current=sd.format(Current_Date);
 				    	  				
 				    	  				String Emp_Id=null;
 				    	  				String Emp_Name=null;
 				    	  				String Gender=null;
 				    	  				String Dob=null;
 				    	  				String Father_Name=null;
 				    	  				String Marital_Status=null;
 				    	  				String Email_id=null;
 				    	  				String Mobile_number=null;
 				    	  				String Address=null;
 				    	  				String Edu_qualifi=null;
 				    	  				
 				    	  				String User_name=null;
 				    	  				String Password=null;
 				    	  				String Access_Level=null;
 				    	  				String Login_type=null;
 				    	  				String Status=null;
 				    	  				String Designation=null;
 				    	  				String User_Level=null;
 				    	  				String Muli_branch=null;
 				    	  				String Subakalyan=null;
 				    	  				String Transaction_Edit=null;
 				    	  				
 				    	  				
 				    	  				 Emp_Id=em.getEmp_Id();
 				    	  				 Emp_Name=em.getEmp_Name();
 				    	  				 Gender=em.getGender();
 				    	  				 Dob=em.getDob();
 				    	  				 Father_Name=em.getFather_Name();
 				    	  				 Marital_Status=em.getMarital_Status();
 				    	  				 Email_id=em.getEmail_id();
 				    	  				 Mobile_number=em.getMobile_number();
 				    	  				 Address=em.getAddress();
 				    	  				 Edu_qualifi=em.getEdu_qualifi();
 				    	  				
 				    	  				 User_name=em.getUser_name();
 				    	  				 Password=em.getPassword();
 				    	  				 Access_Level=em.getAccess_Level();
 				    	  				 Login_type=em.getLogin_type();
 				    	  				 Status=em.getStatus();
 				    	  				 Designation=em.getDesignation();
 				    	  				 User_Level=em.getUser_Level();
 				    	  				 Muli_branch=em.getMuli_branch();
 				    	  				 Subakalyan=em.getSubakalyan();
 				    	  				 Transaction_Edit=em.getTransaction_Edit();
 				    	  				 
 				    	  				   EmployeeController td= new EmployeeController();
 				    	  				  String encrypted_Password=td.encrypt("Empl2012");
 				    	  				    
 				    	  				   
 				    	  				System.out.println("Emp_Id------------"+Emp_Id);
 				    	  				System.out.println("Emp_Name----------------"+Emp_Name);
 				    	  				System.out.println("Gender-------------"+Gender);
 				    	  				System.out.println("Dob----------------"+Dob);
 				    	  				System.out.println("Father_Name---------------------"+Father_Name);
 				    	  				System.out.println("Marital_Status-------------"+Marital_Status);
 				    	  				System.out.println("Email_id--------------------------"+Email_id);
 				    	  				System.out.println("Mobile_number--------------------"+Mobile_number);
 				    	  				System.out.println("Address-----------------"+Address);
 				    	  				System.out.println("Edu_qualifi----------------------"+Edu_qualifi);
 				    	  				
 				    	  				System.out.println("User_name--------------"+User_name);
 				    	  				System.out.println("Password---------------------------"+Password);
 				    	  				System.out.println("Access_Level---------------"+Access_Level);
 				    	  				System.out.println("Login_type------------------"+Login_type);
 				    	  				System.out.println("Status-----------------"+Status);
 				    	  				System.out.println("Designation-----------------------"+Designation);
 				    	  				System.out.println("User_Level--------------------"+User_Level);
 				    	  				System.out.println("Muli_branch-------------------"+Muli_branch);
 				    	  				System.out.println("Subakalyan------------------"+Subakalyan);
 				    	  				System.out.println("Transaction_Edit-----------"+Transaction_Edit);
 				    	  				System.out.println("user-----------------------"+user);
 				    	  				
 				    	  				System.out.println("encrypted_Password-----------------------"+encrypted_Password);
 				    	  				
 				    	  				 //Part photo =  request.getPart("playerphoto");
 				    	  		        CommonsMultipartFile photo2 =  em.getFileData(); 
 				    	  		        System.out.println(photo2.getOriginalFilename());
 				    	  		        
 				    	  		       CommonsMultipartFile SignData=em.getSignData();
 				    	  		       System.out.println(SignData.getOriginalFilename());
 				    	  		       
 				    	  		      String fileName1 =User_name+"_"+SignData.getOriginalFilename();
 				    	  		       File imageFile1 = new File(File_Path2, fileName1);
 				    	  		       
 				    	  		       
 				    	  		       System.out.println("fileName1="+fileName1);
 				    	  		       
 				    	  		       //30-03-2024
 				    	  		       if(User_Level.equalsIgnoreCase("A"))
 				    	  		        	   Transaction_Edit="Y";
 				    	  		       else
 				    	  		    	   Transaction_Edit="N";

 				    	  		       int a = empDao.saveEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,encrypted_Password,em.getBranch_Type().substring(0,3),user,Current,photo2,em.getJoining_Date(),em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks());
 				    	  		       dao20.UpdateDATA("update employee_master set lock_status='N',Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"',Current_Branch='"+em.getBranch_Type().substring(0,3)+"' where EMPID='"+Emp_Id+"'",201);
 				    	  		       
 				    	  		       System.out.println("aaaaaaaaaaaaaaaa---"+a);
 				    	  			  
 				    	  			   //22/12/2021
 				    	  			   empDao.Update_Attendance_Details(em.getAttendance_Status(),em.getAttendance_Level(), Emp_Id, 201);
 				    	  		        if(a==1 && em.getAttendance_Status().equalsIgnoreCase("N"))
 				    	  		        {
 				    	  		        	 String Branch_Type=em.getBranch_Type();
 				    	  				   	  String bcode2=Branch_Type.substring(0, 3);
 				    	  				            System.out.println(bcode2);
 				    	  				            int bcode=Integer.parseInt(bcode2);
 				    	  				    if(bcode==200)
 				    	  				    {
 				    	  				    	bcode=201;
 				    	  				    }
 				    	  		             //insert staff attendance
 				    	  				try {
 				    	  					attDao.Insert_Staff_Attendance_Single(Current, bcode,Emp_Id);
 				    	  					
 				    	  				} catch (SQLException e) {
 				    	  					// TODO Auto-generated catch block
 				    	  					e.printStackTrace();
 				    	  					
 				    	  				}

 				    	  		        }
 				    	  			   
 				    	  			   
 				    	  			   if(a==1){
 				    	  		        if(SignData != null)
 				    	  		     	{
 				    	  		     		try
 				    	  		     		{
 				    	  		     			SignData.transferTo(imageFile1);
 				    	  		     			//bm.setId_Type(bm.getId_Type()+"_"+fileName1);
 				    	  		     			empDao.Update_IdProof1_emp(fileName1, User_name, DBCode);
 				    	  		     		} catch (IOException e)
 				    	  		     		{
 				    	  		     			e.printStackTrace();
 				    	  		     		}
 				    	  		     	}
 				    	  		        }
 				    	  		        
 				    	  			   	String Btype=em.getBranch_Type().substring(0, 3);
 				    	  			   	int bcode=Integer.parseInt(Btype);
 				    	  			   	
 				    	  			   	
 				    	  				
 				    	  			String finger="N";
 				    	  				String button="N";
 				    	  				if(Login_type.contentEquals("A"))
 				    	  				{
 				    	  					 finger="Y";
 				    	  					 button="Y";
 				    	  				}
 				    	  				else if(Login_type.contentEquals("F"))
 				    	  				{
 				    	  					finger="Y";
 				    	  					 button="N";	
 				    	  				}
 				    	  				else if(Login_type.contentEquals("P"))
 				    	  				{
 				    	  					finger="N";
 				    	  					 button="Y";	
 				    	  				}
 				    	  				
 				    	  				String cfinger="N";
 				    	  				String cbutton="N";
 				    	  				if(em.getCorp_Login().equalsIgnoreCase("A"))
 				    	  				{
 				    	  					 cfinger="Y";
 				    	  					 cbutton="Y";
 				    	  				}
 				    	  				else if(em.getCorp_Login().equalsIgnoreCase("F"))
 				    	  				{
 				    	  					 cfinger="Y";
 				    	  					 cbutton="N";
 				    	  				}
 				    	  				else if(em.getCorp_Login().equalsIgnoreCase("P"))
 				    	  				{
 				    	  					 cfinger="N";
 				    	  					 cbutton="Y";
 				    	  				}
 				    	  				 System.out.println("Access_Level---"+Access_Level);  
 				    	  				if(Access_Level.equalsIgnoreCase("A"))
 				    	  				{
 				    	  					 System.out.println("Access_Level---"+Access_Level);  
 				    	  					int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
 				    	  					 
 				    	  					 empDao.saveCorp_Login(User_name,encrypted_Password, User_Level,Emp_Id);
 				    	  					 empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
 				    	  						empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);
 				    	  							if(bcode !=200)		
 				    	  							{
 				    	  							//dao20.UpdateDATA("insert into user_branch(user_name,branch_code) values('"+User_name+"',"+bcode+")", 201);
 				    	  							//dao20.UpdateDATA("insert into EMP_BRANCH_LOG(EMP_ID,Bcode) values('"+User_name+"',"+bcode+")", 201);
 				    	  							empDao.Employee_Branch_Update(User_name, ""+bcode,user);
 				    	  							}
 				    	  							
 				    	  						

 				    	  				}
 				    	  				else if(Access_Level.equalsIgnoreCase("B"))
 				    	  				{
 				    	  					 System.out.println("Access_Level---"+Access_Level);  
 				    	  					int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
 				    	  					 System.out.println("bbbbbbbbbbbbbbbbb---"+b);   
 				    	  					 empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
 				    	  					 if(bcode !=200)
 				    	  					 {
 				    	  							//dao20.UpdateDATA("insert into EMP_BRANCH_LOG(EMP_ID,Bcode) values('"+User_name+"',"+bcode+")", 201);
 				    	  							//dao20.UpdateDATA("insert into user_branch(user_name,branch_code) values('"+User_name+"',"+bcode+")", 201);
 				    	  							empDao.Employee_Branch_Update(User_name, ""+bcode,user);
 				    	  					 }


 				    	  				}
 				    	  				else if(Access_Level.equalsIgnoreCase("C"))
 				    	  				{
 				    	  					 System.out.println("Access_Level---"+Access_Level);  
 				    	  					empDao.saveCorp_Login(User_name,encrypted_Password, User_Level,Emp_Id);
 				    	  					empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);

 				    	  				}
 				    	  				
 				    	  				   
 				    	  				if((Access_Level.equalsIgnoreCase("A")||Access_Level.equalsIgnoreCase("B")))
 				    	  				{
 				    	  					//int branchcount=empDao.Check_Already_User_Branch(User_name);
 				    	  					//int branchcount2=dao20.Get_ScalarINT("select nvl(count(*),0) from login_details where EMP_ID='"+Emp_Id+"'", 201);

 				    	  		        if(branchcount2==1)
 				    	  		        {
 				    	  		        	int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
 				    	  					 System.out.println("bbbbbbbbbbbbbbbbb---"+b); 
 				    	  		        }
 				    	  		        else
 				    	  		        {
 				    	  		        	int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
 				    	  					 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
 				    	  		        //}
 				    	  		        
 				    	  		    	empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
 				    	  				
 				    	  					            
 				    	  				}
 				    	  				else if((Access_Level.equalsIgnoreCase("A")||Access_Level.equalsIgnoreCase("C")))
 				    	  				{
 				    	  					int corpcount=empDao.Check_Already_User_Corp(User_name);
 				    	  					if(corpcount==1)
 				    	  			        {
 				    	  					   	dao20.UpdateDATA("update logindetails set PWD='"+Password+"',USER_LEVEL='"+User_Level+"',MTYPE='A' ,Emp_id='"+Emp_Id+"' where USERNAME='"+User_name+"'", 201);
 				    	  			        }
 				    	  					else
 				    	  					{
 				    	  						empDao.saveCorp_Login(User_name,encrypted_Password, User_Level);
 				    	  					//}
 				    	  					
 				    	  					empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);
 				    	  					
 				    	  				}
 				    	  				
 				    	  				
 				    	  				//13-06-2022-------------------------------------
 				    	  				if(Muli_branch.equalsIgnoreCase("Y"))
 				    	  				{
 				    	  					int countcheck=empDao.Check_Multiuser(User_name);
 				    	  					if(countcheck==0)
 				    	  					{
 				    	  					  empDao.Add_in_Multibranch(User_name);
 				    	  					}
 				    	  				}
 				    	  				else
 				    	  				{
 				    	  				int countcheck=empDao.Check_Multiuser(User_name);
 				    	  				   if(countcheck>0)
 				    	  					{
 				    	  					  empDao.Delete_in_Multibranch(User_name);
 				    	  					}
 				    	  					
 				    	  				}
 				    	  				
 				    	  				//Subakalyan
 				    	  				if(Subakalyan.equalsIgnoreCase("Y"))
 				    	  				{
 				    	  					dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
 				    	  					dao20.UpdateDATA("insert into permission_3 values ('"+User_name+"')", 201);
 				    	  					
 				    	  				}
 				    	  				else
 				    	  				{
 				    	  					dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
 				    	  				}
 				    	  				
 				    	  				//Transaction_Edit
 				    	  				if(Transaction_Edit.equalsIgnoreCase("Y"))
 				    	  				{
 				    	  					dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
 				    	  					dao20.UpdateDATA("insert into permission_2 values ('"+User_name+"')", 201);
 				    	  					
 				    	  				}
 				    	  				else
 				    	  				{
 				    	  					dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
 				    	  				}
 				    	  				
 				    	  				//Corp Transaction
 				    	  						String Corp_Transaction=null;
 				    	  						String PermissionLevel=null;
 				    	  						Corp_Transaction=em.getCorpTransaction();
 				    	  						PermissionLevel=em.getPermissionLevel();
 				    	  						dao20.UpdateDATA("update employee_master set CORP_TRANSACTION='"+Corp_Transaction+"',Permission_Type='"+PermissionLevel+"' where EMPID='"+Emp_Id+"'", 201);
 				    	  								if(Corp_Transaction.equalsIgnoreCase("Y"))
 				    	  								{
 				    	  									dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
 				    	  									dao20.UpdateDATA("insert into Corp_Transaction_User values ('"+User_name+"')", 201);
 				    	  									
 				    	  								}
 				    	  								else
 				    	  								{
 				    	  									dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
 				    	  								}
 				    	  						

 				    	  				
 				    	  				int tc=dao20.Get_ScalarINT("select count(*) from permission where USERNAME='"+User_name+"' and PAGE='ST'",201);
 				    	  				if(tc>0)
 				    	  				{
 				    	  				if(Login_type.contentEquals("A"))
 				    	  							dao20.UpdateDATA("update permission set FINGER='Y' , BUTTON='Y' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
 				    	  				else if (Login_type.contentEquals("F"))	
 				    	  					dao20.UpdateDATA("update permission set FINGER='Y' , BUTTON='N' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
 				    	  				else
 				    	  					dao20.UpdateDATA("update permission set FINGER='N' , BUTTON='Y' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
 				    	  				}
 				    	  				else
 				    	  				{
 				    	  					empDao.InsertUser_Permission(User_Level, finger, button, 201);
 				    	  				}
 				    	  				//22-02-2024
 				    	  						
 				    	  				//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master','"+user+"'TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
 				    	  				dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'UPDATION')", 201);

 				    	  				//-------------------------------------------------------------   
 				    	  				  return new ModelAndView("redirect:/Employee_List");  

 				    	  		    }
 				    	  			
    
    @RequestMapping("/Employee_List")
	 public ModelAndView viewEmployeeList(Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception
	{  
   	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		
		String[] per1=perdao.GetPermission(user, "HR");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String SaveFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 
		 if(btn_Save==2)
		    {
			 SaveFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("SaveDisplay", SaveFlag);
		mp.put("deletDisplay", DeleteFlag);
		
		 Employee em = new Employee();
		 mp.put("Employee2", em);
		 mp.addAttribute("Employee2", em);	
		 
		 String Emp_Id=em.getEmp_Id();
		 
		 List<SimpleBranch> list=empDao.getEmployee_List(Emp_Id, 201);
	    	
		 System.out.println("size-----------------------"+list.size());
	    	if(list.size()!=0)
	    	{
	    		mp.put("NoOfRecords", list.size());
	    		System.out.println("size22222222-----------------------"+list.size());
	    	}
	    	else
	    	{
	    		mp.put("NoOfRecords", 0);
	    		System.out.println("size1111111111-----------------------");
	    	}
	    	
	 		model.put("list",list);
	 		
	 		 		
	 		int page=1;
			
			
	 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
	        pagedListHolder.setPageSize(10);
	        mp.put("maxPages", pagedListHolder.getPageCount());
	        int n= pagedListHolder.getPageCount();
	        
	        if(page <= pagedListHolder.getPageCount()) {
	            pagedListHolder.setPage(page-1);
	            mp.put("list", pagedListHolder.getPageList());
	        }
			 
	        int minPages=1;
	 		int maxPages=n;
	 		
	 		
	 		
	 		minPages=page/10;
	 		if(minPages==0)
	 		{
	 			minPages=1;
	 			int i=minPages+20;
	 			if(i>n)
	 			maxPages=n;
	 			else
	 				maxPages=i;
	 		}
	 		else
	 		{
	 			minPages=minPages*10;
	 			int i=minPages+20;
	 			if(i>n)
	 			maxPages=n;
	 			else
	 				maxPages=i;
	 		}
	        System.out.println("NoOfPages="+n);
	        
	        mp.put("minPages",minPages);
	        mp.put("maxPages",maxPages);
			
			mp.put("page", page);
	 				
    return new ModelAndView("Employee_List");  
}  
*/
    
   /* @RequestMapping(value = "/editEmployeeMaster/{Emp_Id}", method=RequestMethod.GET)
    public ModelAndView saveEmployee_Master(@ModelAttribute("Employee2")Employee em,@PathVariable String Emp_Id,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
    {  

    	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		
		String[] per1=perdao.GetPermission(user, "HR");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String updateFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 
		 if(btn_Update==2)
		    {
			 updateFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("UpdateDisplay", updateFlag);
		
		
		 mp.put("Employee2", em);
		
		  String save1="display:none";
		 
		 mp.put("SaveDisplay", save1);

		 
			String EmpId=null;
			String Emp_Name=null;
			String Gender=null;
			String Dob=null;
			String Father_Name=null;
			String Marital_Status=null;
			String Email_id=null;
			String Mobile_number=null;
			String Address=null;
			String Edu_qualifi=null;
			
			String User_name=null;
			String Password=null;
			String Access_Level=null;
			String Login_type=null;
			String Status=null;
			String Designation=null;
			String User_Level=null;
			String Muli_branch=null;
			String Subakalyan=null;
			String Transaction_Edit=null;
			
			String Joining_date=null;
			String Attachmentfile=null;
			
			String bcode=null;
			
			String Attendance_Level=null;
			String Attendance_Status=null;
			
			
			//int c1=
			
			
			List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
			for(SimpleBranch s:emplyee)
			{
			
				 EmpId=s.getS3();
				 Emp_Name=s.getS31();
				 Gender=s.getS39();
				 Dob=s.getS40();
				 Father_Name=s.getS131();
				 Marital_Status=s.getS132();
				 Email_id=s.getS72();
				 Mobile_number=s.getS32();
				 Address=s.getS133();
				 Edu_qualifi=s.getS134();
				
				 User_name=s.getS135();
				 Access_Level=s.getS137();
				 Login_type=s.getS112();
				 Status=s.getS35();
				 Designation=s.getS36();
				 User_Level=s.getS34();
				 Muli_branch=s.getS10();
				 Subakalyan=s.getS9();
				 Transaction_Edit=s.getS5();
				 
				 Joining_date=s.getS73();
				 Attachmentfile=s.getS74();
				 
				 
		 Attendance_Level=s.getS4();
		Attendance_Status=s.getS111();
					
				 
				 mp.put("Joining_date", Joining_date);
				 mp.put("Attachmentfile", Attachmentfile);
				
			
				 mp.put("Emp_Id", EmpId);
				 mp.put("Emp_Name", Emp_Name);
				 
				 em.setGender(Gender);
				 
				 //mp.put("Gender", Gender);
				 
				 mp.put("Dob", Dob);
				 mp.put("Father_Name", Father_Name);
				 
				 em.setDob(Dob);
				
				 em.setMarital_Status(Marital_Status);
				// mp.put("Marital_Status", Marital_Status);
				 
				 mp.put("Email_id", Email_id);
				 mp.put("Mobile_number", Mobile_number);
				 //mp.put("Address", Address);
				 em.setAddress(Address);
				 mp.put("Edu_qualifi", Edu_qualifi);
				 mp.put("User_name", User_name);
				 
				// mp.put("Access_Level", Access_Level);
				 em.setAccess_Level(Access_Level);
				 
				 //mp.put("Login_type", Login_type);
				 em.setLogin_type(Login_type);
				 
				// mp.put("Status", Status);
				 em.setStatus(Status);
				 
				 mp.put("Designation", Designation);
				 mp.put("User_Level", User_Level);
				//07-12-2022
				 em.setUser_Level(User_Level);
				 
				 //mp.put("Muli_branch", Muli_branch);
				 em.setMuli_branch(Muli_branch);
				 
				// mp.put("Subakalyan", Subakalyan);
				 System.out.println("Subakalyan---------------------"+Subakalyan);
				 em.setSubakalyan(Subakalyan);
				 
				 mp.put("Transaction_Edit", Transaction_Edit);
				 em.setTransaction_Edit(Transaction_Edit);
				 
				 bcode=s.getS33();
				 
				 System.out.println("Attendance_Leve="+Attendance_Level);
				 System.out.println("Attendance_Status="+Attendance_Status);

				 mp.put("Attendance_Level", Attendance_Level);
				 mp.put("Attendance_Status", Attendance_Status);
				 em.setAttendance_Level(Attendance_Level);
				 em.setAttendance_Status(Attendance_Status);
				 
				 
				 em.setResign_Date(s.getS9());
				 em.setSus_From_Date(s.getS112());
				 em.setSus_To_Date(s.getS75());
			}
			
			
			
			String Branch_Type="";
			String BranchName="";
			if(bcode.equalsIgnoreCase("200"))
			{
				Branch_Type="200-General";
			}
			else
			{
				BranchName=dao10.getBranchName_bcode(bcode);
				Branch_Type=bcode+"-"+BranchName;
			}
			System.out.println("Branch_Type=getbranch "+Branch_Type);
			//}else
			//BranchName=dao10.getBranchName_bcode(""+DBCode);

			mp.put("BranchName2",BranchName);

			
			List <Simple> branchCode=dao10.getBranchCode();
			System.out.println("Branch_Code=getbranch");
			List<String> branchCodeList=new ArrayList<>();
			for(Simple s1:branchCode)
			{
				String s3=s1.getS1()+"-"+s1.getS2();
				branchCodeList.add(s3);
				System.out.println(s3);  
				 
			}
			mp.put("BranchCodeList", branchCodeList);
			em.setBranch_Type(Branch_Type);
			
				em.setEmp_Id(Emp_Id);
				
				
				List<Simple> list=empDao.getSimple(201);
				List<String> desList=new ArrayList<>();
				for(Simple s1:list)
				{
					String s3=s1.getS2();
					desList.add(s3);
					System.out.println(s3);  
					 
				}
				mp.put("DesignationList", desList);
				em.setDesignation(Designation);
			
				String password= dao10.Get_ScalarFun("select password from login_details where username='"+User_name+"'", 201);
				System.out.println("password:"+password); 
				mp.put("Password", password);
				 mp.put("readonly", "true");
    	
    	return new ModelAndView ("Employee_Master");
    } 
    */
    
    
   /* @RequestMapping(value = "/editEmployeeMaster/{Emp_Id}", method=RequestMethod.GET)
    public ModelAndView saveEmployee_Master(@ModelAttribute("Employee2")Employee em,@PathVariable String Emp_Id,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
    {  

    	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		System.out.println("user="+user);
		String[] per1=perdao.GetPermission(user, "HR");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String updateFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 
		 if(btn_Update==2)
		    {
			 updateFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("UpdateDisplay", updateFlag);
		mp.put("DeleteDisplay", DeleteFlag);
		
		
		 mp.put("Employee2", em);
		
		  String save1="display:none";
		 
		 mp.put("SaveDisplay", save1);

		 
			String EmpId=null;
			String Emp_Name=null;
			String Gender=null;
			String Dob=null;
			String Father_Name=null;
			String Marital_Status=null;
			String Email_id=null;
			String Mobile_number=null;
			String Address=null;
			String Edu_qualifi=null;
			
			String User_name=null;
			String Password=null;
			String Access_Level=null;
			String Login_type=null;
			String Status=null;
			String Designation=null;
			String User_Level=null;
			String Muli_branch=null;
			String Subakalyan=null;
			String Transaction_Edit=null;
			
			String Joining_date=null;
			String Attachmentfile=null;
			
			String bcode=null;
			
			String Attendance_Level=null;
			String Attendance_Status=null;
			String Category=null;
			
			
			
			
			
			List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
			for(SimpleBranch s:emplyee)
			{
			
				 EmpId=s.getS3();
				 Emp_Name=s.getS31();
				 Gender=s.getS39();
				 Dob=s.getS40();
				 Father_Name=s.getS131();
				 Marital_Status=s.getS132();
				 Email_id=s.getS72();
				 Mobile_number=s.getS32();
				 Address=s.getS133();
				 Edu_qualifi=s.getS134();
				
				 User_name=s.getS135();
				 Access_Level=s.getS137();
				 Login_type=s.getS76();
				 Status=s.getS35();
				 Designation=s.getS36();
				 User_Level=s.getS34();
				 Muli_branch=s.getS77();
				 Subakalyan=s.getS78();
				 Transaction_Edit=s.getS79();
				 Category=s.getS138();
				 Joining_date=s.getS73();
				 Attachmentfile=s.getS74();
				 System.out.println("s.getS137()="+s.getS137()); 
				 System.out.println("s.getS76()="+s.getS76()); 
				 System.out.println("s.getS77()="+s.getS77()); 	
				 System.out.println("s.getS78()="+s.getS78()); 	
				 System.out.println("s.getS79()="+s.getS79()); 	
				 System.out.println("Access_Level="+Access_Level); 
				 
		 Attendance_Level=s.getS4();
		Attendance_Status=s.getS111();
					
				System.out.println("Login_type="+Login_type); 
				System.out.println("Subakalyan="+Subakalyan); 
				System.out.println("Transaction_Edit="+Transaction_Edit); 
				
				 mp.put("Joining_date", Joining_date);
				 mp.put("Attachmentfile", Attachmentfile);
				
			
				 mp.put("Emp_Id", EmpId);
				 mp.put("Emp_Name", Emp_Name);
				 
				 em.setGender(Gender);
				 
				 //mp.put("Gender", Gender);
				 
				 mp.put("Dob", Dob);
				 mp.put("Father_Name", Father_Name);
				 
				 em.setDob(Dob);
				
				 em.setMarital_Status(Marital_Status);
				// mp.put("Marital_Status", Marital_Status);
				 
				 mp.put("Email_id", Email_id);
				 mp.put("Mobile_number", Mobile_number);
				 //mp.put("Address", Address);
				 em.setAddress(Address);
				 mp.put("Edu_qualifi", Edu_qualifi);
				 mp.put("User_name", User_name);
				 
				// mp.put("Access_Level", Access_Level);
				 em.setAccess_Level(Access_Level);
				 
				 //mp.put("Login_type", Login_type);
				 em.setLogin_type(Login_type);
				 
				// mp.put("Status", Status);
				 em.setStatus(Status);
				 
				 mp.put("Designation", Designation);
				 mp.put("User_Level", User_Level);
				//07-12-2022
				 em.setUser_Level(User_Level);
				 
				 //mp.put("Muli_branch", Muli_branch);
				 em.setMuli_branch(Muli_branch);
				 
				// mp.put("Subakalyan", Subakalyan);
				 System.out.println("Subakalyan---------------------"+Subakalyan);
				 em.setSubakalyan(Subakalyan);
				 
				 mp.put("Transaction_Edit", Transaction_Edit);
				 em.setTransaction_Edit(Transaction_Edit);
				 
				 bcode=s.getS33();
				 
				 System.out.println("Attendance_Leve="+Attendance_Level);
				 System.out.println("Attendance_Status="+Attendance_Status);

				 mp.put("Attendance_Level", Attendance_Level);
				 mp.put("Attendance_Status", Attendance_Status);
				 em.setAttendance_Level(Attendance_Level);
				 em.setAttendance_Status(Attendance_Status);
				 
				 
				 em.setResign_Date(s.getS9());
				 em.setSus_From_Date(s.getS112());
				 em.setSus_To_Date(s.getS75());
				 
				 //04-03-2024
				 em.setMaternity_From_Date(s.getS113());
				 em.setMaternity_To_Date(s.getS114());
				 em.setRemarks(s.getS115());
				 
				 
				 
				//Corp Transaction
					String Corp_Transaction=null;
					Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
					em.setCorpTransaction(Corp_Transaction);
			   //PermissionLevel
					String PermissionLevel=null;
					PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
					em.setPermissionLevel(PermissionLevel);

			
			
			String Branch_Type="";
			String BranchName="";
			if(bcode.equalsIgnoreCase("200"))
			{
				Branch_Type="200-General";
			}
			else
			{
				BranchName=dao10.getBranchName_bcode(bcode);
				Branch_Type=bcode+"-"+BranchName;
			}
			System.out.println("Branch_Type=getbranch "+Branch_Type);
			//}else
			//BranchName=dao10.getBranchName_bcode(""+DBCode);

			mp.put("BranchName2",BranchName);

			
			List <Simple> branchCode=dao10.getBranchCode();
			System.out.println("Branch_Code=getbranch");
			List<String> branchCodeList=new ArrayList<>();
			for(Simple s1:branchCode)
			{
				String s3=s1.getS1()+"-"+s1.getS2();
				branchCodeList.add(s3);
				System.out.println(s3);  
				 
			}
			mp.put("BranchCodeList", branchCodeList);
			em.setBranch_Type(Branch_Type);
			
				em.setEmp_Id(Emp_Id);
				
				
				List<Simple> list=empDao.getSimple(201);
				List<String> desList=new ArrayList<>();
				for(Simple s1:list)
				{
					String s3=s1.getS2();
					desList.add(s3);
					System.out.println(s3);  
					 
				}
				mp.put("DesignationList", desList);
				em.setDesignation(Designation);
			
				List<Simple> list2=empDao.getCategory(201);
				List<String> desList2=new ArrayList<>();
				for(Simple s1:list2)
				{
					String s3=s1.getS2();
					desList2.add(s3);
					System.out.println(s3);  
					 
				}
				mp.put("Category", desList2);
				System.out.println("Category--------------------"+Category);
				em.setCategory(Category);
				
				em.setLast_Name(s.getS116());
				em.setCorp_Login(s.getS117());
				em.setSuper_Admin(s.getS118());
				
				String resignView="",suspentionView="",maternityView="";
				if(s.getS231() == null)
					resignView="display:none";
				if(s.getS232() == null)
					suspentionView="display:none";
				if(s.getS232() == null)
					maternityView="display:none";
				mp.put("resignView", resignView);
				mp.put("suspentionView", suspentionView);
				mp.put("maternityView", maternityView);
				
			
				
				String password= dao10.Get_ScalarFun("select password from login_details where username='"+User_name+"'", 201);
				System.out.println("password:"+password); 
				mp.put("Password", password);
				 mp.put("readonly", "true");
			}
			return new ModelAndView ("Employee_Master");
    	//return new ModelAndView ("Employee_Master");
    } */
    
    


    
    
    
  /*  @RequestMapping(value="/saveEmployee_Master",  params = "Update",method = RequestMethod.POST)  
    public ModelAndView updateEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

   	    session=request.getSession();
		String user=(String) session.getAttribute("user");
		if(user==null)
			 return new ModelAndView("Session"); 
		
		 int DBCode=(int) session.getAttribute("Branch");
		 
		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
	    	
	    	
	    	
	    	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    	String Current=sd.format(Current_Date);
		
		String Emp_Id=null;
		String Emp_Name=null;
		String Gender=null;
		String Dob=null;
		String Father_Name=null;
		String Marital_Status=null;
		String Email_id=null;
		String Mobile_number=null;
		String Address=null;
		String Edu_qualifi=null;
		
		String User_name=null;
		String Password=null;
		String Access_Level=null;
		String Login_type=null;
		String Status=null;
		String Designation=null;
		String User_Level=null;
		String Muli_branch=null;
		String Subakalyan=null;
		String Transaction_Edit=null;
		//String Branch_Code=null;
		
		
		 Emp_Id=em.getEmp_Id();
		 Emp_Name=em.getEmp_Name();
		 Gender=em.getGender();
		 Dob=em.getDob();
		 Father_Name=em.getFather_Name();
		 Marital_Status=em.getMarital_Status();
		 Email_id=em.getEmail_id();
		 Mobile_number=em.getMobile_number();
		 Address=em.getAddress();
		 Edu_qualifi=em.getEdu_qualifi();
		
		 User_name=em.getUser_name();
		 Password=em.getPassword();
		 Access_Level=em.getAccess_Level();
		 Login_type=em.getLogin_type();
		 Status=em.getStatus();
		 Designation=em.getDesignation();
		 User_Level=em.getUser_Level();
		 Muli_branch=em.getMuli_branch();
		 Subakalyan=em.getSubakalyan();
		 Transaction_Edit=em.getTransaction_Edit();
		 String Btype=em.getBranch_Type().substring(0, 3);
		 
		   EmployeeController td= new EmployeeController();
		   String encrypted_Password=td.encrypt(Password);
		    
		   
		
		System.out.println("Branch_Code--------"+Btype);   
		System.out.println("Emp_Id------------"+Emp_Id);
		System.out.println("Emp_Name----------------"+Emp_Name);
		System.out.println("Gender-------------"+Gender);
		System.out.println("Dob----------------"+Dob);
		System.out.println("Father_Name---------------------"+Father_Name);
		System.out.println("Marital_Status-------------"+Marital_Status);
		System.out.println("Email_id--------------------------"+Email_id);
		System.out.println("Mobile_number--------------------"+Mobile_number);
		System.out.println("Address-----------------"+Address);
		System.out.println("Edu_qualifi----------------------"+Edu_qualifi);
		
		System.out.println("User_name--------------"+User_name);
		System.out.println("Password---------------------------"+Password);
		System.out.println("Access_Level---------------"+Access_Level);
		System.out.println("Login_type------------------"+Login_type);
		System.out.println("Status-----------------"+Status);
		System.out.println("Designation-----------------------"+Designation);
		System.out.println("User_Level--------------------"+User_Level);
		System.out.println("Muli_branch-------------------"+Muli_branch);
		System.out.println("Subakalyan------------------"+Subakalyan);
		System.out.println("Transaction_Edit-----------"+Transaction_Edit);
		System.out.println("user-----------------------"+user);
		
		   int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current);
		   System.out.println("aaaaaaaaaaaaaaaa="+a+",level="+ em.getAttendance_Status());
		empDao.Update_Attendance_Details(em.getAttendance_Status(), em.getAttendance_Level(), Emp_Id, 201);
		  if(a==1 && em.getAttendance_Status().equalsIgnoreCase("N") && Status.equalsIgnoreCase("A"))
	        {
	        	 String Branch_Type=em.getBranch_Type();
			   	  String bcode2=Branch_Type.substring(0, 3);
			            System.out.println(bcode2);
			            int bcode=Integer.parseInt(bcode2);
			    if(bcode==200)
			    {
			    	bcode=201;
			    }
	             //insert staff attendance
			try {
				 System.out.println("before insertion---"+bcode+",emp="+Emp_Id);
				attDao.Insert_Staff_Attendance_Single(Current, bcode,Emp_Id);
				 System.out.println("after insertion---"+bcode+",emp="+Emp_Id);
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
			}

	        }
		  
		  if(a==1 && (em.getAttendance_Status().equalsIgnoreCase("Y") || !Status.equalsIgnoreCase("A") ))
	        {
	        	       //insert staff attendance
			try {
				attDao.Delete_Staff_Attendance_Single(Current,Emp_Id);
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
			}

	        }


		   
		if(Status.equalsIgnoreCase("R"))
		{
			empDao.Update_Resigned_Details(em.getResign_Date(),Emp_Id);
		}
		else
			if(Status.equalsIgnoreCase("S"))
			{
				empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),Emp_Id);
			}
			
		if(a==1 && Access_Level.equalsIgnoreCase("B"))
		{
			
			int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);                   
		}
		else if(a==1 && Access_Level.equalsIgnoreCase("A"))
		{
			int d = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
		
			 System.out.println("ddddddddddddddd---"+d);
			 
		}
		
		
		//13-06-2022-------------------------------------
				if(Muli_branch.equalsIgnoreCase("Y"))
				{
					int countcheck=empDao.Check_Multiuser(User_name);
					if(countcheck==0)
					{ 
					  int k=empDao.Add_in_Multibranch(User_name);
					  System.out.println("Adding Multibranch---"+k);
					}
				}
				else
				{
				int countcheck=empDao.Check_Multiuser(User_name);
				   if(countcheck>0)
					{
					  int k=empDao.Delete_in_Multibranch(User_name);
					  System.out.println("Deleting Multibranch---"+k);
					}
					
				}
	//-------------------------------------------------------------   
				//27-04-2023
				//-------------------------------------------------------------   
							try{
								 CommonsMultipartFile photo2 =  em.getFileData(); 
						         ServletContext servContext=session.getServletContext();
						           // String fileName = photo2.getOriginalFilename();
						          	//String  Emp_Id=em.getEmp_Id();
						             empDao.Edit_Emp_Image(Emp_Id,photo2);
				     		}catch(Exception e)
								{
									mp.put("e", e);
									System.out.println("Error---------"+e);
									return new ModelAndView("forward:/error");  
									
								}
		   
		  return new ModelAndView("redirect:/Employee_List");  

    }*/

    //23-12-2023
	 /* @RequestMapping(value="/saveEmployee_Master",  params = "Update",method = RequestMethod.POST)  
	    public ModelAndView updateEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

	   	    session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session"); 
			
			 int DBCode=(int) session.getAttribute("Branch");
			 
			 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		    	
		    	
		    	
		    	Date Current_Date=(Date) session.getAttribute("Current_Date");
		    	String Current=sd.format(Current_Date);
			
			String Emp_Id=null;
			String Emp_Name=null;
			String Gender=null;
			String Dob=null;
			String Father_Name=null;
			String Marital_Status=null;
			String Email_id=null;
			String Mobile_number=null;
			String Address=null;
			String Edu_qualifi=null;
			
			String User_name=null;
			String Password=null;
			String Access_Level=null;
			String Login_type=null;
			String Status=null;
			String Designation=null;
			String User_Level=null;
			String Muli_branch=null;
			String Subakalyan=null;
			String Transaction_Edit=null;
			//String Branch_Code=null;
			
			
			 Emp_Id=em.getEmp_Id();
			 Emp_Name=em.getEmp_Name();
			 Gender=em.getGender();
			 Dob=em.getDob();
			 Father_Name=em.getFather_Name();
			 Marital_Status=em.getMarital_Status();
			 Email_id=em.getEmail_id();
			 Mobile_number=em.getMobile_number();
			 Address=em.getAddress();
			 Edu_qualifi=em.getEdu_qualifi();
			
			 User_name=em.getUser_name();
			// Password=em.getPassword();
			 Access_Level=em.getAccess_Level();
			 Login_type=em.getLogin_type();
			 Status=em.getStatus();
			 Designation=em.getDesignation();
			 User_Level=em.getUser_Level();
			 Muli_branch=em.getMuli_branch();
			 Subakalyan=em.getSubakalyan();
			 Transaction_Edit=em.getTransaction_Edit();
			 String Btype=em.getBranch_Type().substring(0, 3);
			 
			  //30-03-2024
		       if(User_Level.equalsIgnoreCase("A"))
		        	   Transaction_Edit="Y";
		       else
		    	   Transaction_Edit="N";
			 
			    if(Btype.equalsIgnoreCase("200"))
			    {
			    	Btype="201";
			    }
			 
			   EmployeeController td= new EmployeeController();
			//   String encrypted_Password=td.encrypt(Password);
			    
			   String encrypted_Password="";
			
			System.out.println("Branch_Code--------"+Btype);   
			System.out.println("Emp_Id------------"+Emp_Id);
			System.out.println("Emp_Name----------------"+Emp_Name);
			System.out.println("Gender-------------"+Gender);
			System.out.println("Dob----------------"+Dob);
			System.out.println("Father_Name---------------------"+Father_Name);
			System.out.println("Marital_Status-------------"+Marital_Status);
			System.out.println("Email_id--------------------------"+Email_id);
			System.out.println("Mobile_number--------------------"+Mobile_number);
			System.out.println("Address-----------------"+Address);
			System.out.println("Edu_qualifi----------------------"+Edu_qualifi);
			
			System.out.println("User_name--------------"+User_name);
			System.out.println("Password---------------------------"+Password);
			System.out.println("Access_Level---------------"+Access_Level);
			System.out.println("Login_type------------------"+Login_type);
			System.out.println("Status-----------------"+Status);
			System.out.println("Designation-----------------------"+Designation);
			System.out.println("User_Level--------------------"+User_Level);
			System.out.println("Muli_branch-------------------"+Muli_branch);
			System.out.println("Subakalyan------------------"+Subakalyan);
			System.out.println("Transaction_Edit-----------"+Transaction_Edit);
			System.out.println("user-----------------------"+user);
			
			
			String oldEncPass= dao10.Get_ScalarFun("select password from login_details where username='"+User_name+"'", 201);
			String newEncPass="";
			if(em.getPassword() != null && !em.getPassword().isEmpty())
			if(!em.getPassword().equalsIgnoreCase(oldEncPass))
			{
				newEncPass=td.encrypt(em.getPassword());
				dao20.UpdateDATA("update login_Details set password='"+newEncPass+"' where username='"+User_name+"'", 201);
			}
			String oldUser= dao10.Get_ScalarFun("select user_name from employee_master where empid='"+Emp_Id+"'", 201);
			System.out.println("olduser="+User_name+",new="+em.getUser_name());
			if(!oldUser.equalsIgnoreCase(User_name))
			{
				System.out.println("old---------------------------");
				empDao.Update_User(oldUser, em.getUser_name(), 201);
			  
			}
		
			System.out.println("old----------11111111111----------------");
			
			   int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current,em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks());
		       dao20.UpdateDATA("update employee_master set lock_status='N',Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"' where EMPID='"+Emp_Id+"'",201);
	  
			System.out.println("aaaaaaaaaaaaaaaa="+a+",level="+ em.getAttendance_Status());
			empDao.Update_Attendance_Details(em.getAttendance_Status(), em.getAttendance_Level(), Emp_Id, 201);
			  if(a==1 && em.getAttendance_Status().equalsIgnoreCase("N") && Status.equalsIgnoreCase("A"))
		        {
		        	 String Branch_Type=em.getBranch_Type();
				   	  String bcode2=Branch_Type.substring(0, 3);
				            System.out.println(bcode2);
				            int bcode=Integer.parseInt(bcode2);
				    if(bcode==200)
				    {
				    	bcode=201;
				    }
		             //insert staff attendance
				try {
					 System.out.println("before insertion---"+bcode+",emp="+Emp_Id);
					attDao.Insert_Staff_Attendance_Single(Current, bcode,Emp_Id);
					 System.out.println("after insertion---"+bcode+",emp="+Emp_Id);
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					
				}

		        }
			  
			  if(a==1 && (em.getAttendance_Status().equalsIgnoreCase("Y") || !Status.equalsIgnoreCase("A") ))
		        {
		        	       //insert staff attendance
				try {
					attDao.Delete_Staff_Attendance_Single(Current,Emp_Id);
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					
				}

		        }


			   
			if(Status.equalsIgnoreCase("R"))
			{
				//empDao.Update_Resigned_Details(em.getResign_Date(),Emp_Id);

				  CommonsMultipartFile Resign=em.getResignData();
			       System.out.println(Resign.getOriginalFilename());
			       
			      String fileName1 =User_name+"_Resign_"+Resign.getOriginalFilename();
			       dao20.UpdateDATA("update employee_master set Resigned_Date='"+em.getResign_Date()+"',RESIGNATION_LETTER='"+fileName1+"' where EMPID='"+Emp_Id+"'",201);

			       File imageFile1 = new File(File_Path2, fileName1);
			       if(Resign != null)
			     	{
			     		try
			     		{
			     			Resign.transferTo(imageFile1);
			     		} catch (IOException e)
			     		{
			     			e.printStackTrace();
			     		}
			     	}				
			}
			else if(Status.equalsIgnoreCase("S"))
				{
					//empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),Emp_Id);
					  CommonsMultipartFile Suspention=em.getSuspention();
				       System.out.println(Suspention.getOriginalFilename());
				       
				      String fileName1 =User_name+"_Suspention_"+Suspention.getOriginalFilename();
				       dao20.UpdateDATA("update employee_master set Suspended_From='"+em.getSus_From_Date()+"',Suspended_To='"+em.getSus_To_Date()+"',SUSPENTION_FILE='"+fileName1+"' where EMPID='"+Emp_Id+"'",201);

				       File imageFile1 = new File(File_Path2, fileName1);
				       if(Suspention != null)
				     	{
				     		try
				     		{
				     			Suspention.transferTo(imageFile1);
				     		} catch (IOException e)
				     		{
				     			e.printStackTrace();
				     		}
				     	}				
				}
			
			else if(Status.equalsIgnoreCase("M"))
			{
				//empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),Emp_Id);
				  CommonsMultipartFile Maternity=em.getMaternity();
			       System.out.println(Maternity.getOriginalFilename());
			       
			      String fileName1 =User_name+"_Maternity_"+Maternity.getOriginalFilename();
			       dao20.UpdateDATA("update employee_master set Maternity_From='"+em.getMaternity_From_Date()+"',Maternity_To='"+em.getMaternity_To_Date()+"',MATERNITY_FORM='"+fileName1+"' where EMPID='"+Emp_Id+"'",201);

			       File imageFile1 = new File(File_Path2, fileName1);
			       if(Maternity != null)
			     	{
			     		try
			     		{
			     			Maternity.transferTo(imageFile1);
			     		} catch (IOException e)
			     		{
			     			e.printStackTrace();
			     		}
			     	}				
			}
				
			
		
			if(Access_Level.equalsIgnoreCase("B"))
			{
				
				int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
				 System.out.println("bbbbbbbbbbbbbbbbb---"+b);                   
			}
			else if(Access_Level.equalsIgnoreCase("A"))
			{
				int d = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			
				 System.out.println("ddddddddddddddd---"+d);
				 
			}
			if( Access_Level.equalsIgnoreCase("B") || Access_Level.equalsIgnoreCase("A"))
				dao20.UpdateDATA("update login_Details set branch_code='"+Btype+"' where username='"+User_name+"'", 201);
			
			//13-06-2022-------------------------------------
					if(Muli_branch.equalsIgnoreCase("Y"))
					{
						int countcheck=empDao.Check_Multiuser(User_name);
						if(countcheck==0)
						{ 
						  int k=empDao.Add_in_Multibranch(User_name);
						  System.out.println("Adding Multibranch---"+k);
						}
					}
					else
					{
					int countcheck=empDao.Check_Multiuser(User_name);
					   if(countcheck>0)
						{
						  int k=empDao.Delete_in_Multibranch(User_name);
						  System.out.println("Deleting Multibranch---"+k);
						}
						
					}
					
					//27-04-2023
		//-------------------------------------------------------------   
					try{
						 CommonsMultipartFile photo2 =  em.getFileData(); 
				         ServletContext servContext=session.getServletContext();
				           // String fileName = photo2.getOriginalFilename();
				          	//String  Emp_Id=em.getEmp_Id();
				             empDao.Edit_Emp_Image(Emp_Id,photo2);
		     		}catch(Exception e)
						{
							mp.put("e", e);
							System.out.println("Error---------"+e);
							return new ModelAndView("forward:/error");  
							
						}
					
					
					//24-11-2023
					//Subakalyan
					if(Subakalyan.equalsIgnoreCase("Y"))
					{
						dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
						dao20.UpdateDATA("insert into permission_3 values ('"+User_name+"')", 201);
						
					}
					else
					{
						dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
					}
					
					//Transaction_Edit
					if(Transaction_Edit.equalsIgnoreCase("Y"))
					{
						dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
						dao20.UpdateDATA("insert into permission_2 values ('"+User_name+"')", 201);
						
					}
					else
					{
						dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
					}
					
					//Corp Transaction
					//Corp Transaction
					String Corp_Transaction=null;
					String PermissionLevel=null;
					Corp_Transaction=em.getCorpTransaction();
					PermissionLevel=em.getPermissionLevel();
					dao20.UpdateDATA("update employee_master set CORP_TRANSACTION='"+Corp_Transaction+"',Permission_Type='"+PermissionLevel+"' where EMPID='"+Emp_Id+"'", 201);
							if(Corp_Transaction.equalsIgnoreCase("Y"))
							{
								dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
								dao20.UpdateDATA("insert into Corp_Transaction_User values ('"+User_name+"')", 201);
								
							}
							else
							{
								dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
							}
					
					//Login type Finger/Button
					String finger="N";
					String button="N";
					if(Login_type.contentEquals("A"))
					{
						 finger="Y";
						 button="Y";
					}
					else if(Login_type.contentEquals("F"))
					{
						finger="Y";
						 button="N";	
					}
					else if(Login_type.contentEquals("P"))
					{
						finger="N";
						 button="Y";	
					}
					
					System.out.println("em.getCorp_Login()="+em.getCorp_Login());
					String cfinger="N";
					String cbutton="N";
					System.out.println("cfinger="+cfinger+",cbutton="+cbutton);
					if(em.getCorp_Login().equalsIgnoreCase("A"))
					{
						System.out.println("1");
						 cfinger="Y";
						 cbutton="Y";
					}
					else if(em.getCorp_Login().equalsIgnoreCase("F"))
					{
						System.out.println("2");
						 cfinger="Y";
						 cbutton="N";
					}
					else if(em.getCorp_Login().equalsIgnoreCase("P"))
					{
						System.out.println("3");
						 cfinger="N";
						 cbutton="Y";
					}
					//22-02-2024
				       dao20.UpdateDATA("update employee_master set Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"' where EMPID='"+Emp_Id+"'",201);

					
					
					int tc=dao20.Get_ScalarINT("select count(*) from permission where USERNAME='"+User_name+"' and PAGE='ST'",201);
					if(tc>0)
					{
					if(Login_type.contentEquals("A"))
								dao20.UpdateDATA("update permission set FINGER='Y' , BUTTON='Y' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
					else if (Login_type.contentEquals("F"))	
						dao20.UpdateDATA("update permission set FINGER='Y' , BUTTON='N' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
					else
						dao20.UpdateDATA("update permission set FINGER='N' , BUTTON='Y' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
					}
					else
					{
						empDao.InsertUser_Permission(User_Level, finger, button, 201);
					}
					
					//Lock / Unlock Employee
					if(!Status.equalsIgnoreCase("A"))
					{
						
						dao20.UpdateDATA("Update Login_Details Set ENABLE='N' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
						dao20.UpdateDATA("Update LoginDetails Set Value='B' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);

						

					}
					else
					{
						
						System.out.println("cfinger="+cfinger+",cbutton="+cbutton);
						
						
						if( Access_Level.equalsIgnoreCase("A"))
						{	
							dao20.UpdateDATA("Update Login_Details Set ENABLE='Y' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
							dao20.UpdateDATA("Update LoginDetails Set Value='N' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);
							empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
							empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);

						}
						else if( Access_Level.equalsIgnoreCase("B"))
						{
							dao20.UpdateDATA("Update Login_Details Set ENABLE='Y' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
							empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);

						}
						else if( Access_Level.equalsIgnoreCase("C"))
						{
							dao20.UpdateDATA("Update LoginDetails Set Value='N' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);
							empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);

						}
						dao20.UpdateDATA("Update Login_Details Set ENABLE='Y' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
						dao20.UpdateDATA("Update LoginDetails Set Value='N' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);
						empDao.InsertUser_Permission_Type(User_Level, finger, button,PermissionLevel, 201);
						empDao.InsertCorpUser_Permission_Type(User_Level, cfinger, cbutton,PermissionLevel, 201);

					}
					
					dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master ','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'UPDATION :"+em.getEmp_Id()+"')", 201);

			   
			  return new ModelAndView("redirect:/Employee_List");  

	    }
    
    @RequestMapping(value = "/deleteEmployeeMaster/{Emp_Id}/{User_Name}", method=RequestMethod.GET)
    public ModelAndView deleteEmployee_Master(@ModelAttribute("Employee2")Employee em,@PathVariable String Emp_Id,@PathVariable String User_Name,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
    {  

    	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		
		String[] per1=perdao.GetPermission(user, "MS");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String updateFlag=null;
		  String saveFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 mp.put("deleteDisplay", DeleteFlag);
		 
		 if(btn_Update==2)
		    {
			 updateFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 if(btn_Save==2)
		    {
			 saveFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("UpdateDisplay", updateFlag);
		
		
		 mp.put("Employee2", em);
		
		  //String save1="display:none";
		 
		 mp.put("SaveDisplay", saveFlag);


		int  a= empDao.deleteEmployee_Master(Emp_Id,201); 
		System.out.println("aaaaaaaaaaaaaaaaaaaaa----------"+a);
		System.out.println("Emp_Id-----------------"+Emp_Id);
		
		if(a==1)
		{
			int b=empDao.deleteBranch_LoginDetails(Emp_Id,201);
			System.out.println("bbbbbbbbbbbbbbbbbbbbbbbb----------"+b);
			int c=empDao.deleteCorp_LoginDetails(User_Name,201);
			System.out.println("ccccccccccccccccccccc----------"+c);
			System.out.println("User_Name-----------------"+User_Name);
		}	 
		  return new ModelAndView("redirect:/Employee_List");  
    }
    
    
   // @RequestMapping(value="/SearchEmployee_List", method = RequestMethod.GET)  
   // public ModelAndView searchEmployeeMaster(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

    	 @RequestMapping(value = "/SearchEmployee_List",method=RequestMethod.POST)
 		public String searchEmployeeMaster(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

    	
   	    session=request.getSession();
		String user=(String) session.getAttribute("user");
		if(user==null)
			 return ("Session"); 
		
		 int DBCode=(int) session.getAttribute("Branch");
		 
		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
	    	
	    	
	    	
	    	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    	String Current=sd.format(Current_Date);

	    	
	    	String[] per1=perdao.GetPermission(user, "MS");
			
			 String View=null;
			 String Save=null;
			 String Update=null;
			 String Delete=null;
			 String Verify2=null;
			 String Verify3=null;
			 String Verify4=null;
			 String Verify5=null;
			 String Reports1=null;
			 String Button=null;
			 String Finger_Print=null;
					
			 
			 
			 View=per1[0];
			 Save=per1[1];
			 Update=per1[2];
			 Delete=per1[3];
			 Verify2=per1[4];
			 Verify3=per1[5];
			 Verify4=per1[6];
			 Verify5=per1[7];
			 Reports1=per1[8];
			 Button=per1[9];
			 Finger_Print=per1[10];
			
			 int btn_Delete=1;
			 int btn_Save=1;
			 int btn_Update=1;
			 
			 System.out.println("View-------------------------"+View);
			 System.out.println("Save-------------------------"+Save);
			 System.out.println("Update-------------------------"+Update);
			 System.out.println("Delete-------------------------"+Delete);
			 System.out.println("Verify2-------------------------"+Verify2);
			 System.out.println("Verify3-------------------------"+Verify3);
			 System.out.println("Verify4-------------------------"+Verify4);
			 System.out.println("Verify5-------------------------"+Verify5);
			 System.out.println("Reports1-------------------------"+Reports1);
			 System.out.println("Button-------------------------"+Button);
			 System.out.println("Finger_Print-------------------------"+Finger_Print);
			 
			 if (View.equalsIgnoreCase("N"))
					return "/Authorization";

			
			 if (Delete.equalsIgnoreCase("N"))	
				 btn_Delete = 2;
			 
			 if (Save.equalsIgnoreCase("N"))	
				 btn_Save = 2;
			 
			 if (Update.equalsIgnoreCase("N"))	
				 btn_Update = 2;
			
			 System.out.println("btn_Verify-------------"+btn_Delete);
			  String DeleteFlag=null;
			  String updateFlag=null;
			  String saveFlag=null;
			 if(btn_Delete==2)
			    {
				 DeleteFlag="Display:none;";
				 System.out.println("1111111111111111111111");
			    }
			 mp.put("deletDisplay", DeleteFlag);
			 
			 if(btn_Update==2)
			    {
				 updateFlag="Display:none;";
				 System.out.println("1111111111111111111111");
			    }
			 if(btn_Save==2)
			    {
				 saveFlag="Display:none;";
				 System.out.println("1111111111111111111111");
			    }
			mp.put("UpdateDisplay", updateFlag);
			
			
			 mp.put("Employee2", em);
			
			  
			 
			// mp.put("SaveDisplay", saveFlag);
			 
			 String Emp_Id=em.getEmp_Id();
			 
			 List<SimpleBranch> list=empDao.searchEmployee_List(Emp_Id, 201);
		    	
			 System.out.println("size-----------------------"+list.size());
		    	if(list.size()!=0)
		    	{
		    		mp.put("NoOfRecords", list.size());
		    		System.out.println("size22222222-----------------------"+list.size());
		    	}
		    	else
		    	{
		    		mp.put("NoOfRecords", 0);
		    		System.out.println("size1111111111-----------------------");
		    	}
		    	
		 		model.put("list",list);
		 		
		 		
		 		int page=1;
				
				
		        PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
		        pagedListHolder.setPageSize(10);
		        mp.put("maxPages", pagedListHolder.getPageCount());
		        int n= pagedListHolder.getPageCount();
		        
		        if(page <= pagedListHolder.getPageCount()) {
		            pagedListHolder.setPage(page);
		            mp.put("list", pagedListHolder.getPageList());
		        }
				 
		        int minPages=1;
		 		int maxPages=n;
		 		
		 		minPages=page/10;
		 		if(minPages==0)
		 		{
		 			minPages=1;
		 			maxPages=n;
		 		}
		 		else
		 		{
		 			minPages=minPages*10;
		 			maxPages=minPages+20;
		 		}
		        System.out.println("NoOfPages="+n);
		        
		        mp.put("minPages",minPages);
		        mp.put("maxPages",maxPages);
				
				mp.put("page", page);

			
			 return "Employee_List";  
    }
	 */
    	 
    	 
		 
		 @RequestMapping(value = "/Employee_List/{page}", method = RequestMethod.GET)
			public ModelAndView viewEmpList1(Map<String, Object> model,
					ModelMap mp, @PathVariable int page, HttpSession session,
					HttpServletRequest request) throws SQLException 
    	 
    	 {  
    
    		 session=request.getSession();
 			String user=(String) session.getAttribute("user");
 			if(user==null)
 				 return new ModelAndView("Session");  
    	//-----------------------------------------------------GetPermission-------------------------------------

 		session=request.getSession();
 		
 		String[] per1=perdao.GetPermission(user, "HR");
 		
 		 String View=null;
 		 String Save=null;
 		 String Update=null;
 		 String Delete=null;
 		 String Verify2=null;
 		 String Verify3=null;
 		 String Verify4=null;
 		 String Verify5=null;
 		 String Reports1=null;
 		 String Button=null;
 		 String Finger_Print=null;
 				
 		 
 		 
 		 View=per1[0];
 		 Save=per1[1];
 		 Update=per1[2];
 		 Delete=per1[3];
 		 Verify2=per1[4];
 		 Verify3=per1[5];
 		 Verify4=per1[6];
 		 Verify5=per1[7];
 		 Reports1=per1[8];
 		 Button=per1[9];
 		 Finger_Print=per1[10];
 		
 		 int btn_Delete=1;
 		 int btn_Save=1;
 		 int btn_Update=1;
 		 
 		 
 		 if (View.equalsIgnoreCase("N"))
 				return new ModelAndView("/Authorization");

 		
 		 if (Delete.equalsIgnoreCase("N"))	
 			 btn_Delete = 2;
 		 
 		 if (Save.equalsIgnoreCase("N"))	
 			 btn_Save = 2;
 		 
 		 if (Update.equalsIgnoreCase("N"))	
 			 btn_Update = 2;
 		
 		 System.out.println("btn_Verify-------------"+btn_Delete);
 		  String DeleteFlag=null;
 		  String SaveFlag=null;
 		 if(btn_Delete==2)
 		    {
 			 DeleteFlag="Display:none;";
 			 System.out.println("1111111111111111111111");
 		    }
 		 
 		 if(btn_Save==2)
 		    {
 			 SaveFlag="Display:none;";
 			 System.out.println("1111111111111111111111");
 		    }
 		mp.put("SaveDisplay", SaveFlag);
 		mp.put("deletDisplay", DeleteFlag);
 		
 		//Search_EmpInfo
 		Employee p = (Employee)session.getAttribute("Search_EmpInfo");
 		
 		
 		// Employee em = new Employee();
 		 mp.put("Employee2", p);
 		 mp.addAttribute("Employee2", p);	
 		 
 		 String Emp_Id=p.getEmp_Id();
 		 
 		System.out.println("Emp_Id from pagination"+Emp_Id);
 		 List<SimpleBranch> list=empDao.searchEmployee_List(Emp_Id, 201);
 		 
 		 
	    
		String Type="Active";
		 Type=  p.getCurrent_Status();
		  if(Type.equalsIgnoreCase("600"))
			{
				 System.out.println("1111111111111111111111");
				list=empDao.searchEmployee_List(Emp_Id, 201);
			}
		 else if(Type.equalsIgnoreCase("Active"))
		{
			 System.out.println("1111111111111111111111");
			list=empDao.searchEmployee_List_Active(Emp_Id,p.getRemarks(), 201);
		}//Inactive
		else if(Type.equalsIgnoreCase("Inactive"))
		{
			list=empDao.searchEmployee_List_InActive(Emp_Id,p.getRemarks(), 201);
			
			 System.out.println("1111111111111111111111");
		}
		
 	    	
 		 System.out.println("size-----------------------"+list.size());
 	    	if(list.size()!=0)
 	    	{
 	    		mp.put("NoOfRecords", list.size());
 	    		System.out.println("size22222222-----------------------"+list.size());
 	    	}
 	    	else
 	    	{
 	    		mp.put("NoOfRecords", 0);
 	    		System.out.println("size1111111111-----------------------");
 	    	}
 	    	
 	 		model.put("list",list);
 	 		
 			PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(
 					list);
 			pagedListHolder.setPageSize(10);
 			mp.put("maxPages", pagedListHolder.getPageCount());
 			int n = pagedListHolder.getPageCount();

 			/*
 			 * if(page!=0 || page < 1 || page > pagedListHolder.getPageCount())
 			 * page=1; mp.put("page", page);
 			 * 
 			 * if(page == 0 || page < 1 || page > pagedListHolder.getPageCount()){
 			 * pagedListHolder.setPage(0); mp.put("list1",
 			 * pagedListHolder.getPageList()); } `` else
 			 */if (page <= pagedListHolder.getPageCount()) {
 				pagedListHolder.setPage(page - 1);
 				mp.put("list", pagedListHolder.getPageList());
 			}

 			int minPages = 1;
 			int maxPages = n;

 			minPages = page / 10;
 			if (minPages == 0) {
 				minPages = 1;
 				int i = minPages + 20;
 				if (i > n)
 					maxPages = n;
 				else
 					maxPages = i;
 			} else {
 				minPages = minPages * 10;
 				if (minPages > n)
 					maxPages = n;
 				else
 					maxPages = minPages + 20;
 			}

 			System.out.println("NoOfPages=" + n);

 			mp.put("minPages", minPages);
 			mp.put("maxPages", maxPages);

 			mp.put("page", page);
	 		    		 
 			int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from employee_master where status is not null", 201);
 			//	int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y'", 201);
 				int getActive =dao20.Get_ScalarINT("select count(*) from employee_master where status in ('A','M')", 201);
 				//int getBranchOnly =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')", 201);
 				int getBranchOnly =dao20.Get_ScalarINT("select count(*) from employee_master where user_name in (select username from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')) and Access_level ='B'", 201);

 				
 				int getBranchandCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username  in (select username from logindetails WHERE value !='B')", 201);

 				
 				int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B' and username  not in (select username from login_details WHERE enable='Y')", 201);
 				
 				mp.put("OverAll", getOverall);
 				mp.put("ActiveAll", getActive);
 				mp.put("Active", getBranchOnly);
 				mp.put("Corporate", getActive-getBranchOnly);
			
			
    		 return new ModelAndView("Employee_List"); 
    		 
    		 
    		 
		    }
    	 
    	 
    	 
    	 
    	 
    	 
    	 @RequestMapping(value="/LockEmployeeMaster_User/{userName}")  
    	    public ModelAndView LockIndividualUser(@PathVariable String userName,Map<String,Object> model,HttpServletRequest request,HttpSession session,ModelMap mp)
    	    {  
    	    	///Session-------------------------------------------------------------
    			 session=request.getSession();
    				String user=(String) session.getAttribute("user");
    				if(user==null)
    				return  new ModelAndView("Session");
    		   //--------------------------------------------------------------------
    				int corpcount=empDao.Check_Already_User_Corp(userName);
    				int branchcount=empDao.Check_Already_User_Branch(userName);
	            if(branchcount==1){
    				try{
    				int i=empDao.Lock_Individual_User_Branch(userName);
    				}
    				catch(Exception e)
    				{
    					mp.put("e", e);
    					return new ModelAndView("redirect:/error");  
    				}
	            }
	            
	            if(corpcount==1){
    				try{
    				int i=empDao.Lock_Individual_User_Corp(userName);
    				}
    				catch(Exception e)
    				{
    					mp.put("e", e);
    					return new ModelAndView("redirect:/error");  
    				}
	            }
	            return new ModelAndView("redirect:/Employee_List");
    	    }

    	    
    	    @RequestMapping(value="/UnLockEmployeeMasterUser/{userName}")  
    	    public ModelAndView UnLockIndividualUser(@PathVariable String userName,Map<String,Object> model,HttpServletRequest request,HttpSession session,ModelMap mp)
    	    {  
    	    	///Session-------------------------------------------------------------
    			 session=request.getSession();
    				String user=(String) session.getAttribute("user");
    				if(user==null)
    				return  new ModelAndView("Session");
    		   //--------------------------------------------------------------------
    				int corpcount=empDao.Check_Already_User_Corp(userName);
    				int branchcount=empDao.Check_Already_User_Branch(userName);
	            if(branchcount==1){
    				try{
    				int i=empDao.UnLock_Individual_User_Branch(userName);
    				}
    				catch(Exception e)
    				{
    					mp.put("e", e);
    					return new ModelAndView("redirect:/error");  
    				}
	            }
	            
	            if(corpcount==1){
    				try{
    				int i=empDao.UnLock_Individual_User_Corp(userName);
    				}
    				catch(Exception e)
    				{
    					mp.put("e", e);
    					return new ModelAndView("redirect:/error");  
    				}
	            }
	            return new ModelAndView("redirect:/Employee_List");
  
    	    }
    	    
    	    
    	    @RequestMapping(value="/ResetPwdIndividualUser/{userName}")  
    	    public ModelAndView ResetPwdIndividualUser(@PathVariable String userName,Map<String,Object> model,HttpServletRequest request,HttpSession session,ModelMap mp)
    	    {  
    	    	///Session-------------------------------------------------------------
    			 session=request.getSession();
    				String user=(String) session.getAttribute("user");
    				if(user==null)
    				return  new ModelAndView("Session");
    		   //--------------------------------------------------------------------
    				
    				
    									
    				try{
    				int i=empDao.Resetpassword_Individual_User(userName);
    				}
    				catch(Exception e)
    				{
    					mp.put("e", e);
    					return new ModelAndView("redirect:/error");  
    				}
    				List <SimpleBranch> list=dao10.getUserDetailsList();
    				mp.put("list",list);
    	            return new ModelAndView("redirect:/Employee_List");
    	    }
    	    
    	    
    	    
    	    
    		 @RequestMapping(value = "/User_imageController/{Username}")
			    @ResponseBody
			    public byte[] helloWorldUser(@PathVariable String Username,ModelMap mp,HttpSession session,HttpServletRequest request)  {
			    	byte barr[] = null;    
			    	
			    	 int DBCode=201;
			    	 
			    	//--Set Connection------------------------------------
						int j=DBCode;
						this.template=con.getCon2(j);
			//-----------------------------------------------------
			    	 
			    	try{	
		    		Connection con=template.getDataSource().getConnection();
		    		
		    		PreparedStatement ps=con.prepareStatement("select * from employee_master where user_name='"+Username+"'");  
		    		ResultSet rs=ps.executeQuery();  
		    		if(rs.next()){//now on 1st row  
		    		              
		    		Blob b=rs.getBlob(29);// 
		    		if(b!=null)
		    		{
		    		barr=b.getBytes(1,(int)b.length());//1 means first image  
		    		
		    		
		    		String fileName=""+Username+".png";
		    		mp.put("fileName", fileName);
		    		mp.put("Customer_Id", Username);
		    		//mp.put("contextPath", contextPath);
		    		/*
		    		FileOutputStream fout=new FileOutputStream(storelocation+"/"+fileName);  
		    		fout.write(barr);  
		    		              
		    		fout.close();  
		    		*/
		    		}
		    		}//end of if  
		    		System.out.println("ok");  
		    		              
		    		con.close();  
		    		}catch (Exception e) {e.printStackTrace();  } 
			      //Image image = //obtain Image instance by id somehow from DAO/Hibernate
			      return barr;
			    }
			 
    		 
    		 @RequestMapping(value = "/downloadAttachmentUser/{id}", method = RequestMethod.GET, produces = "application/pdf")
			    public @ResponseBody void downloadAttachmentDynUser(@PathVariable String id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException {
				 
			    	byte barr[] = null;    
			    	session=request.getSession();
			    	 int DBCode=(int) session.getAttribute("Branch");
			    	 
			    	//--Set Connection------------------------------------
						int j=DBCode;
						this.template=con.getCon2(j);
			//-----------------------------------------------------
						
						//String fileName=Customer_Id+"_idproof2.jpg";
						 String fileName=empDao.getAttachement_FilesNameUser(id);
						// String FILE_PATH = request.getRealPath(File_Path+fileName);
						
						 if(!fileName.equalsIgnoreCase(null) && !fileName.isEmpty())
						 { String FILE_PATH = File_Path2+fileName;
				     
						 File file = new File(FILE_PATH);
				        InputStream in = new FileInputStream(file);

				        response.setContentType("application/pdf");
				        response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
				        response.setHeader("Content-Length", String.valueOf(file.length()));
				        FileCopyUtils.copy(in, response.getOutputStream()); 
			   
						 }
			    	
			       // OutputStream out = new FileOutputStream("out.pdf");
			       // out.write(barr);
			       // out.close();
			    }

    		    //New 28-08-2020\
    		    @RequestMapping(value = "/Business_Development")
    			public String Business_Development_home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Business");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");  
    					
    				return  "BusinessDevelopment";
    			}
    		    //New 28-08-2020\
    		    @RequestMapping(value = "/Accounts_Audit")
    			public String Accounts_Audit_home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Accounts");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");

    				return  "Accounts_Audit";
    			}
    		    //New 28-08-2020\
    		    @RequestMapping(value = "/Recovery")
    			public String Recovery_home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Recovery");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization"); 
    					
    					
    				return  "Recovery";
    			}
    		    //New 28-08-2020\
    		    @RequestMapping(value = "/Operations")
    			public String Operations_home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Operations");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");


    				return  "Operations";
    			}
    		    //New 28-08-2020\
    		    @RequestMapping(value = "/Branch_Operations")
    			public String Branch_Operations_home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Branch");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");
 
    					
    				return  "Branch_Operations";
    			}
    		    //New 28-08-2020\
    		    @RequestMapping(value = "/Administrator")
    			public String Administrator_home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Admin");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");  
    					
    					
    				return  "Administrator";
    			}
    		    
    		    //New 28-08-2020\
    		    @RequestMapping(value = "/HR_Home")
    			public String HR_Home2(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		    	///Session-------------------------------------------------------------
    				 session=request.getSession();
    					String user=(String) session.getAttribute("user");
    					if(user==null)
    					return  "Session_Popup";
    			   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "HR");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");

	 
    				return  "HR_Home";
    			}

    		   
    		    
    		    @RequestMapping(value = "/JL_Arrear")
    		   	public String JL_Arrear_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

    		   		String fun_name="EOM Report";
					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	                String Operation_status=dao10.Get_ScalarFun(query, 201);
			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
			 		 		return "/Report_Alert";

			 		 	
 				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
 					String sys=sd.format(Current_Date);
 				
 					String[] per1=perdao.GetPermission(user, "Recovery");
					
					
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");

 					
    		   			
       		   		 Employee em = new Employee();
       		   		 em.setDays(30);
       		   		 em.setDob(sys);
       				 mp.put("Employee2", em);
    		   			
    		   		return  "JL_Arrear";
    		   	}
    		    
    		    
    		    @RequestMapping(value = "/Branch_Budgeting")
    		   	public String Branch_Budgecting_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    					String[] per1=perdao.GetPermission(user, "Operations");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");
 
    		   			
    		   		return  "Branch_Budgecting";
    		   	}
    		    
    		    @RequestMapping(value = "/Corp_Budgeting")
    		   	public String Corp_Budgecting_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			
    					String[] per1=perdao.GetPermission(user, "Operations");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");

    		   		return  "Corp_Budgecting";
    		   	}
    		    
    		    @RequestMapping(value = "/Member_Master")
    		   	public String Member_Master_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			 
    		   			String[] per1=perdao.GetPermission(user, "Branch");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");
    		   		return  "Member_Master";
    		   	}
    		    
    		    @RequestMapping(value = "/Branch_Master")
    		   	public String Branch_Master_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			 
    		   		return  "Branch_Master";
    		   	}
    		    
    		    
    		    @RequestMapping(value = "/PD_Home")
    		   	public String PD_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			String[] per1=perdao.GetPermission(user, "Planning");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");


    		   			
    		   			
    		   		return  "PD_Home";
    		   	}
    		    
    		    @RequestMapping(value = "/FixedAsset_Report")
    		   	public String FixedAsset_Report_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			 
    		   			String[] per1=perdao.GetPermission(user, "Planning");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");


    		   			
    		   		return  "FixedAsset_Report";
    		   	}
    		    
    		    @RequestMapping(value = "/Purchase_Order")
    		   	public String Purchase_Order_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   			
    		   			String[] per1=perdao.GetPermission(user, "Planning");
    					
    					
   					 String View=null;
   					 String Save=null;
   					 String Update=null;
   					 String Delete=null;
   					 String Verify2=null;
   					 String Verify3=null;
   					 String Verify4=null;
   					 String Verify5=null;
   					 String Reports1=null;
   					 String Button=null;
   					 String Finger_Print=null;
   							
   					 
   					 
   					 View=per1[0];
   					 Save=per1[1];
   					 Update=per1[2];
   					 Delete=per1[3];
   					 Verify2=per1[4];
   					 Verify3=per1[5];
   					 Verify4=per1[6];
   					 Verify5=per1[7];
   					 Reports1=per1[8];
   					 Button=per1[9];
   					 Finger_Print=per1[10];
   					
   					 
   					 System.out.println("View-------------------------"+View);
   					 System.out.println("Save-------------------------"+Save);
   					 System.out.println("Update-------------------------"+Update);
   					 System.out.println("Delete-------------------------"+Delete);
   					 System.out.println("Verify2-------------------------"+Verify2);
   					 System.out.println("Verify3-------------------------"+Verify3);
   					 System.out.println("Verify4-------------------------"+Verify4);
   					 System.out.println("Verify5-------------------------"+Verify5);
   					 System.out.println("Reports1-------------------------"+Reports1);
   					 System.out.println("Button-------------------------"+Button);
   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
   					 
   					 
   					
   					
   					int btn_Verify=1;
   					int btn_Save=1;
   					int btn_Delete=1;
   					
   					if (View.equalsIgnoreCase("N"))
   						return ("/Authorization");


    		   			
    		   		return  "Purchase_Order";
    		   	}
    		    
    		    @RequestMapping("/find_username.htm")
    			@ResponseBody
    	 		 public String getuser_name(@RequestParam String User_name,HttpServletRequest request, HttpServletResponse response,@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpSession session,Model m)throws Exception
    	  		{
    	  		 
    	    
    	  		 String user_name=User_name;
    	     		 
    	     		 session=request.getSession();
    	   			String user=(String) session.getAttribute("user");
    	   			if(user==null)
    	   				 return ("Session");  
    	      	//-----------------------------------------------------GetPermission-------------------------------------

    	   		session=request.getSession();
    	   		
    	   		System.out.println("user_name-------------------------"+user_name);
    	   		
    	   		 int a=empDao.getBranch_UserName(user_name, 201);
    	   		 
    	   		System.out.println("a---------------"+a);

    	          String res = ""+a;
    	  		   
    	  		
    	  		  return res;
    	  		 }

    		    
    		    public String JL_Arrear_H(Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception
		 		{  
		    	///Session-------------------------------------------------------------
		   		 session=request.getSession();
		   			String user=(String) session.getAttribute("user");
		   			if(user==null)
		   			return  "Session_Popup";
		   	   //--------------------------------------------------------------------
		   		 Employee em = new Employee();
				 mp.put("Employee2", em);
		   
		   			 
		   		return  "JL_Arrear";
		   	}
		    
		    @RequestMapping(value = "/DL_Arrear")
		   	public String DL_Arrear_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		       	///Session-------------------------------------------------------------
		   		 session=request.getSession();
		   			String user=(String) session.getAttribute("user");
		   			if(user==null)
		   			return  "Session_Popup";
		   	   //--------------------------------------------------------------------
		   			
		   			String fun_name="EOM Report";
					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	                String Operation_status=dao10.Get_ScalarFun(query, 201);
			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
			 		 		return "/Report_Alert";

		   			
		   			String[] per1=perdao.GetPermission(user, "Recovery");
					
		   		
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");

		   			
		   			Employee em = new Employee();
   				    mp.put("Employee2", em);
		   			 
		   		return  "DL_Arrear";
		   	}
		    
		    @RequestMapping(value = "/ML_Arrear")
		   	public String ML_Arrear_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		       	///Session-------------------------------------------------------------
		   		 session=request.getSession();
		   			String user=(String) session.getAttribute("user");
		   			if(user==null)
		   			return  "Session_Popup";
		   	   //--------------------------------------------------------------------
		   			String fun_name="EOM Report";
					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	                String Operation_status=dao10.Get_ScalarFun(query, 201);
			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
			 		 		return "/Report_Alert";

			 		 	
			 		 	
		   			String[] per1=perdao.GetPermission(user, "Recovery");
					
					
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");
  					List <Simple> branchCode=dao10.getBranchCode();
  	    			System.out.println("Branch_Code=getbranch");
  	    			List<String> branchCodeList=new ArrayList<>();
  	    			for(Simple s:branchCode)
  	    			{
  	    				String s3=s.getS1()+"-"+s.getS2();
  	    				branchCodeList.add(s3);
  	    				System.out.println(s3);  
  	    				System.out.println("branchCodeList--------------------"+s3);
  	    			}
  	    			
  	    			//---------------------------------------------
  	         		
  	         		
  	         		mp.put("BranchCodeList", branchCodeList);
		   			
		   			Employee em = new Employee();
   				    mp.put("Employee2", em);
		   		return  "ML_Arrear";
		   	}
		    
		    @RequestMapping(value = "/SL_Arrear")
		   	public String SL_Arrear_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		       	///Session-------------------------------------------------------------
		   		 session=request.getSession();
		   			String user=(String) session.getAttribute("user");
		   			if(user==null)
		   			return  "Session_Popup";
		   	   //--------------------------------------------------------------------
		   			String fun_name="EOM Report";
					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	                String Operation_status=dao10.Get_ScalarFun(query, 201);
			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
			 		 		return "/Report_Alert";

		   			
		   			String[] per1=perdao.GetPermission(user, "Recovery");
					
					
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");

		   			
		   			Employee em = new Employee();
   				    mp.put("Employee2", em);
		   		return  "SL_Arrear";
		   	}



@RequestMapping(value = "/getJLArrear", params ="Btn_JLArrear", method=RequestMethod.POST)
				   public void viewJLArrear(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
				   { 
				session=request.getSession();
				int DBCode=(int) session.getAttribute("Branch");
				String user = (String) session.getAttribute("user");
				System.out.println("con----------------------------");
				
				 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
					String sys=sd.format(Current_Date);
				

					
					String Branch_Name1="";
    				String Scheme_name="";
    				String Account_No="";
    				String Customer_Name="";
    				String Open_date="";
    				String Loan_Amount="";
    				String CB="";
    				String pending_days="";
    				String Interest_Upto="";
    				String Arrear_Interest="";
    				String To_Date=em.getDob();
    				
    				
    			System.out.println("Inside controller---------------------------------------");
    			          
    			List <Simple> branchCode=dao10.getBranchCode();
    			System.out.println("Branch_Code=getbranch");
    			List<String> branchCodeList=new ArrayList<>();
    			for(Simple s:branchCode)
    			{
    				String s3=s.getS1()+"-"+s.getS2();
    				branchCodeList.add(s3);
    				System.out.println(s3);  
    				System.out.println("branchCodeList--------------------"+s3);
    			}
    			
    			//---------------------------------------------
         		
         		
         		mp.put("BranchCodeList", branchCodeList);
			 


				
				Connection conn=null;
		        try {
		       
		           
		      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		            
		                 String jrxmlFile=null;
		        
		                 if(em.getFile_Type().equalsIgnoreCase("2")){
				            	
			            	 jrxmlFile=request.getRealPath("JL_Arrear_xl.jrxml");
			            }
			            else{
			            	 jrxmlFile=request.getRealPath("JL_Arrear.jrxml");
			            }
		               
		                // jrxmlFile=request.getRealPath("demo.jrxml");
		            InputStream input = new FileInputStream(new File(jrxmlFile));
		            
		           



		       
		          	       	    	           
		           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
		            String Filename2="Jewel Loan Arrear Report as on "+To_Date;
		            
		   
		   			 Map parameters = new HashMap();
		   		
			         System.out.println("Filename2--------------------------------"+Filename2); 
			         
			         int Days=em.getDays();
		   	
		   			String  realPath = request.getRealPath("/resources/images/");
		   			
		   		List<SimpleBranch> list=JLDao.getJLArrearReport(To_Date,Days,DBCode);   
		   		mp.put("list",list);
		   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		   		
		   	        parameters.put("itemsJRBean", itemsJRBean); 
		   	    
		   	  parameters.put("Heading", Filename2); 
		   	
		     if(!em.getFile_Type().equalsIgnoreCase("2")){ 	 
		   //-11-05-2024--------------------------------------------------------------------------------
		   	parameters.put("Comp_Cin",con.GetCINNO());
		   	parameters.put("Comp_Name",con.GetCompName());
		   	//----------------------------------------------------------------------------------------------
		     } 
		   	 String Branch_Name = null;
             String Branch_Address = null;
             String Branch_City = null;
             String Branch_Pincode = null;
             String Branch_Phone = null;
             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
             for(SimpleBranch sb:brInfo)
             {
            	Branch_Name=sb.getS2();
	            Branch_Address=sb.getS3();
	             Branch_City=sb.getS4();
	             Branch_Pincode=sb.getS5();
	             Branch_Phone=sb.getS6();
	             
	           }
             String user_name=empDao.getEmployeeName(user);
             parameters.put("Branch_Name", Branch_Name);
             parameters.put("Branch_Address", Branch_Address);
             parameters.put("Branch_City", Branch_City);
             parameters.put("Branch_Pincode", Branch_Pincode);
             parameters.put("Branch_Phone", Branch_Phone);
             parameters.put("To_Date", To_Date);

             parameters.put("user", user_name);
		           JasperReport jasperReport = JasperCompileManager.compileReport(input);
		           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

		           
		          
		           String  reportPath = request.getRealPath("/");
			     
		           if(em.getFile_Type().equalsIgnoreCase("1"))
		           {
	        	   JRExporter exporter2 = null;
	           		 ServletOutputStream ouputStream2 = response.getOutputStream();
	           		 
	           		 response.setContentType("application/pdf");
	           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
	                    exporter2 = new JRPdfExporter();
	                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	                    exporter2.exportReport();
	          
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("2"))
		           {
		        	   
			          
			           response.setContentType("application/xls");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			           JRXlsExporter exporter = new JRXlsExporter();
			           // JRXlsExporter exporter = new JRXlsExporter();
			            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			            exporter.exportReport();
			    
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("3"))
		           {
		        	   response.setContentType("application/docx");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
			           JRDocxExporter exporter3 = new JRDocxExporter();
			           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
			           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			           exporter3.exportReport();
		           }
			       

	         
	           response.getOutputStream().flush();
	           response.getOutputStream().close();
	           
	           //------06-03-2023----------------------------------
		         String File_Type="";
		 	     if(em.getFile_Type().equalsIgnoreCase("1"))
		 	    	File_Type="PDF";
		 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
		 	    	File_Type="EXCEL";
		 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
		 		File_Type="DOCUMENT";
		        
		 //---------------------------------
		 	    	// String user = (String) session.getAttribute("user");
		 			

		 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Arrear Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

	    
	       } catch (FileNotFoundException e) {
	           e.printStackTrace();
	       } catch (JRException e) {
	           e.printStackTrace();
	       } catch (ClassNotFoundException e) {
	           e.printStackTrace();
	       } catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	       finally {
	           if(conn!=null){
	               try {
					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	           }
	       }
	       }
			
			
			    	@RequestMapping(value = "/getDLArrear", params ="Btn_DLArrear", method=RequestMethod.POST)
				   public void viewDLArrear(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
				   { 
				session=request.getSession();
				int DBCode=(int) session.getAttribute("Branch");
				String user = (String) session.getAttribute("user");
				System.out.println("con----------------------------");
				
				 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
					String sys=sd.format(Current_Date);
				

					
					String Branch_Name1="";
    				String Scheme_name="";
    				String Account_No="";
    				String Customer_Name="";
    				String Open_date="";
    				String Loan_Amount="";
    				String CB="";
    				String pending_days="";
    				String Interest_Upto="";
    				String Arrear_Interest="";
    				String To_Date=em.getDob();
    				
    				
    			System.out.println("Inside controller---------------------------------------");
    			          
    			List <Simple> branchCode=dao10.getBranchCode();
    			System.out.println("Branch_Code=getbranch");
    			List<String> branchCodeList=new ArrayList<>();
    			for(Simple s:branchCode)
    			{
    				String s3=s.getS1()+"-"+s.getS2();
    				branchCodeList.add(s3);
    				System.out.println(s3);  
    				System.out.println("branchCodeList--------------------"+s3);
    			}
    			
    			//---------------------------------------------
         		
         		
         		mp.put("BranchCodeList", branchCodeList);
			 


				
				Connection conn=null;
		        try {
		       
		           
		      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		            
		                 String jrxmlFile=null;
		        if(em.getFile_Type().equalsIgnoreCase("2")){
		        	
		        	 jrxmlFile=request.getRealPath("DL_Arrear_xl.jrxml");
		        	 
		        }else{
		        	
		        	 jrxmlFile=request.getRealPath("DL_Arrear.jrxml");
		        }
		               
		                // jrxmlFile=request.getRealPath("demo.jrxml");
		            InputStream input = new FileInputStream(new File(jrxmlFile));
		            
		            



		       
		          	       	    	           
		           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
		            String Filename2="Deposit Loan Arrear Report as on "+To_Date;
		            
		   
		   			 Map parameters = new HashMap();
		   		
			         System.out.println("Filename2--------------------------------"+Filename2);   
		   	
		   			String  realPath = request.getRealPath("/resources/images/");
		   		 int Days=em.getDays();
		   		List<SimpleBranch> list=JLDao.getDLArrearReport(To_Date,Days,DBCode);   
		   		mp.put("list",list);
		   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		   		
		   	        parameters.put("itemsJRBean", itemsJRBean); 
		   	    
		   	  parameters.put("Heading", Filename2); 
		   	if(!em.getFile_Type().equalsIgnoreCase("2")){
		   	//-11-05-2024--------------------------------------------------------------------------------
		   	parameters.put("Comp_Cin",con.GetCINNO());
		   	parameters.put("Comp_Name",con.GetCompName());
		   	//----------------------------------------------------------------------------------------------
		   	}
		   	String Branch_Name = null;
             String Branch_Address = null;
             String Branch_City = null;
             String Branch_Pincode = null;
             String Branch_Phone = null;
             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
             for(SimpleBranch sb:brInfo)
             {
            	Branch_Name=sb.getS2();
	             Branch_Address=sb.getS3();
	             Branch_City=sb.getS4();
	             Branch_Pincode=sb.getS5();
	             Branch_Phone=sb.getS6();
	             
	           }
             String user_name=empDao.getEmployeeName(user);
             parameters.put("Branch_Name", Branch_Name);
             parameters.put("Branch_Address", Branch_Address);
             parameters.put("Branch_City", Branch_City);
             parameters.put("Branch_Pincode", Branch_Pincode);
             parameters.put("Branch_Phone", Branch_Phone);
             parameters.put("To_Date", To_Date);

             parameters.put("user", user_name);
		           JasperReport jasperReport = JasperCompileManager.compileReport(input);
		           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

		           
		          
		           String  reportPath = request.getRealPath("/");
			     
		           if(em.getFile_Type().equalsIgnoreCase("1"))
		           {
	        	   JRExporter exporter2 = null;
	           		 ServletOutputStream ouputStream2 = response.getOutputStream();
	           		 
	           	
	           		 response.setContentType("application/pdf");
	           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
	                    exporter2 = new JRPdfExporter();
	                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	                    exporter2.exportReport();
	          
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("2"))
		           {
		        	   
			          
			           response.setContentType("application/xls");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			           JRXlsExporter exporter = new JRXlsExporter();
			           // JRXlsExporter exporter = new JRXlsExporter();
			            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			            exporter.exportReport();
			    
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("3"))
		           {
		        	   response.setContentType("application/docx");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
			           JRDocxExporter exporter3 = new JRDocxExporter();
			           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
			           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			           exporter3.exportReport();
		           }
			       

	         
	           response.getOutputStream().flush();
	           response.getOutputStream().close();
	           
	           
	           //------06-03-2023----------------------------------
		         String File_Type="";
		 	     if(em.getFile_Type().equalsIgnoreCase("1"))
		 	    	File_Type="PDF";
		 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
		 	    	File_Type="EXCEL";
		 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
		 		File_Type="DOCUMENT";
		        
		 //---------------------------------
		 	    	// String user = (String) session.getAttribute("user");
		 			

		 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('DL Arrear Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

	       } catch (FileNotFoundException e) {
	           e.printStackTrace();
	       } catch (JRException e) {
	           e.printStackTrace();
	       } catch (ClassNotFoundException e) {
	           e.printStackTrace();
	       } catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	       finally {
	           if(conn!=null){
	               try {
					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	           }
	       }
	       }
			    	
			    	@RequestMapping(value = "/getMLArrear", params ="Btn_MLArrear", method=RequestMethod.POST)
				   public void viewMLArrear(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
				   { 
				session=request.getSession();
				int DBCode=(int) session.getAttribute("Branch");
				String user = (String) session.getAttribute("user");

				System.out.println("con----------------------------");
				
				 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
					String sys=sd.format(Current_Date);
				

					
					String Branch_Name1="";
    				String Scheme_name="";
    				String Account_No="";
    				String Customer_Name="";
    				String Open_date="";
    				String Loan_Amount="";
    				String CB="";
    				String pending_days="";
    				String Interest_Upto="";
    				String Arrear_Interest="";
    				String To_Date=em.getDob();
    				
    				
    			System.out.println("Inside controller one---------------------------------------");
    			          
    			List <Simple> branchCode=dao10.getBranchCode();
    			//System.out.println("Branch_Code=getbranch");
    			List<String> branchCodeList=new ArrayList<>();
    			for(Simple s:branchCode)
    			{
    				String s3=s.getS1()+"-"+s.getS2();
    				branchCodeList.add(s3);
    				System.out.println(s3);  
    				//System.out.println("branchCodeList--------------------"+s3);
    			}
    			
    			//---------------------------------------------
         		
         		
         		mp.put("BranchCodeList", branchCodeList);
			 


				
				Connection conn=null;
		        try {
		       
		           
		      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		            
		                 String jrxmlFile=null;
		        
		                 if(em.getFile_Type().equalsIgnoreCase("2")){
		                	 jrxmlFile=request.getRealPath("ML_Arrear_xl.jrxml");
		                 }
		                 else{
		                	 jrxmlFile=request.getRealPath("ML_Arrear.jrxml");
		                 }
		               
		                // jrxmlFile=request.getRealPath("demo.jrxml");
		            InputStream input = new FileInputStream(new File(jrxmlFile));
		            
		            

          	       	    	           
		           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
		            String Filename2="Mortgage Loan Arrear Report as on "+To_Date;
		            
		   
		   			 Map parameters = new HashMap();
		   		
			         System.out.println("Filename2--------------------------------"+Filename2);   
		   	
		   			String  realPath = request.getRealPath("/resources/images/");
		   			
		   			
		   		List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);   
		   		mp.put("list",list);
		   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		   		
		   	        parameters.put("itemsJRBean", itemsJRBean); 
		   	    
		   	  parameters.put("Heading", Filename2); 
		   	  

if(!em.getFile_Type().equalsIgnoreCase("2")){
//-11-05-2024--------------------------------------------------------------------------------
parameters.put("Comp_Cin",con.GetCINNO());
parameters.put("Comp_Name",con.GetCompName());
//----------------------------------------------------------------------------------------------
}	
		   	 String Branch_Name = null;
             String Branch_Address = null;
             String Branch_City = null;
             String Branch_Pincode = null;
             String Branch_Phone = null;
             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
             for(SimpleBranch sb:brInfo)
             {
            	Branch_Name=sb.getS2();
	             Branch_Address=sb.getS3();
	             Branch_City=sb.getS4();
	             Branch_Pincode=sb.getS5();
	             Branch_Phone=sb.getS6();
	             
	           }
             String user_name=empDao.getEmployeeName(user);
             parameters.put("Branch_Name", Branch_Name);
             parameters.put("Branch_Address", Branch_Address);
             parameters.put("Branch_City", Branch_City);
             parameters.put("Branch_Pincode", Branch_Pincode);
             parameters.put("Branch_Phone", Branch_Phone);
             parameters.put("To_Date", To_Date);

             parameters.put("user", user_name);
             System.out.println("user-------------"+user);
		           JasperReport jasperReport = JasperCompileManager.compileReport(input);
		           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

		           
		          
		           String  reportPath = request.getRealPath("/");
		           parameters.put("To_Date", To_Date);
		           if(em.getFile_Type().equalsIgnoreCase("1"))
		           {
	        	   JRExporter exporter2 = null;
	           		 ServletOutputStream ouputStream2 = response.getOutputStream();
	           		 
	           		 response.setContentType("application/pdf");
	           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
	                    exporter2 = new JRPdfExporter();
	                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	                    exporter2.exportReport();
	          
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("2"))
		           {
		        	   
			          
			           response.setContentType("application/xls");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			           JRXlsExporter exporter = new JRXlsExporter();
			           // JRXlsExporter exporter = new JRXlsExporter();
			            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			            exporter.exportReport();
			    
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("3"))
		           {
		        	   response.setContentType("application/docx");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
			           JRDocxExporter exporter3 = new JRDocxExporter();
			           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
			           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			           exporter3.exportReport();
		           }
			       

	         
	           response.getOutputStream().flush();
	           response.getOutputStream().close();
	           
	           
	           //------06-03-2023----------------------------------
		         String File_Type="";
		 	     if(em.getFile_Type().equalsIgnoreCase("1"))
		 	    	File_Type="PDF";
		 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
		 	    	File_Type="EXCEL";
		 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
		 		File_Type="DOCUMENT";
		        
		 //---------------------------------
		 	    	 //String user = (String) session.getAttribute("user");
		 			

		 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

	    
	       } catch (FileNotFoundException e) {
	           e.printStackTrace();
	       } catch (JRException e) {
	           e.printStackTrace();
	       } catch (ClassNotFoundException e) {
	           e.printStackTrace();
	       } catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	       finally {
	           if(conn!=null){
	               try {
					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	           }
	       }
	       }

			    	
			    	@RequestMapping(value = "/getSLArrear", params ="Btn_SLArrear", method=RequestMethod.POST)
				   public void viewSLArrear(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
				   { 
				session=request.getSession();
				int DBCode=(int) session.getAttribute("Branch");
				String user = (String) session.getAttribute("user");

				System.out.println("con----------------------------");
				
				 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
					String sys=sd.format(Current_Date);
				

					
					String Branch_Name1="";
    				String Scheme_name="";
    				String Account_No="";
    				String Customer_Name="";
    				String Open_date="";
    				String Loan_Amount="";
    				String CB="";
    				String pending_days="";
    				String Interest_Upto="";
    				String Arrear_Interest="";
    				String To_Date=em.getDob();
    				
    				
    			System.out.println("Inside controller---------------------------------------");
    			          
    			List <Simple> branchCode=dao10.getBranchCode();
    			System.out.println("Branch_Code=getbranch");
    			List<String> branchCodeList=new ArrayList<>();
    			for(Simple s:branchCode)
    			{
    				String s3=s.getS1()+"-"+s.getS2();
    				branchCodeList.add(s3);
    				System.out.println(s3);  
    				System.out.println("branchCodeList--------------------"+s3);
    			}
    			
    			//---------------------------------------------
         		
         		
         		mp.put("BranchCodeList", branchCodeList);
			 


				
				Connection conn=null;
		        try {
		       
		           
		      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		            
		                 String jrxmlFile=null;
		        if(em.getFile_Type().equalsIgnoreCase("2")){
		        	jrxmlFile=request.getRealPath("SL_Arrear_xl.jrxml");
		        }
		        else{
		        	jrxmlFile=request.getRealPath("SL_Arrear.jrxml");
		        }
		        
		                // jrxmlFile=request.getRealPath("demo.jrxml");
		            InputStream input = new FileInputStream(new File(jrxmlFile));
		            
		            



		       
		          	       	    	           
		           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
		            String Filename2="Secure Loan Arrear Report "+To_Date;
		            
		   
		   			 Map parameters = new HashMap();
		   		
			         System.out.println("Filename2--------------------------------"+Filename2);   
		   	
		   			String  realPath = request.getRealPath("/resources/images/");
		   			
		   		List<SimpleBranch> list=JLDao.getSLArrearReport(To_Date,DBCode);   
		   		mp.put("list",list);
		   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		   		
		   	        parameters.put("itemsJRBean", itemsJRBean); 
		   	    
		   	  parameters.put("Heading", Filename2); 
		   	 if(!em.getFile_Type().equalsIgnoreCase("2")){	  
		   	//-11-05-2024--------------------------------------------------------------------------------
		   	parameters.put("Comp_Cin",con.GetCINNO());
		   	parameters.put("Comp_Name",con.GetCompName());
		   	//----------------------------------------------------------------------------------------------
		   	 }
		   	 String Branch_Name = null;
             String Branch_Address = null;
             String Branch_City = null;
             String Branch_Pincode = null;
             String Branch_Phone = null;
             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
             for(SimpleBranch sb:brInfo)
             {
            	Branch_Name=sb.getS2();
	             Branch_Address=sb.getS3();
	             Branch_City=sb.getS4();
	             Branch_Pincode=sb.getS5();
	             Branch_Phone=sb.getS6();
	             
	           }
             
             String user_name=empDao.getEmployeeName(user);
             parameters.put("Branch_Name", Branch_Name);
             parameters.put("Branch_Address", Branch_Address);
             parameters.put("Branch_City", Branch_City);
             parameters.put("Branch_Pincode", Branch_Pincode);
             parameters.put("Branch_Phone", Branch_Phone);
             parameters.put("To_Date", To_Date);

             parameters.put("user", user_name);
		           JasperReport jasperReport = JasperCompileManager.compileReport(input);
		           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

		           
		          
		           String  reportPath = request.getRealPath("/");
			     
		           if(em.getFile_Type().equalsIgnoreCase("1"))
		           {
	        	   JRExporter exporter2 = null;
	           		 ServletOutputStream ouputStream2 = response.getOutputStream();
	           		 
	           		 response.setContentType("application/pdf");
	           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
	                    exporter2 = new JRPdfExporter();
	                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
	                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	                    exporter2.exportReport();
	          
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("2"))
		           {
		        	   
			          
			           response.setContentType("application/xls");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			           JRXlsExporter exporter = new JRXlsExporter();
			           // JRXlsExporter exporter = new JRXlsExporter();
			            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			            exporter.exportReport();
			    
		           }
		           else if(em.getFile_Type().equalsIgnoreCase("3"))
		           {
		        	   response.setContentType("application/docx");
			           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
			           JRDocxExporter exporter3 = new JRDocxExporter();
			           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
			           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			           exporter3.exportReport();
		           }
			       

	         
	           response.getOutputStream().flush();
	           response.getOutputStream().close();
	           
	           
	           //------06-03-2023----------------------------------
		         String File_Type="";
		 	     if(em.getFile_Type().equalsIgnoreCase("1"))
		 	    	File_Type="PDF";
		 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
		 	    	File_Type="EXCEL";
		 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
		 		File_Type="DOCUMENT";
		        
		 //---------------------------------
		 	    //	 String user = (String) session.getAttribute("user");
		 			

		 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('SL Arrear Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

	    
	       } catch (FileNotFoundException e) {
	           e.printStackTrace();
	       } catch (JRException e) {
	           e.printStackTrace();
	       } catch (ClassNotFoundException e) {
	           e.printStackTrace();
	       } catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	       finally {
	           if(conn!=null){
	               try {
					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	           }
	       }
	       }		  	 
    		   
			    	
			    	
			    	
			    	 @RequestMapping(value = "/RL_Arrear")
		    		   	public String RL_Arrear_H(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		    		       	///Session-------------------------------------------------------------
		    		   		 session=request.getSession();
		    		   			String user=(String) session.getAttribute("user");
		    		   			if(user==null)
		    		   			return  "Session_Popup";
		    		   	   //--------------------------------------------------------------------
		    		   			String fun_name="EOM Report";
		    					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
		    	                String Operation_status=dao10.Get_ScalarFun(query, 201);
		    			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
		    			 		 		return "/Report_Alert";

		    		   			String[] per1=perdao.GetPermission(user, "Recovery");
		    					
		    					
		      					 String View=null;
		      					 String Save=null;
		      					 String Update=null;
		      					 String Delete=null;
		      					 String Verify2=null;
		      					 String Verify3=null;
		      					 String Verify4=null;
		      					 String Verify5=null;
		      					 String Reports1=null;
		      					 String Button=null;
		      					 String Finger_Print=null;
		      							
		      					 
		      					 
		      					 View=per1[0];
		      					 Save=per1[1];
		      					 Update=per1[2];
		      					 Delete=per1[3];
		      					 Verify2=per1[4];
		      					 Verify3=per1[5];
		      					 Verify4=per1[6];
		      					 Verify5=per1[7];
		      					 Reports1=per1[8];
		      					 Button=per1[9];
		      					 Finger_Print=per1[10];
		      					
		      					 
		      					 System.out.println("View-------------------------"+View);
		      					 System.out.println("Save-------------------------"+Save);
		      					 System.out.println("Update-------------------------"+Update);
		      					 System.out.println("Delete-------------------------"+Delete);
		      					 System.out.println("Verify2-------------------------"+Verify2);
		      					 System.out.println("Verify3-------------------------"+Verify3);
		      					 System.out.println("Verify4-------------------------"+Verify4);
		      					 System.out.println("Verify5-------------------------"+Verify5);
		      					 System.out.println("Reports1-------------------------"+Reports1);
		      					 System.out.println("Button-------------------------"+Button);
		      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		      					 
		      					 
		      					
		      					
		      					int btn_Verify=1;
		      					int btn_Save=1;
		      					int btn_Delete=1;
		      					
		      					if (View.equalsIgnoreCase("N"))
		      						return ("/Authorization");

		    		   			
		       		   		 Employee em = new Employee();
		       				 mp.put("Employee2", em);
		    		   			
		    		   		return  "RL_Arrear";
		    		   	}
			    	 
			    	 
			    	 @RequestMapping(value = "/getRLArrear", params ="Btn_RLArrear", method=RequestMethod.POST)
					   public void viewRLArrear(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
					   { 
					session=request.getSession();
					int DBCode=(int) session.getAttribute("Branch");
					String user = (String) session.getAttribute("user");
					System.out.println("con----------------------------");
					
					 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

					 	Date Current_Date=(Date) session.getAttribute("Current_Date");
						String sys=sd.format(Current_Date);
					

						
						String Branch_Name1="";
	    				String Scheme_name="";
	    				String Account_No="";
	    				String Customer_Name="";
	    				String Open_date="";
	    				String Loan_Amount="";
	    				String CB="";
	    				String pending_days="";
	    				String Interest_Upto="";
	    				String Arrear_Interest="";
	    				String To_Date=em.getDob();
	    				
	    				
	    			System.out.println("Inside controller---------------------------------------");
	    			          
	    			List <Simple> branchCode=dao10.getBranchCode();
	    			System.out.println("Branch_Code=getbranch");
	    			List<String> branchCodeList=new ArrayList<>();
	    			for(Simple s:branchCode)
	    			{
	    				String s3=s.getS1()+"-"+s.getS2();
	    				branchCodeList.add(s3);
	    				System.out.println(s3);  
	    				System.out.println("branchCodeList--------------------"+s3);
	    			}
	    			
	    			//---------------------------------------------
	         		
	         		
	         		mp.put("BranchCodeList", branchCodeList);
				 


					
					Connection conn=null;
			        try {
			       
			           
			      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			            
			                 String jrxmlFile=null;
			        if(em.getFile_Type().equalsIgnoreCase("2")){
			        	 jrxmlFile=request.getRealPath("RL_Arrear_xl.jrxml");
			        }else{
			        	 jrxmlFile=request.getRealPath("RL_Arrear.jrxml");
			        }
			               
			                // jrxmlFile=request.getRealPath("demo.jrxml");
			            InputStream input = new FileInputStream(new File(jrxmlFile));
			            
			            



			       
			          	       	    	           
			           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
			            String Filename2="Rapid Loan Arrear Report as on "+To_Date;
			            
			   
			   			 Map parameters = new HashMap();
			   		
				         System.out.println("Filename2--------------------------------"+Filename2);   
			   	
			   			String  realPath = request.getRealPath("/resources/images/");
			   			
			   		List<SimpleBranch> list=JLDao.getRLArrearReport(To_Date,DBCode);   
			   		mp.put("list",list);
			   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
			   		
			   	        parameters.put("itemsJRBean", itemsJRBean); 
			   	    
			   	  parameters.put("Heading", Filename2); 
			   	  
			   	  
			   	 String Branch_Name = null;
	             String Branch_Address = null;
	             String Branch_City = null;
	             String Branch_Pincode = null;
	             String Branch_Phone = null;
	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	             for(SimpleBranch sb:brInfo)
	             {
	            	Branch_Name=sb.getS2();
		            Branch_Address=sb.getS3();
		             Branch_City=sb.getS4();
		             Branch_Pincode=sb.getS5();
		             Branch_Phone=sb.getS6();
		             
		           }
	             String user_name=empDao.getEmployeeName(user);
	             parameters.put("Branch_Name", Branch_Name);
	             parameters.put("Branch_Address", Branch_Address);
	             parameters.put("Branch_City", Branch_City);
	             parameters.put("Branch_Pincode", Branch_Pincode);
	             parameters.put("Branch_Phone", Branch_Phone);

	             parameters.put("user", user_name);
			           JasperReport jasperReport = JasperCompileManager.compileReport(input);
			           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

			           
			          
			           String  reportPath = request.getRealPath("/");
				     
			           if(em.getFile_Type().equalsIgnoreCase("1"))
			           {
		        	   JRExporter exporter2 = null;
		           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		           		 
		           		 response.setContentType("application/pdf");
		           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		                    exporter2 = new JRPdfExporter();
		                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		                    exporter2.exportReport();
		          
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("2"))
			           {
			        	   
				          
				           response.setContentType("application/xls");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
				           JRXlsExporter exporter = new JRXlsExporter();
				           // JRXlsExporter exporter = new JRXlsExporter();
				            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
				            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				            exporter.exportReport();
				    
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("3"))
			           {
			        	   response.setContentType("application/docx");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
				           JRDocxExporter exporter3 = new JRDocxExporter();
				           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
				           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
				           exporter3.exportReport();
			           }
				       

		         
		           response.getOutputStream().flush();
		           response.getOutputStream().close();
		           
		           
		           //------06-03-2023----------------------------------
			         String File_Type="";
			 	     if(em.getFile_Type().equalsIgnoreCase("1"))
			 	    	File_Type="PDF";
			 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
			 	    	File_Type="EXCEL";
			 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
			 		File_Type="DOCUMENT";
			        
			 //---------------------------------
			 	    //	 String user = (String) session.getAttribute("user");
			 			

			 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('RL Arrear Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

		       } catch (FileNotFoundException e) {
		           e.printStackTrace();
		       } catch (JRException e) {
		           e.printStackTrace();
		       } catch (ClassNotFoundException e) {
		           e.printStackTrace();
		       } catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		       finally {
		           if(conn!=null){
		               try {
						conn.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		           }
		       }
		       }

			    	 
			    	 

			    	 @RequestMapping(value = "/FD_Consolidated")
		    		   	public String FD_Consolidated_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		    		       	///Session-------------------------------------------------------------
		    		   		 session=request.getSession();
		    		   			String user=(String) session.getAttribute("user");
		    		   			if(user==null)
		    		   			return  "Session_Popup";
		    		   	   //--------------------------------------------------------------------
		    		   			String fun_name="EOM Report";
								String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
				                String Operation_status=dao10.Get_ScalarFun(query, 201);
						 		 	if(!Operation_status.equalsIgnoreCase("Y"))
						 		 		return "/Report_Alert";
						 		 	
		    		   			String[] per1=perdao.GetPermission(user, "Business");
		    					
		    					
		      					 String View=null;
		      					 String Save=null;
		      					 String Update=null;
		      					 String Delete=null;
		      					 String Verify2=null;
		      					 String Verify3=null;
		      					 String Verify4=null;
		      					 String Verify5=null;
		      					 String Reports1=null;
		      					 String Button=null;
		      					 String Finger_Print=null;
		      							
		      					 
		      					 
		      					 View=per1[0];
		      					 Save=per1[1];
		      					 Update=per1[2];
		      					 Delete=per1[3];
		      					 Verify2=per1[4];
		      					 Verify3=per1[5];
		      					 Verify4=per1[6];
		      					 Verify5=per1[7];
		      					 Reports1=per1[8];
		      					 Button=per1[9];
		      					 Finger_Print=per1[10];
		      					
		      					 
		      					 System.out.println("View-------------------------"+View);
		      					 System.out.println("Save-------------------------"+Save);
		      					 System.out.println("Update-------------------------"+Update);
		      					 System.out.println("Delete-------------------------"+Delete);
		      					 System.out.println("Verify2-------------------------"+Verify2);
		      					 System.out.println("Verify3-------------------------"+Verify3);
		      					 System.out.println("Verify4-------------------------"+Verify4);
		      					 System.out.println("Verify5-------------------------"+Verify5);
		      					 System.out.println("Reports1-------------------------"+Reports1);
		      					 System.out.println("Button-------------------------"+Button);
		      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		      					 
		      					 
		      					
		      					
		      					int btn_Verify=1;
		      					int btn_Save=1;
		      					int btn_Delete=1;
		      					int btn_Report=1;
		      					
		      					if (View.equalsIgnoreCase("N"))
		      						return ("/Authorization");
		      					System.out.println("0000000000000000000000");
							    if (Verify2.equalsIgnoreCase("N"))	
							       btn_Verify = 2;
							    System.out.println("111111111111");
							    if (Save.equalsIgnoreCase("N"))
							        btn_Save= 2;
							    System.out.println("222222222222222222222222");
							    if (Update.equalsIgnoreCase("N"))
							        btn_Save=2;
							    if (Reports1.equalsIgnoreCase("N"))
							    	btn_Report=2;
		    		   			
							    String SaveFlag="";
							    if(btn_Report==2)
							    {
								 SaveFlag="Display:none;";
								 System.out.println("1111111111111111111111");
							    }
							 
							 mp.put("ReportFlag", SaveFlag);
		       		   		 Employee em = new Employee();
		       				 mp.put("Employee2", em);
		    		   			
		    		   		return  "FD_Consolidated";
		    		   	}
			    	 
			    	 
			    	 @RequestMapping(value = "/getFD_Consolidated", params ="Btn_FD_Consolidated", method=RequestMethod.POST)
					   public void FD_ConsolidatedReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
					   { 
					session=request.getSession();
					int DBCode=(int) session.getAttribute("Branch");
					String user=(String) session.getAttribute("user");
					System.out.println("con----------------------------");
					
					 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

					 	Date Current_Date=(Date) session.getAttribute("Current_Date");
						String sys=sd.format(Current_Date);
					

						
						String Branch_Name1="";
	    				String Scheme_name="";
	    				String Account_No="";
	    				String Customer_Name="";
	    				String Open_date="";
	    				String Loan_Amount="";
	    				String CB="";
	    				String pending_days="";
	    				String Interest_Upto="";
	    				String Arrear_Interest="";
	    				String From_Date=em.getDob();
	    				String To_Date=em.getJoining_Date();
	    				
	    				
	    			System.out.println("Inside controller---------------------------------------");
	    			          
	    			List <Simple> branchCode=dao10.getBranchCode();
	    			System.out.println("Branch_Code=getbranch");
	    			List<String> branchCodeList=new ArrayList<>();
	    			for(Simple s:branchCode)
	    			{
	    				String s3=s.getS1()+"-"+s.getS2();
	    				branchCodeList.add(s3);
	    				System.out.println(s3);  
	    				System.out.println("branchCodeList--------------------"+s3);
	    			}
	    			
	    			//---------------------------------------------
	         		
	         		
	         		mp.put("BranchCodeList", branchCodeList);
				 


					
					Connection conn=null;
			        try {
			       
			           
			      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			            
			                 String jrxmlFile=null;
			                if(em.getFile_Type().equalsIgnoreCase("2"))
					           {
			                jrxmlFile=request.getRealPath("FD_Consolidated_xl.jrxml");
					           }
			                else
			                	  jrxmlFile=request.getRealPath("FD_Consolidated.jrxml");
			                
			                // jrxmlFile=request.getRealPath("demo.jrxml");
			            InputStream input = new FileInputStream(new File(jrxmlFile));
			            
			            



			       
			          	       	    	           
			           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
			            String Filename2="FD_Consolidated_Report From "+From_Date+" to "+To_Date;
			            
			   
			   			 Map parameters = new HashMap();
			   		
				         System.out.println("Filename2--------------------------------"+Filename2);   
			   	
			   			String  realPath = request.getRealPath("/resources/images/");
			   			
			   		List<SimpleBranch> list=JLDao.getFD_ConsolidatedReport(From_Date,To_Date,DBCode);   
			   		mp.put("list",list);
			   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
			   	 String user_name=empDao.getEmployeeName(user);
			   	        parameters.put("itemsJRBean", itemsJRBean); 
			   	    
			   	  parameters.put("Heading", Filename2); 
			      parameters.put("user", user_name);
			   	  
			   	 String Branch_Name = null;
	             String Branch_Address = null;
	             String Branch_City = null;
	             String Branch_Pincode = null;
	             String Branch_Phone = null;
	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	             for(SimpleBranch sb:brInfo)
	             {
	            	Branch_Name=sb.getS2();
		            Branch_Address=sb.getS3();
		             Branch_City=sb.getS4();
		             Branch_Pincode=sb.getS5();
		             Branch_Phone=sb.getS6();
		             
		           }
	             parameters.put("Branch_Name", Branch_Name);
	             parameters.put("Branch_Address", Branch_Address);
	             parameters.put("Branch_City", Branch_City);
	             parameters.put("Branch_Pincode", Branch_Pincode);
	             parameters.put("Branch_Phone", Branch_Phone);
			    
			           JasperReport jasperReport = JasperCompileManager.compileReport(input);
			           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

			           
			          
			           String  reportPath = request.getRealPath("/");
				     
			           if(em.getFile_Type().equalsIgnoreCase("1"))
			           {
		        	   JRExporter exporter2 = null;
		           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		           		 
		           		 response.setContentType("application/pdf");
		           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		                    exporter2 = new JRPdfExporter();
		                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		                    exporter2.exportReport();
		          
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("2"))
			           {
			        	   
				          
				           response.setContentType("application/xls");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
				           JRXlsExporter exporter = new JRXlsExporter();
				           // JRXlsExporter exporter = new JRXlsExporter();
				            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
				            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				            exporter.exportReport();
				    
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("3"))
			           {
			        	   response.setContentType("application/docx");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
				           JRDocxExporter exporter3 = new JRDocxExporter();
				           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
				           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
				           exporter3.exportReport();
			           }
				       

		         
		           response.getOutputStream().flush();
		           response.getOutputStream().close();
		           
		           
		           //------06-03-2023----------------------------------
			         String File_Type="";
			 	     if(em.getFile_Type().equalsIgnoreCase("1"))
			 	    	File_Type="PDF";
			 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
			 	    	File_Type="EXCEL";
			 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
			 		File_Type="DOCUMENT";
			        
			 //---------------------------------
			 	    	// String user = (String) session.getAttribute("user");
			 			

			 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('FD Consolidated Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":From "+From_Date+" to "+To_Date+"')", 201);

		       } catch (FileNotFoundException e) {
		           e.printStackTrace();
		       } catch (JRException e) {
		           e.printStackTrace();
		       } catch (ClassNotFoundException e) {
		           e.printStackTrace();
		       } catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		       finally {
		           if(conn!=null){
		               try {
						conn.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		           }
		       }
		       } 
			    	 
			    	 
			    		@RequestMapping(value="/Performance_Report", method=RequestMethod.GET)
				  		public String viewPerformanceReport(ModelMap mp,HttpSession session,HttpServletRequest request) throws SQLException
				  		{
				  			session=request.getSession();
				  			String user=(String) session.getAttribute("user");
				  			if(user==null)
				  			return "Session";	
				  			
				  			String fun_name="EOM Report";
							String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
			                String Operation_status=dao10.Get_ScalarFun(query, 201);
					 		 	if(!Operation_status.equalsIgnoreCase("Y"))
					 		 		return "/Report_Alert";
				  			
				  			String[] per1=perdao.GetPermission(user, "Business");
							
							
							 String View=null;
							 String Save=null;
							 String Update=null;
							 String Delete=null;
							 String Verify2=null;
							 String Verify3=null;
							 String Verify4=null;
							 String Verify5=null;
							 String Reports1=null;
							 String Button=null;
							 String Finger_Print=null;
									
							 
							 
							 View=per1[0];
							 Save=per1[1];
							 Update=per1[2];
							 Delete=per1[3];
							 Verify2=per1[4];
							 Verify3=per1[5];
							 Verify4=per1[6];
							 Verify5=per1[7];
							 Reports1=per1[8];
							 Button=per1[9];
							 Finger_Print=per1[10];
							
							 
							 System.out.println("View-------------------------"+View);
							 System.out.println("Save-------------------------"+Save);
							 System.out.println("Update-------------------------"+Update);
							 System.out.println("Delete-------------------------"+Delete);
							 System.out.println("Verify2-------------------------"+Verify2);
							 System.out.println("Verify3-------------------------"+Verify3);
							 System.out.println("Verify4-------------------------"+Verify4);
							 System.out.println("Verify5-------------------------"+Verify5);
							 System.out.println("Reports1-------------------------"+Reports1);
							 System.out.println("Button-------------------------"+Button);
							 System.out.println("Finger_Print-------------------------"+Finger_Print);
							 
							 
							
							
							int btn_Verify=1;
							int btn_Save=1;
							int btn_Delete=1;
							int btn_Report=1;
							
							if (View.equalsIgnoreCase("N"))
								return ("/Authorization");
							System.out.println("0000000000000000000000");
						    if (Verify2.equalsIgnoreCase("N"))	
						       btn_Verify = 2;
						    System.out.println("111111111111");
						    if (Save.equalsIgnoreCase("N"))
						        btn_Save= 2;
						    System.out.println("222222222222222222222222");
						    if (Update.equalsIgnoreCase("N"))
						        btn_Save=2;
						    if (Reports1.equalsIgnoreCase("N"))
						    	btn_Report=2;
				  			
				  			Admin_Master am = new Admin_Master();
				  			
				  			mp.put("PerformanceReport", am);
				  			
				  			SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
				  			int DBCode=(int) session.getAttribute("Branch");
				  			Date Current_Date=(Date) session.getAttribute("Current_Date");
				  			String Current=sd.format(Current_Date);
				  			am.setFrom_Date(Current);
				  			am.setTo_Date(Current);
				  			
				  			return "Performance_Report";
				  		} 

			    	 
			    		
			    		 //Performance Close
		  				 @RequestMapping(value="/savePerformanceReport", params ="Close",method=RequestMethod.POST)
		  					public ModelAndView DigiSavingclose(@ModelAttribute("PerformanceReport") Admin_Master am,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request,SessionStatus status) throws SQLException, ParseException
		  					{
		  					 session=request.getSession();
		  					 int DBCode=(int) session.getAttribute("Branch");
		  						String user=(String) session.getAttribute("user");
		  						if(user==null)
		  						return new ModelAndView("Session");

		  						
		  						return new ModelAndView("redirect:/Business_Development");
		  						
		  					}
		  				 
		  				 
		  				 
		  				 
		  				 
		  				 
		  				@RequestMapping("/Designation_Master")
		  				 public ModelAndView viewIdProof_Designation_Master(HttpServletRequest request,HttpSession session,Map<String,Object> model,ModelMap mp) throws SQLException
		  				 {  
		  					session=request.getSession();
		  					
		  					 session=request.getSession();
		  						String user=(String) session.getAttribute("user");
		  						if(user==null)
		  						return  new ModelAndView("Session");
		  				   //--------------------------------------------------------------------
		  					 int DBCode=(int) session.getAttribute("Branch");

		  					//-----------------------------------------------------GetPermission-------------------------------------

		  						session=request.getSession();
		  						//request.getSession().setMaxInactiveInterval(40);
		  						
		  						// user=(String) session.getAttribute("user"); 
		  						
		  						session=request.getSession();
		  						
		  						String[] per1=perdao.GetPermission(user, "HR");
		  						
		  						 String View=null;
		  						 String Save=null;
		  						 String Update=null;
		  						 String Delete=null;
		  						 String Verify2=null;
		  						 String Verify3=null;
		  						 String Verify4=null;
		  						 String Verify5=null;
		  						 String Reports1=null;
		  						 String Button=null;
		  						 String Finger_Print=null;
		  								
		  						 
		  						 
		  						 View=per1[0];
		  						 Save=per1[1];
		  						 Update=per1[2];
		  						 Delete=per1[3];
		  						 Verify2=per1[4];
		  						 Verify3=per1[5];
		  						 Verify4=per1[6];
		  						 Verify5=per1[7];
		  						 Reports1=per1[8];
		  						 Button=per1[9];
		  						 Finger_Print=per1[10];
		  						
		  						 int btn_Delete=1;
		  						 int btn_Save=1;
		  						 int btn_Update=1;
		  						 
		  						 System.out.println("View-------------------------"+View);
		  						 System.out.println("Save-------------------------"+Save);
		  						 System.out.println("Update-------------------------"+Update);
		  						 System.out.println("Delete-------------------------"+Delete);
		  						 System.out.println("Verify2-------------------------"+Verify2);
		  						 System.out.println("Verify3-------------------------"+Verify3);
		  						 System.out.println("Verify4-------------------------"+Verify4);
		  						 System.out.println("Verify5-------------------------"+Verify5);
		  						 System.out.println("Reports1-------------------------"+Reports1);
		  						 System.out.println("Button-------------------------"+Button);
		  						 System.out.println("Finger_Print-------------------------"+Finger_Print);
		  						 
		  						 if (View.equalsIgnoreCase("N"))
		  								return new ModelAndView("/Authorization");

		  						
		  						 if (Delete.equalsIgnoreCase("N"))	
		  							 btn_Delete = 2;
		  						 
		  						 if (Save.equalsIgnoreCase("N"))	
		  							 btn_Save = 2;
		  						 
		  						 if (Update.equalsIgnoreCase("N"))	
		  							 btn_Update = 2;
		  						
		  						 System.out.println("btn_Verify-------------"+btn_Delete);
		  						  String DeleteFlag=null;
		  						  String SaveFlag=null;
		  						 if(btn_Delete==2)
		  						    {
		  							 DeleteFlag="Display:none;";
		  							 System.out.println("1111111111111111111111");
		  						    }
		  						 
		  						 if(btn_Save==2)
		  						    {
		  							 SaveFlag="Display:none;";
		  							 System.out.println("1111111111111111111111");
		  						    }
		  						mp.put("SaveDisplay", SaveFlag);
		  						
		  						 Employee em = new Employee();
		  						 mp.put("Employee3", em);
		  						 
		  				 
	
		  					
		  					List<Simple> list=empDao.getSimple(DBCode);
		  					if(list.size()!=0)
		  					{
		  						mp.put("NoOfRecords", list.size());
		  					}
		  					else
		  					{
		  						mp.put("NoOfRecords", 0);
		  					}
		  					mp.put("SimpleList", list);
		  					
		  					
		  					return new ModelAndView("Designation_Master");
		  			  } 
		  				
		  				

		  				 @RequestMapping(value="/saveDesignation_Master",method = RequestMethod.POST)  
		  				    public ModelAndView saveDesignation_Master(HttpServletRequest request,HttpSession session,@ModelAttribute("Employee3") Employee il,Map<String,Object> model,ModelMap mp)
		  				    {  
		  					 session=request.getSession();
		  					 int DBCode=(int) session.getAttribute("Branch");

		  					

		  				    		 
		  					 		empDao.saveDesignation(il,DBCode);
		  					 		mp.put("message", "Records Successfully Added");
		  					 		
		  					 		List<Simple> list=empDao.getSimple(DBCode);
		  							mp.put("SimpleList", list);
		  							return new ModelAndView("Designation_Master");
		  				    	}
		  				
		  				
		  			    
		  			    /* It deletes record for the given id in URL and redirects to /viewemp */  
		  				
		  			    @RequestMapping(value="/deleteDesignation_Master/{Bank_Desc}",method = RequestMethod.GET)  
		  			    public ModelAndView deleteDesignation_Master(HttpServletRequest request,HttpSession session,@PathVariable String Bank_Desc,ModelMap mp) throws SQLException{  
		  			      
		  			    	session=request.getSession();
		  			    	 int DBCode=(int) session.getAttribute("Branch");

		  			    	

		  			    	
		  			    	
		  			    	int i=0;
		  			    	
		  			    	  i=empDao.deleteDesignation(Bank_Desc,DBCode); 
		  			       
		  			    	  mp.put("message", "Record was Deleted");
		  			    	  
		  			    	  List<Simple> list=empDao.getSimple(DBCode);
		  						mp.put("SimpleList", list);
		  						
		  			    	 
		  			        return new ModelAndView("redirect:/Designation_Master");  
		  			    }  
		  			    
		  			  @RequestMapping(value="/SMS_List", method=RequestMethod.GET)
						public String SMS_List(ModelMap mp,HttpSession session,HttpServletRequest request) throws SQLException, ParseException
						{
							///Session-------------------------------------------------------------
							 session=request.getSession();
								String user=(String) session.getAttribute("user");
								if(user==null)
								return "Session";
						   //--------------------------------------------------------------------
														
								//----------------------------------------------------------------------------------
								String[] per1=perdao.GetPermission(user, "HR");
		    					
		    					
		   					 String View=null;
		   					 String Save=null;
		   					 String Update=null;
		   					 String Delete=null;
		   					 String Verify2=null;
		   					 String Verify3=null;
		   					 String Verify4=null;
		   					 String Verify5=null;
		   					 String Reports1=null;
		   					 String Button=null;
		   					 String Finger_Print=null;
		   							
		   					 
		   					 
		   					 View=per1[0];
		   					 Save=per1[1];
		   					 Update=per1[2];
		   					 Delete=per1[3];
		   					 Verify2=per1[4];
		   					 Verify3=per1[5];
		   					 Verify4=per1[6];
		   					 Verify5=per1[7];
		   					 Reports1=per1[8];
		   					 Button=per1[9];
		   					 Finger_Print=per1[10];
		   					
		   					 
		   					 System.out.println("View-------------------------"+View);
		   					 System.out.println("Save-------------------------"+Save);
		   					 System.out.println("Update-------------------------"+Update);
		   					 System.out.println("Delete-------------------------"+Delete);
		   					 System.out.println("Verify2-------------------------"+Verify2);
		   					 System.out.println("Verify3-------------------------"+Verify3);
		   					 System.out.println("Verify4-------------------------"+Verify4);
		   					 System.out.println("Verify5-------------------------"+Verify5);
		   					 System.out.println("Reports1-------------------------"+Reports1);
		   					 System.out.println("Button-------------------------"+Button);
		   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		   					 
		   					 
		   					
		   					
		   					int btn_Verify=1;
		   					int btn_Save=1;
		   					int btn_Delete=1;
		   					
		   					if (View.equalsIgnoreCase("N"))
		   						return ("/Authorization");
		   					
		   					
		   					int btn_Update=1;
		   					if (Update.equalsIgnoreCase("N"))
		   					{
		   						btn_Update=2;
		   					}
		   					
		   				 String UpdateFlag=null;
			  			 if(btn_Update==2)
			  			    {
			  				UpdateFlag="Display:none;";
			  				 System.out.println("1111111111111111111111");
			  			    }
			  			 
			  			 mp.put("UpdateFlag", UpdateFlag);
			  			
								//-------------------------------------------------------------------------------
					
							Admin_Master am = new Admin_Master();
							
							// Date loading on Page
							
							SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
							Date sysdate = (Date) session.getAttribute("Current_Date");
							String MyDate = sd.format(sysdate);
							mp.put("sysdate",MyDate);
							am.setFrom_Date(MyDate);
							
							List <Simple> branchCode=dao10.getBranchCode();
							System.out.println("Branch_Code=getbranch");
							List<String> branchCodeList=new ArrayList<>();
							for(Simple s:branchCode)
							{
								String s3=s.getS1()+"-"+s.getS2();
								branchCodeList.add(s3);
								System.out.println(s3);  
								 
							}
							mp.put("BranchCodeList", branchCodeList);
						
							
							 List <SimpleBranch> list4=empDao.getSMSList(MyDate,"","",201);
							    mp.put("EmpidList_FN", list4);
							       
							    if(list4.size()!=0)
						    	{
						    		mp.put("message", list4.size());
						    	}
						    	else
						    	{
						    		mp.put("message", 0);
						    	}		
							mp.put("GeneralLedger", am);
							mp.put("BCode",201);
							
							
							
													 
							 
								 
																			
							return "SMS_List";
						} 

		  			    
		  			    
		  			@RequestMapping(value = "/SMS_List_Search",  params="Btn_Go_Click_SMS", method=RequestMethod.POST)
					public String SMS_List_search(ModelMap mp,HttpServletRequest request,HttpServletResponse response,Model model,@ModelAttribute ("GeneralLedger") Admin_Master am,HttpSession session) throws ParseException, IOException { 
					
					
						session=request.getSession();
						///Session-------------------------------------------------------------
						 session=request.getSession();
							String user=(String) session.getAttribute("user");
							if(user==null)
							return "Session";
					   //--------------------------------------------------------------------
						 int DBCode=(int) session.getAttribute("Branch");

						 
						 String Branch_Type=am.getBranch_Type();
					   	  String bcode2=Branch_Type.substring(0, 3);
					            System.out.println(bcode2);
					            int bcode=Integer.parseInt(bcode2);

					        	// Date loading on Page
								
								SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
								Date sysdate = (Date) session.getAttribute("Current_Date");
								String MyDate = sd.format(sysdate);
								mp.put("sysdate",MyDate);
								
								List <Simple> branchCode=dao10.getBranchCode();
								System.out.println("Branch_Code=getbranch");
								List<String> branchCodeList=new ArrayList<>();
								for(Simple s:branchCode)
								{
									String s3=s.getS1()+"-"+s.getS2();
									branchCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("BranchCodeList", branchCodeList);
							
								if(bcode==200)
								{
									bcode=2;
								}
								
								String Status="";
								if(!am.getLbl_Status().equalsIgnoreCase("1"))
								{
									Status=am.getLbl_Status();
								}
								
								 List <SimpleBranch> list4=empDao.getSMSList(am.getFrom_Date(),am.getTo_Date(),Status,bcode);
								    mp.put("EmpidList_FN", list4);
													am.setFrom_Date(am.getFrom_Date());	
													System.out.println("am.getFrom_Date()="+am.getFrom_Date());
													
													if(list4.size()!=0)
											    	{
											    		mp.put("message", list4.size());
											    	}
											    	else
											    	{
											    		mp.put("message", 0);
											    	}
								mp.put("GeneralLedger", am);
								
								mp.put("BCode",bcode);
								
								


														
								return "SMS_List";
							
						
								} 

		  			    
		  		//30-04-2022 ,27-07-2023
		  			@RequestMapping(value="/saveEmployee_Master",  params = "Delete",method = RequestMethod.POST)  
		  		    public ModelAndView DeleteEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request,RedirectAttributes attributes)throws Exception{


		  	    	///Session-------------------------------------------------------------
		  			 session=request.getSession();
		  				String user=(String) session.getAttribute("user");
		  				if(user==null)
		  					 return new ModelAndView("Session");  
		  	   	//-----------------------------------------------------GetPermission-------------------------------------

		  			session=request.getSession();
		  			
		  					  			
		  			 mp.put("Employee2", em);
		  			
		  			 
		  			int  a= empDao.deleteEmployee_Master(em.getEmp_Id(),201); 
		  			System.out.println("aaaaaaaaaaaaaaaaaaaaa----------"+a);
		  			System.out.println("Emp_Id-----------------"+em.getEmp_Id());
		  			
		  			if(a==1)
		  			{
		  				
		  				int b=empDao.deleteBranch_LoginDetails(em.getEmp_Id(),201);
		  				System.out.println("bbbbbbbbbbbbbbbbbbbbbbbb----------"+b);
		  				
		  				
		  				if(empDao.Check_Already_User_Corp(em.getUser_name())>0)
		  				   empDao.deleteCorp_LoginDetails(em.getUser_name(),201);
		  				
    					dao20.UpdateDATA("Delete from EMP_ATTACHEMENTS where emp_id='"+em.getEmp_Id()+"'",201);

		  				
		  				//13-06-2022
		  				int countcheck=empDao.Check_Multiuser(em.getUser_name());
	    				   if(countcheck>0)
	    					{
	    					  empDao.Delete_in_Multibranch(em.getUser_name());
	    					}
	    					
	    					dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master Delete','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'DELETION :"+em.getEmp_Id()+"')", 201);

		  				attributes.addFlashAttribute("message", "Record deleted !");

		  			}	
		  			else
		  			{
		  				attributes.addFlashAttribute("message", "Record not deleted !");

		  			}

		  			
		  			  return new ModelAndView("redirect:/Employee_List");  
		  	    }
		  			
		  			
		  			 @RequestMapping("/Connection_List")
		  			 public ModelAndView Connection_List(Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception
		  			{  
		  		   	///Session-------------------------------------------------------------
		  				 session=request.getSession();
		  					String user=(String) session.getAttribute("user");
		  					if(user==null)
		  						 return new ModelAndView("Session");  
		  		   	//-----------------------------------------------------GetPermission-------------------------------------

		  				session=request.getSession();
		  				
		  				String[] per1=perdao.GetPermission(user, "HR");
		  				
		  				 String View=null;
		  				 String Save=null;
		  				 String Update=null;
		  				 String Delete=null;
		  				 String Verify2=null;
		  				 String Verify3=null;
		  				 String Verify4=null;
		  				 String Verify5=null;
		  				 String Reports1=null;
		  				 String Button=null;
		  				 String Finger_Print=null;
		  						
		  				 
		  				 
		  				 View=per1[0];
		  				 Save=per1[1];
		  				 Update=per1[2];
		  				 Delete=per1[3];
		  				 Verify2=per1[4];
		  				 Verify3=per1[5];
		  				 Verify4=per1[6];
		  				 Verify5=per1[7];
		  				 Reports1=per1[8];
		  				 Button=per1[9];
		  				 Finger_Print=per1[10];
		  				
		  				 int btn_Delete=1;
		  				 int btn_Save=1;
		  				 int btn_Update=1;
		  				 
		  				 System.out.println("View-------------------------"+View);
		  				 System.out.println("Save-------------------------"+Save);
		  				 System.out.println("Update-------------------------"+Update);
		  				 System.out.println("Delete-------------------------"+Delete);
		  				 System.out.println("Verify2-------------------------"+Verify2);
		  				 System.out.println("Verify3-------------------------"+Verify3);
		  				 System.out.println("Verify4-------------------------"+Verify4);
		  				 System.out.println("Verify5-------------------------"+Verify5);
		  				 System.out.println("Reports1-------------------------"+Reports1);
		  				 System.out.println("Button-------------------------"+Button);
		  				 System.out.println("Finger_Print-------------------------"+Finger_Print);
		  				 
		  				 if (View.equalsIgnoreCase("N"))
		  						return new ModelAndView("/Authorization");

		  				
		  				 if (Delete.equalsIgnoreCase("N"))	
		  					 btn_Delete = 2;
		  				 
		  				 if (Save.equalsIgnoreCase("N"))	
		  					 btn_Save = 2;
		  				 
		  				 if (Update.equalsIgnoreCase("N"))	
		  					 btn_Update = 2;
		  				
		  				 System.out.println("btn_Verify-------------"+btn_Delete);
		  				  String DeleteFlag=null;
		  				  String SaveFlag=null;
		  				 if(btn_Delete==2)
		  				    {
		  					 DeleteFlag="Display:none;";
		  					 System.out.println("1111111111111111111111");
		  				    }
		  				 
		  				 if(btn_Save==2)
		  				    {
		  					 SaveFlag="Display:none;";
		  					 System.out.println("1111111111111111111111");
		  				    }
		  				mp.put("SaveDisplay", SaveFlag);
		  				mp.put("deletDisplay", DeleteFlag);
		  				
		  				 Employee em = new Employee();
		  				 mp.put("Employee2", em);
		  				 mp.addAttribute("Employee2", em);	
		  				 
		  				 String Emp_Id=em.getEmp_Id();
		  				 
		  				 List<SimpleBranch> list=empDao.getEmployee_List(Emp_Id, 201);
		  			    	
		  				 System.out.println("size-----------------------"+list.size());
		  			    	if(list.size()!=0)
		  			    	{
		  			    		mp.put("NoOfRecords", list.size());
		  			    		System.out.println("size22222222-----------------------"+list.size());
		  			    	}
		  			    	else
		  			    	{
		  			    		mp.put("NoOfRecords", 0);
		  			    		System.out.println("size1111111111-----------------------");
		  			    	}
		  			    	
		  			 		model.put("list",list);
		  			 		
		  			 		 		
		  			 		int page=1;
		  					
		  					
		  			 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
		  			        pagedListHolder.setPageSize(10);
		  			        mp.put("maxPages", pagedListHolder.getPageCount());
		  			        int n= pagedListHolder.getPageCount();
		  			        
		  			        if(page <= pagedListHolder.getPageCount()) {
		  			            pagedListHolder.setPage(page-1);
		  			            mp.put("list", pagedListHolder.getPageList());
		  			        }
		  					 
		  			        int minPages=1;
		  			 		int maxPages=n;
		  			 		
		  			 		
		  			 		
		  			 		minPages=page/10;
		  			 		if(minPages==0)
		  			 		{
		  			 			minPages=1;
		  			 			int i=minPages+20;
		  			 			if(i>n)
		  			 			maxPages=n;
		  			 			else
		  			 				maxPages=i;
		  			 		}
		  			 		else
		  			 		{
		  			 			minPages=minPages*10;
		  			 			int i=minPages+20;
		  			 			if(i>n)
		  			 			maxPages=n;
		  			 			else
		  			 				maxPages=i;
		  			 		}
		  			        System.out.println("NoOfPages="+n);
		  			        
		  			        mp.put("minPages",minPages);
		  			        mp.put("maxPages",maxPages);
		  					
		  					mp.put("page", page);
		  			 				
		  		    return new ModelAndView("Employee_List");  
		  		}  

		  			 
		  			@RequestMapping("/Incentive_Report")
		  			 public ModelAndView viewIncentiveReportForm(Map<String,Object> model,ModelMap mp,HttpServletRequest request,HttpSession session) throws SQLException
		  			 {  
		  				///Session-------------------------------------------------------------
		  				
		  				session=request.getSession();
		  					String user=(String) session.getAttribute("user");
		  					if(user==null)
		  					return  new ModelAndView("Session");
		  			   //--------------------------------------------------------------------
		  					String fun_name="EOM Report";
							String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
			                String Operation_status=dao10.Get_ScalarFun(query, 201);
					 		 	if(!Operation_status.equalsIgnoreCase("Y"))
					 		 	//	return "/Authorization";
					 			return  new ModelAndView("Report_Alert");
		  		//-----------------------------------------------------GetPermission-------------------------------------

		  		session=request.getSession();
		  		//request.getSession().setMaxInactiveInterval(40);

		  		// user=(String) session.getAttribute("user"); 

		  		Incentive_Master fm=new Incentive_Master();
		  		mp.put("FD_Interest_Payment",fm);

		  		session=request.getSession();
		  		 int DBCode=(int) session.getAttribute("Branch");


		  		//-------------------------------------------------------Transaction Id and Date---------------------------

		  		//int txnNo=dao14.getNoOfRecordsForDailyTransaction()+1;
		  		//-------------------------------------------date setting---------------------------------------------
		  		SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		  			Date Current_Date=(Date) session.getAttribute("Current_Date");
		  		String sys=sd.format(Current_Date);
		  				//int txnNo=dao14.Get_Transaction_Id(sys,DBCode);
		  				
		  				
		  			mp.put("Sysdate", sys);
		  			mp.put("Int_Payment_Date", sys);
		  			mp.put("From_Date", sys);

		  			
		  			//-----------------------------------------------------------------------------------------
		  			//String Account_No="0";
		  			
		  			String Account_No="";
		  			String From_Date="01/01/1960";
		  			String To_Date=sys;
		  			int Customer_Id=0;
		  			String Int_Payment_Mode="";
		  				return new ModelAndView("Incentive_Transaction");
		  			}
		  			
		  			
		  					
		  				
		  					  					
		  				
		  					@RequestMapping(value = "/saveIncentive_Transaction", params ="Print_Incentive", method=RequestMethod.POST)

		  					public void IncentiveReport_Emplyee(@ModelAttribute("FD_Interest_Payment") Incentive_Master bm,HttpServletResponse response,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request) throws SQLException, ParseException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
		  						///Session-------------------------------------------------------------
		  						
		  						session=request.getSession();
		  							String user=(String) session.getAttribute("user");
		  							/*if(user==null)
		  							return  "Session";
		  					   //--------------------------------------------------------------------
*/		  						
		  				
		  				//-----------------------------------------------------GetPermission-------------------------------------

		  				session=request.getSession();
		  							
		  						session=request.getSession();
		  						 int DBCode=(int) session.getAttribute("Branch");
		  						
		  						
		  						
		  						//-------------------------------------------------------Transaction Id and Date---------------------------

		  						//int txnNo=dao14.getNoOfRecordsForDailyTransaction()+1;
		  						//-------------------------------------------date setting---------------------------------------------
		  								SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		  								Date sysdate;
		  								//String s=sysdate.toString();
		  								//sysdate=new Date();
		  								sysdate=(Date) session.getAttribute("Current_Date");
		  								String sys=sd.format(sysdate);
		  								//int txnNo=dao14.Get_Transaction_Id(sys,DBCode);
		  								
		  									mp.put("Sysdate", sys);
		  							
		  						
		  							String Scheme_Code=bm.getScheme_Type();
		  							
		  						
		  										int i=1;
		  										//List<SimpleBranch> list=Incendao.getEmpolyee_IncentiveList("201","N","18/01/2019","30010",DBCode);
		  										String sql="Select EMPLOYEE_ID,EMPLOYEE_NAME,SCHEME_CODE,SCHEME_NAME,ACCOUNT_NO,DEPOSIT_AMOUNT,OPEN_DATE,BCODE,STATUS,id,transaction_id,case when transaction_date is not null then transaction_date else open_date end as trans_date from Employee_Target where (open_date between to_date('"+bm.getFrom_Date()+"','dd/MM/yyyy') and to_date('"+bm.getInt_Payment_Date()+"','dd/MM/yyyy')) and Employee_id like '%"+bm.getCusString1()+"%' and Scheme_Code in (select distinct scheme_code from cust_Acc_Link_view where account_type in ("+Scheme_Code+")) ";
if(Scheme_Code.equalsIgnoreCase("All"))
{
		 sql="Select EMPLOYEE_ID,EMPLOYEE_NAME,SCHEME_CODE,SCHEME_NAME,ACCOUNT_NO,DEPOSIT_AMOUNT,OPEN_DATE,BCODE,STATUS,id,transaction_id,case when transaction_date is not null then transaction_date else open_date end as trans_date from Employee_Target where (open_date between to_date('"+bm.getFrom_Date()+"','dd/MM/yyyy') and to_date('"+bm.getInt_Payment_Date()+"','dd/MM/yyyy')) and Employee_id like '%"+bm.getCusString1()+"%' and Scheme_Code in (select distinct scheme_code from cust_Acc_Link_view where account_type not in ('SL','DL','PL','RL','SC')) ";

}
else
		 sql="Select EMPLOYEE_ID,EMPLOYEE_NAME,SCHEME_CODE,SCHEME_NAME,ACCOUNT_NO,DEPOSIT_AMOUNT,OPEN_DATE,BCODE,STATUS,id,transaction_id,case when transaction_date is not null then transaction_date else open_date end as trans_date from Employee_Target where (open_date between to_date('"+bm.getFrom_Date()+"','dd/MM/yyyy') and to_date('"+bm.getInt_Payment_Date()+"','dd/MM/yyyy')) and Employee_id like '%"+bm.getCusString1()+"%' and Scheme_Code in (select distinct scheme_code from cust_Acc_Link_view where account_type in ('"+Scheme_Code+"')) ";

		  										List<SimpleBranch> list=empDao.getEmpolyee_IncentiveList(bm.getCusString1(),sql,bm.getFrom_Date(),bm.getInt_Payment_Date(),Scheme_Code,DBCode);
		  										for(SimpleBranch sb:list)
		  										{
		  											sb.setS1(i);
		  											i++;
		  										}
		  										mp.put("list", list);
		  										
		  										mp.put("FD_Interest_Payment",bm);
		  										
		  										
		  										
		  										
		  										// Connecting to the SQL server database

		  										Connection conn = null;

		  										try {

		  												//Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		  											String jrxmlFile = request.getRealPath("Incentive_Report_Employee.jrxml");
		  											try(InputStream input = new FileInputStream(new File(jrxmlFile)))
		  											{

		  												JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		  												Map<String, Object> parameters = new HashMap<String, Object>();
		  											
		  											//------------Get Branch Details----------------------------------
		  											String Branch_Name = null;
		  											String Branch_Address = null;
		  											String Branch_City = null;
		  											String Branch_Pincode = null;
		  											String Branch_Phone = null;

		  											   List<SimpleBranch> brInfo=dao10.useBranch_Code(DBCode);
		  											     for(SimpleBranch sb:brInfo)
		  											     {
		  											    	Branch_Name=sb.getS2();
		  											        Branch_Address=sb.getS3();
		  											         Branch_City=sb.getS4();
		  											         Branch_Pincode=sb.getS5();
		  											         Branch_Phone=sb.getS6();
		  											         
		  											       }
		  											
		  											   String user_name=empDao.getEmployeeName(user);
		  											System.out.println("Branch_Name"+Branch_Name);
		  											Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
		  										//	 String Msg="FD Monthly Report between "+jl.getMonthly_Date_From()+"-"+ jl.getMonthly_Date_To();
		  											 parameters.put("Branch_Name", Branch_Name);
		  											 parameters.put("Branch_Address", Branch_Address);
		  										//	 parameters.put("Msg", Msg);
		  										   parameters.put("user", user_name);

		  											

		  											String realPath = request.getRealPath("/resources/images/");
		  											parameters.put("realPath", realPath);
		  											
		  											parameters.put("title", bm.getScheme_Type()+" : Incentive Report between "+bm.getFrom_Date()+" to "+bm.getInt_Payment_Date());

		  											
		  											parameters.put("itemsJRBean", itemsJRBean);
		  											
		  										//-11-05-2024--------------------------------------------------------------------------------
		  											parameters.put("Comp_Cin",con.GetCINNO());
		  											parameters.put("Comp_Name",con.GetCompName());
		  											//----------------------------------------------------------------------------------------------
		  										
		  											JasperReport jasperReport = JasperCompileManager
		  													.compileReport(input);
		  											JasperPrint jasperPrint = JasperFillManager.fillReport(
		  													jasperReport, parameters, new JREmptyDataSource());

		  											
		  											String filename ="Incentive Report for "+bm.getScheme_Type();

		  											   
		  									        	   JRExporter exporter2 = null;
		  									           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		  									           		 
		  									           		 response.setContentType("application/pdf");
		  									           		 response.addHeader("Content-Disposition", "attachment; filename="+filename+".pdf");
		  									                    exporter2 = new JRPdfExporter();
		  									                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		  									                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".pdf");
		  									                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		  									                    exporter2.exportReport();
		  									         

		  											response.getOutputStream().flush();
		  											response.getOutputStream().close();
		  											
		  										   
		  								           //------06-03-2023----------------------------------
		  									         String File_Type="";
		  									 	    // (em.getFile_Type().equalsIgnoreCase("1"))
		  									 	    	File_Type="PDF";
		  									 	   
		  									 //---------------------------------
		  									 	    	// String user = (String) session.getAttribute("user");
		  									 			

		  									 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		  									 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Incentive Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":between "+bm.getFrom_Date()+" to "+bm.getInt_Payment_Date()+"')", 201);
		  									 	return;
		  										} catch (FileNotFoundException e) {
		  											e.printStackTrace();
		  										}	

		  										} catch (FileNotFoundException e) {
		  											e.printStackTrace();
		  										} catch (JRException e) {
		  											e.printStackTrace();
		  										} finally {
		  											if (conn != null) {
		  												try {
		  													conn.close();
		  												} catch (SQLException e) {
		  													// TODO Auto-generated catch block
		  													e.printStackTrace();
		  												}
		  											}
		  										}

		  						
		  						//return "Incentive_Transaction";
		  						
		  					}

		  					
		  					
		  					@RequestMapping(value = "/saveIncentive_Transaction", params ="Print_Incentive_Excel", method=RequestMethod.POST)

		  					public void IncentiveReport_Emplyee_Excel(@ModelAttribute("FD_Interest_Payment") Incentive_Master bm,HttpServletResponse response,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request) throws SQLException, ParseException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException {
		  						///Session-------------------------------------------------------------
		  						
		  						session=request.getSession();
		  							String user=(String) session.getAttribute("user");
		  							/*if(user==null)
		  							return  "Session";
		  					*/   //--------------------------------------------------------------------
		  						
		  				
		  				//-----------------------------------------------------GetPermission-------------------------------------

		  				session=request.getSession();
		  				
		  						session=request.getSession();
		  						 int DBCode=(int) session.getAttribute("Branch");
		  						
		  					
		  						//int txnNo=dao14.getNoOfRecordsForDailyTransaction()+1;
		  						//-------------------------------------------date setting---------------------------------------------
		  								SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		  								Date sysdate;
		  								//String s=sysdate.toString();
		  								//sysdate=new Date();
		  								sysdate=(Date) session.getAttribute("Current_Date");
		  								String sys=sd.format(sysdate);
		  								//int txnNo=dao14.Get_Transaction_Id(sys,DBCode);
		  								
		  									mp.put("Sysdate", sys);
		  							
		  							
		  							
		  							String Scheme_Code=bm.getScheme_Type();
		  							
										int i=1;
										//List<SimpleBranch> list=Incendao.getEmpolyee_IncentiveList("201","N","18/01/2019","30010",DBCode);
										String sql="Select EMPLOYEE_ID,EMPLOYEE_NAME,SCHEME_CODE,SCHEME_NAME,ACCOUNT_NO,DEPOSIT_AMOUNT,OPEN_DATE,BCODE,STATUS,id,transaction_id,case when transaction_date is not null then transaction_date else open_date end as trans_date from Employee_Target where (open_date between to_date('"+bm.getFrom_Date()+"','dd/MM/yyyy') and to_date('"+bm.getInt_Payment_Date()+"','dd/MM/yyyy')) and Employee_id like '%"+bm.getCusString1()+"%' and Scheme_Code in (select distinct scheme_code from cust_Acc_Link_view where account_type in ("+Scheme_Code+")) ";
if(Scheme_Code.equalsIgnoreCase("All"))
{
sql="Select EMPLOYEE_ID,EMPLOYEE_NAME,SCHEME_CODE,SCHEME_NAME,ACCOUNT_NO,DEPOSIT_AMOUNT,OPEN_DATE,BCODE,STATUS,id,transaction_id,case when transaction_date is not null then transaction_date else open_date end as trans_date from Employee_Target where (open_date between to_date('"+bm.getFrom_Date()+"','dd/MM/yyyy') and to_date('"+bm.getInt_Payment_Date()+"','dd/MM/yyyy')) and Employee_id like '%"+bm.getCusString1()+"%' and Scheme_Code in (select distinct scheme_code from cust_Acc_Link_view where account_type not in ('SL','DL','PL','RL','SC')) ";

}
else
sql="Select EMPLOYEE_ID,EMPLOYEE_NAME,SCHEME_CODE,SCHEME_NAME,ACCOUNT_NO,DEPOSIT_AMOUNT,OPEN_DATE,BCODE,STATUS,id,transaction_id,case when transaction_date is not null then transaction_date else open_date end as trans_date from Employee_Target where (open_date between to_date('"+bm.getFrom_Date()+"','dd/MM/yyyy') and to_date('"+bm.getInt_Payment_Date()+"','dd/MM/yyyy')) and Employee_id like '%"+bm.getCusString1()+"%' and Scheme_Code in (select distinct scheme_code from cust_Acc_Link_view where account_type in ('"+Scheme_Code+"')) ";

										List<SimpleBranch> list=empDao.getEmpolyee_IncentiveList(bm.getCusString1(),sql,bm.getFrom_Date(),bm.getInt_Payment_Date(),Scheme_Code,DBCode);
										for(SimpleBranch sb:list)
										{
											sb.setS1(i);
											i++;
										}
										mp.put("list", list);
			
		  										mp.put("FD_Interest_Payment",bm);
		  										
		  										
		  										
		  										
		  										// Connecting to the SQL server database

		  										Connection conn = null;

		  										try {
		String jrxmlFile = request.getRealPath("Incentive_Report_Employee.jrxml");
		  											try(InputStream input = new FileInputStream(new File(jrxmlFile)))
		  											{

		  											// String idDyn="101";
		  											// int idDyn=Transfer_Acc_No;
		  											// String StartDate=From_Date;
		  											// String EndDate=To_Date;
		  											// Map parameters = new HashMap();
		  											// parameters=null;
		  											// parameters.put("Accno",idDyn);
		  											// parameters.put("StartDate",StartDate);
		  											// parameters.put("EndDate",EndDate);

		  											/* Convert List to JRBeanCollectionDataSource */
		  											JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		  											//JRBeanCollectionDataSource itemsJRBean2 = new JRBeanCollectionDataSource(list2);
		  										
		  											/* Map to hold Jasper report Parameters */
		  											Map<String, Object> parameters = new HashMap<String, Object>();
		  											
		  											//------------Get Branch Details----------------------------------
		  											String Branch_Name = null;
		  											String Branch_Address = null;
		  											String Branch_City = null;
		  											String Branch_Pincode = null;
		  											String Branch_Phone = null;

		  											   List<SimpleBranch> brInfo=dao10.useBranch_Code(DBCode);
		  											     for(SimpleBranch sb:brInfo)
		  											     {
		  											    	Branch_Name=sb.getS2();
		  											        Branch_Address=sb.getS3();
		  											         Branch_City=sb.getS4();
		  											         Branch_Pincode=sb.getS5();
		  											         Branch_Phone=sb.getS6();
		  											         
		  											       }
		  											

		  											System.out.println("Branch_Name"+Branch_Name);
		  											Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
		  										//	 String Msg="FD Monthly Report between "+jl.getMonthly_Date_From()+"-"+ jl.getMonthly_Date_To();
		  											 parameters.put("Branch_Name", Branch_Name);
		  											 parameters.put("Branch_Address", Branch_Address);
		  										//	 parameters.put("Msg", Msg);
		  											 
		  											

		  											String realPath = request.getRealPath("/resources/images/");
		  											parameters.put("realPath", realPath);
		  											
		  											parameters.put("title", "Incentive Report up to "+bm.getInt_Payment_Date());

		  											
		  											parameters.put("itemsJRBean", itemsJRBean);
		  										

		  											JasperReport jasperReport = JasperCompileManager
		  													.compileReport(input);
		  											JasperPrint jasperPrint = JasperFillManager.fillReport(
		  													jasperReport, parameters, new JREmptyDataSource());

		  											String filename ="Incentive Report for Excel ";

		  											   
		  											   JRXlsExporter exporter = new JRXlsExporter();
		  									           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		  									           		 
		  									           		response.setContentType("application/xls");
		  									    			response.addHeader("Content-Disposition", "attachment; filename="
		  									    					+ filename + ".xls");

		  									    			// JRXlsExporter exporter = new JRXlsExporter();
		  									    			exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		  									    			exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME,
		  									    					filename + ".xls");
		  									    			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
		  									    					response.getOutputStream());

		  									    			exporter.exportReport();
		  									         

		  											response.getOutputStream().flush();
		  											response.getOutputStream().close();
		  											
		  											
		  											
		  										   
		  								           //------06-03-2023----------------------------------
		  									         String File_Type="";
		  									 	    	File_Type="EXCEL";
		  									 	    
		  									 //---------------------------------
		  									 	    	// user = (String) session.getAttribute("user");
		  									 			

		  									 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		  									 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Arrear Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":up to "+bm.getInt_Payment_Date()+"')", 201);
return;
		  											} catch (FileNotFoundException e) {
			  											e.printStackTrace();
			  										} 
		  										} catch (FileNotFoundException e) {
		  											e.printStackTrace();
		  										} catch (JRException e) {
		  											e.printStackTrace();
		  										} finally {
		  											if (conn != null) {
		  												try {
		  													conn.close();
		  												} catch (SQLException e) {
		  													// TODO Auto-generated catch block
		  													e.printStackTrace();
		  												}
		  											}
		  										}

		  						
		  						//return "Incentive_Transaction";
		  						
		  					}

		  				

		  					//search Emp Details
		  						@RequestMapping(value = "/SearchEmpDetails/{Account_No}")
		  						public String SearchEmpDetails(@PathVariable String Account_No,
		  								ModelMap mp, Model model, HttpServletRequest request,
		  								HttpSession session) {
		  							// /Session-------------------------------------------------------------
		  							session = request.getSession();
		  							String user = (String) session.getAttribute("user");
		  							if (user == null)
		  								return "Session";
		  							// --------------------------------------------------------------------
		  							int DBCode = (int) session.getAttribute("Branch");

		  							List<SimpleBranch> list = null;
		  							list = empDao.getEmpolyee_Details(Account_No);

		  							mp.put("list", list);

		  							return "SelectEmp_DetailsList";
		  						}
		  			
		  						
		  						
		  						@RequestMapping(value = "/saveIncentive_Transaction", params ="Mail_Read", method=RequestMethod.POST)

		  						public void Mail_Read(@ModelAttribute("FD_Interest_Payment") Incentive_Master bm,HttpServletResponse response,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request) throws SQLException, ParseException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, JRException {
		  							///Session-------------------------------------------------------------
		  							
		  							session=request.getSession();
		  								String user=(String) session.getAttribute("user");
		  								
		  						   //--------------------------------------------------------------------
		  							
		  					
		  					//-----------------------------------------------------GetPermission-------------------------------------

		  					session=request.getSession();
		  							
		  							session=request.getSession();
		  							 int DBCode=(int) session.getAttribute("Branch");
		  									SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		  									Date sysdate;
		  									//String s=sysdate.toString();
		  									//sysdate=new Date();
		  									sysdate=(Date) session.getAttribute("Current_Date");
		  									String sys=sd.format(sysdate);
		  									//int txnNo=dao14.Get_Transaction_Id(sys,DBCode);
		  									
		  									int UserId=(int) session.getAttribute("UserId");
		  										mp.put("Sysdate", sys);
		  								
		  									
		  								
		  								String Scheme_Code="";
		  								if(bm.getScheme_Type().equalsIgnoreCase("300"))
		  								{
		  									Scheme_Code="30";
		  								}
		  								else
		  								{
		  									String s[]=bm.getScheme_Type().split("-");
		  									
		  									Scheme_Code=s[0];
		  								}
		  								

		  											int i=1;
		  											//List<SimpleBranch> list=Incendao.getEmpolyee_IncentiveList("201","N","18/01/2019","30010",DBCode);
		  											List<SimpleBranch> list=empDao.getEmpolyee_IncentiveList(bm.getCusString1(),bm.getInt_Payment_Mode(),bm.getFrom_Date(),bm.getInt_Payment_Date(),Scheme_Code,DBCode);
		  											for(SimpleBranch sb:list)
		  											{
		  												sb.setS1(i);
		  												i++;
		  											}
		  											mp.put("list", list);
		  											
		  											mp.put("FD_Interest_Payment",bm);
		  											
		  											
		  											
		  											
		  											// Connecting to the SQL server database

		  											Connection conn = null;

		  											try {

		  												// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
		  												// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
		  											//	Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		  												// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

		  												// Loading Jasper Report File from Local file system

		  												// String jrxmlFile =
		  												// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
		  												// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
		  												// String jrxmlFile=request.getRealPath("Report1.jrxml");
		  												// String jrxmlFile =
		  												// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

		  												// String jrxmlFile=request.getRealPath("kk1.jrxml");
		  												String jrxmlFile = request.getRealPath("Incentive_Report_Employee.jrxml");
		  											try(	InputStream input = new FileInputStream(new File(jrxmlFile)))
		  											{

		  												// String idDyn="101";
		  												// int idDyn=Transfer_Acc_No;
		  												// String StartDate=From_Date;
		  												// String EndDate=To_Date;
		  												// Map parameters = new HashMap();
		  												// parameters=null;
		  												// parameters.put("Accno",idDyn);
		  												// parameters.put("StartDate",StartDate);
		  												// parameters.put("EndDate",EndDate);

		  												/* Convert List to JRBeanCollectionDataSource */
		  												JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		  												//JRBeanCollectionDataSource itemsJRBean2 = new JRBeanCollectionDataSource(list2);
		  											
		  												/* Map to hold Jasper report Parameters */
		  												Map<String, Object> parameters = new HashMap<String, Object>();
		  												
		  												//------------Get Branch Details----------------------------------
		  												String Branch_Name = null;
		  												String Branch_Address = null;
		  												String Branch_City = null;
		  												String Branch_Pincode = null;
		  												String Branch_Phone = null;

		  												   List<SimpleBranch> brInfo=dao10.useBranch_Code(DBCode);
		  												     for(SimpleBranch sb:brInfo)
		  												     {
		  												    	Branch_Name=sb.getS2();
		  												        Branch_Address=sb.getS3();
		  												         Branch_City=sb.getS4();
		  												         Branch_Pincode=sb.getS5();
		  												         Branch_Phone=sb.getS6();
		  												         
		  												       }
		  												

		  												System.out.println("Branch_Name"+Branch_Name);
		  												Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
		  											//	 String Msg="FD Monthly Report between "+jl.getMonthly_Date_From()+"-"+ jl.getMonthly_Date_To();
		  												 parameters.put("Branch_Name", Branch_Name);
		  												 parameters.put("Branch_Address", Branch_Address);
		  											//	 parameters.put("Msg", Msg);
		  												 
		  												

		  												String realPath = request.getRealPath("/resources/images/");
		  												parameters.put("realPath", realPath);
		  												
		  												parameters.put("title", "Incentive Report up to "+bm.getInt_Payment_Date());

		  												
		  												parameters.put("itemsJRBean", itemsJRBean);
		  												
		  												JasperReport jasperReport = JasperCompileManager
		  														.compileReport(input);
		  												JasperPrint jasperPrint = JasperFillManager.fillReport(
		  														jasperReport, parameters, new JREmptyDataSource());

		  												
		  												String filename ="Incentive Report for  ";

		  												   
		  										        	   JRExporter exporter2 = null;
		  										           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		  										           		 
		  										           		 response.setContentType("application/pdf");
		  										           		 response.addHeader("Content-Disposition", "attachment; filename="+filename+".pdf");
		  										                    exporter2 = new JRPdfExporter();
		  										                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		  										                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".pdf");
		  										                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		  										                    exporter2.exportReport();
		  										         

		  												response.getOutputStream().flush();
		  												response.getOutputStream().close();
		  											}
		  											 catch (Exception e) {
			  												e.printStackTrace();
			  											}
		  											} finally {
		  												if (conn != null) {
		  													try {
		  														conn.close();
		  													} catch (SQLException e) {
		  														// TODO Auto-generated catch block
		  														e.printStackTrace();
		  													}
		  												}
		  											}

		  							
		  						//	return "Incentive_Transaction";
		  							
		  						}
		  						
		  						 @RequestMapping(value = "/RD_Pending_Due")
		  					   	public String Rd_Pending(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		  					       	///Session-------------------------------------------------------------
		  					   		 session=request.getSession();
		  					   			String user=(String) session.getAttribute("user");
		  					   			if(user==null)
		  					   			return  "Session_Popup";
		  					   	   //--------------------------------------------------------------------
		  					   		String fun_name="EOM Report";
									String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
					                String Operation_status=dao10.Get_ScalarFun(query, 201);
							 		 	if(!Operation_status.equalsIgnoreCase("Y"))
							 		 		return "/Report_Alert";
							 		
		  					   			String[] per1=perdao.GetPermission(user, "Business");
		  								
		  								
		  			  					 String View=null;
		  			  					 String Save=null;
		  			  					 String Update=null;
		  			  					 String Delete=null;
		  			  					 String Verify2=null;
		  			  					 String Verify3=null;
		  			  					 String Verify4=null;
		  			  					 String Verify5=null;
		  			  					 String Reports1=null;
		  			  					 String Button=null;
		  			  					 String Finger_Print=null;
		  			  							
		  			  					 
		  			  					 
		  			  					 View=per1[0];
		  			  					 Save=per1[1];
		  			  					 Update=per1[2];
		  			  					 Delete=per1[3];
		  			  					 Verify2=per1[4];
		  			  					 Verify3=per1[5];
		  			  					 Verify4=per1[6];
		  			  					 Verify5=per1[7];
		  			  					 Reports1=per1[8];
		  			  					 Button=per1[9];
		  			  					 Finger_Print=per1[10];
		  			  					
		  			  					 
		  			  					 System.out.println("View-------------------------"+View);
		  			  					 System.out.println("Save-------------------------"+Save);
		  			  					 System.out.println("Update-------------------------"+Update);
		  			  					 System.out.println("Delete-------------------------"+Delete);
		  			  					 System.out.println("Verify2-------------------------"+Verify2);
		  			  					 System.out.println("Verify3-------------------------"+Verify3);
		  			  					 System.out.println("Verify4-------------------------"+Verify4);
		  			  					 System.out.println("Verify5-------------------------"+Verify5);
		  			  					 System.out.println("Reports1-------------------------"+Reports1);
		  			  					 System.out.println("Button-------------------------"+Button);
		  			  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		  			  					 
		  			  					 
		  			  					
		  			  					
		  			  					int btn_Verify=1;
		  			  					int btn_Save=1;
		  			  					int btn_Delete=1;
		  			  					
		  			  					if (View.equalsIgnoreCase("N"))
		  			  						return ("/Authorization");
		  			  					
		  			  				SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		  			  			Date sysdate=(Date) session.getAttribute("Current_Date");
		  			  				String sys=sd.format(sysdate);
		  			  				
		  			  			List <Simple> branchCode=dao10.getBranchCode();
								System.out.println("Branch_Code=getbranch");
								List<String> branchCodeList=new ArrayList<>();
								for(Simple s:branchCode)
								{
									String s3=s.getS1()+"-"+s.getS2();
									branchCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("BranchCodeList", branchCodeList);
		  			  				
		  			  				
		  			  		/*	List<SimpleBranch> list=empDao.getRD_PendingDueInst(sys,DBCode);
		  			 		 Date Effect_Date=null;
		  			 		 int Total_Inst=0;
		  			 		 int Inst_Paid=0;
		  			 		 int Inst_Amt=0;
		  			 		 int Pending_Inst=0;
		  			 			
		  			 		 for(SimpleBranch s1:list)
		  			 		 {
		  			 			  Effect_Date=s1.getS15();//Value_Date
		  			 			 Total_Inst=s1.getS11();//Instalment_Count
		  			 			 Inst_Paid=s1.getS12();//No_of_Inst_Paid
		  			 			Inst_Amt=s1.getS1();//Deposit_Amount
		  			 			Pending_Inst=s1.getS19();
		  			 			
		  			 			
		  			 				String effectdate2=sd.format(Effect_Date);
		  			 				System.out.println("Effect Date fOR CALCULATION"+effectdate2);
		  			 		
		  			 				int Months_Completed=s1.getS41();
		  			 	
		  			 					String Inst_Paid1=String.valueOf(Inst_Paid);
		  			 					  int No_of_Inst_Paid = 0;
		  			 			          if (Inst_Paid1 != "")
		  			 			               No_of_Inst_Paid =Inst_Paid;
		  			 			          System.out.println("No_of_Inst_Paid"+No_of_Inst_Paid);   
		  			 				
		  			 			          double Penal_int = 0;
		  			 			          double penal_rate = 25;
		  			 			          if (Months_Completed > No_of_Inst_Paid)
		  			 			          {
		  			 			              double inst_amt = Inst_Amt;
		  			 			              double pr = inst_amt;
		  			 			              
		  			 			              Calendar cal=Calendar.getInstance();
		  			 							cal.setTime(Effect_Date);
		  			 							cal.add(Calendar.MONTH,No_of_Inst_Paid);
		  			 						String effect1=sd.format(cal.getTime());
		  			 							System.out.println("After Adding Ins paid" +effect1);

		  			 			              for (int i = 0; i < (Months_Completed - No_of_Inst_Paid); i++)
		  			 			              {
		  			 			                  Penal_int += (pr * penal_rate / 1200);
		  			 			                  pr += inst_amt;
		  			 			                  System.out.println("Penal Interest inside Loop"+Penal_int);
		  			 			              }
		  			 			          }
		  			 			          
		  			 			          
		  			 			          int Penal_int1=Inst_Amt*Pending_Inst;
		  			 			          System.out.println("Penal Interest"+Penal_int);
		  			 			          
		  			 			          
		  			 			          
		  			 			          
		  			 			          s1.setS21(Penal_int1);
		  			 				
		  			 		 }
		  			 		 mp.put("list", list);
		  			 		 
		  			 		 if(list.size()!=0)
		  			 			{
		  			 				mp.put("NoOfRecords", list.size());
		  			 			}
		  			 			else
		  			 			{
		  			 				mp.put("NoOfRecords", 0);
		  			 			}*/
		  			 		
		  			 	
		  			 	mp.put("Date", sys);


		  					   			
		  					   			Employee em = new Employee();
		  			   				    mp.put("Employee2", em);
		  					   		return  "RD_Pending";
		  					   	}
		  						 
		  						@RequestMapping(value = "/getRDPending_Due", params ="PendingInst", method=RequestMethod.POST)
		  						public String Search_PendingInst(@ModelAttribute("Employee2") Employee bm,ModelMap mp,HttpServletRequest request,HttpSession session) 
		  						{ 
		  							session=request.getSession();
		  							String user=(String) session.getAttribute("user");
		  							if(user==null)
		  							{
		  								return "session";
		  							}
		  							int DBCode=(int) session.getAttribute("Branch");
		  							SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
		  							Date sysdate=(Date) session.getAttribute("Current_Date");
		  								String sys=sd.format(sysdate);
		  								
		  								List <Simple> branchCode=dao10.getBranchCode();
										System.out.println("Branch_Code=getbranch");
										List<String> branchCodeList=new ArrayList<>();
										for(Simple s:branchCode)
										{
											String s3=s.getS1()+"-"+s.getS2();
											branchCodeList.add(s3);
											System.out.println(s3);  
											 
										}
										mp.put("BranchCodeList", branchCodeList);
				  			  				
				  			  			

		  								String Branch_Type=bm.getBranch_Type().substring(0, 3);
		  							
		  								int Bcode = Integer.parseInt(Branch_Type);
		  								System.out.println("Bcode---------------------"+Bcode);
		  								System.out.println("Branch---------------------"+bm.getBranch_Type());
		  								
		  								
		  								List<SimpleBranch> list= null;
		  								
		  								if(bm.getBranch_Type().equalsIgnoreCase("200")){
		  									System.out.println("11111111111---------------------");
		  									list=empDao.getRD_PendingDueInst_All(bm.getDob(),201);
		  								}
		  								else{
		  									System.out.println("22222222222---------------------");
		  									list=empDao.getRD_PendingDueInst(bm.getDob(),Bcode);
		  								}
		  							
		  							  
		  							 Date Effect_Date=null;
		  							 int Total_Inst=0;
		  							 int Inst_Paid=0;
		  							 int Inst_Amt=0;
		  							 int Pending_Inst=0;
		  								
		  							 for(SimpleBranch s1:list)
		  							 {
		  								  Effect_Date=s1.getS15();//Value_Date
		  								 Total_Inst=s1.getS11();//Instalment_Count
		  								 Inst_Paid=s1.getS12();//No_of_Inst_Paid
		  								Inst_Amt=s1.getS1();//Deposit_Amount
		  								Pending_Inst=s1.getS19();
		  								
		  								
		  									String effectdate2=sd.format(Effect_Date);
		  									int Months_Completed=s1.getS41();
		  									
		  										String Inst_Paid1=String.valueOf(Inst_Paid);
		  										  int No_of_Inst_Paid = 0;
		  								          if (Inst_Paid1 != "")
		  								               No_of_Inst_Paid =Inst_Paid;
		  								         // System.out.println("No_of_Inst_Paid"+No_of_Inst_Paid);   
		  									
		  								          double Penal_int = 0;
		  								          double penal_rate = 25;
		  								          if (Months_Completed > No_of_Inst_Paid)
		  								          {
		  								              double inst_amt = Inst_Amt;
		  								              double pr = inst_amt;
		  								              
		  								              Calendar cal=Calendar.getInstance();
		  												cal.setTime(Effect_Date);
		  												cal.add(Calendar.MONTH,No_of_Inst_Paid);
		  											String effect1=sd.format(cal.getTime());
		  											//	System.out.println("After Adding Ins paid" +effect1);

		  								              for (int i = 0; i < (Months_Completed - No_of_Inst_Paid); i++)
		  								              {
		  								                  Penal_int += (pr * penal_rate / 1200);
		  								                  pr += inst_amt;
		  								              //    System.out.println("Penal Interest inside Loop"+Penal_int);
		  								              }
		  								          }
		  								          
		  								       //   int Penal_int1=(int) Math.round(Penal_int);
		  								          
		  								          int Penal_int1=Inst_Amt*Pending_Inst;
		  								        //  System.out.println("Penal Interest"+Penal_int);
		  								          
		  								          mp.put("Date", sys);
		  								          
		  								          
		  								          s1.setS21(Penal_int1);
		  									
		  							 }
		  							 mp.put("list", list);
		  							 
		  							 if(list.size()!=0)
				  			 			{
				  			 				mp.put("NoOfRecords", list.size());
				  			 			}
				  			 			else
				  			 			{
				  			 				mp.put("NoOfRecords", 0);
				  			 			}
		  							
		  							 return "RD_Pending";
		  						}


		  						 @RequestMapping(value = "/getRDPending_Due", params ="Btn_RDPending", method=RequestMethod.POST)
		  					   public void RD_Pending1(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
		  					   { 
		  					session=request.getSession();
		  					int DBCode=(int) session.getAttribute("Branch");
		  					String user = (String) session.getAttribute("user");

		  					System.out.println("con----------------------------");
		  					
		  					 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

		  					 	Date Current_Date=(Date) session.getAttribute("Current_Date");
		  						String sys=sd.format(Current_Date);
		  					

		  						
		  						String Branch_Name1="";
		  	    				String Scheme_name="";
		  	    				String Account_No="";
		  	    				String Customer_Name="";
		  	    				String Open_date="";
		  	    				String Loan_Amount="";
		  	    				String CB="";
		  	    				String pending_days="";
		  	    				String Interest_Upto="";
		  	    				String Arrear_Interest="";
		  	    				String To_Date=em.getDob();
		  	    				
		  	    				
		  	    			System.out.println("Inside controller---------------------------------------");
		  	    			          
		  	    			List <Simple> branchCode=dao10.getBranchCode();
		  	    			System.out.println("Branch_Code=getbranch");
		  	    			List<String> branchCodeList=new ArrayList<>();
		  	    			for(Simple s:branchCode)
		  	    			{
		  	    				String s3=s.getS1()+"-"+s.getS2();
		  	    				branchCodeList.add(s3);
		  	    				System.out.println(s3);  
		  	    				System.out.println("branchCodeList--------------------"+s3);
		  	    			}
		  	    			
		  	    			//---------------------------------------------
		  	         		
		  	         		
		  	         		mp.put("BranchCodeList", branchCodeList);
		  				 


		  					
		  					Connection conn=null;
		  			        try {
		  			       
		  			           
		  			      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		  			            
		  			            String jrxmlFile=null;
		  			            if(em.getFile_Type().equalsIgnoreCase("2"))
		  			        	 jrxmlFile=request.getRealPath("RD_PendingInstalment_xl.jrxml");
		  			            else
		  			            	 jrxmlFile=request.getRealPath("RD_PendingInstalment.jrxml");
		  			             
		  			                // jrxmlFile=request.getRealPath("demo.jrxml");
		  			            InputStream input = new FileInputStream(new File(jrxmlFile));
		  			            
		  			            



		  			       
		  			          	       	    	           
		  			           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
		  			            String Filename2="RD Pending Due Report as on "+To_Date;
		  			            
		  			   
		  			   			 Map parameters = new HashMap();
		  			   		
		  				         System.out.println("Filename2--------------------------------"+Filename2);   
		  			   	
		  			   			String  realPath = request.getRealPath("/resources/images/");
		  			   			
		  			   		  
		  			   	String Branch_Type=em.getBranch_Type().substring(0, 3);
							
							int Bcode = Integer.parseInt(Branch_Type);
							System.out.println("Bcode---------------------"+Bcode);
							
							List<SimpleBranch> list=null;
							
							if(em.getBranch_Type().equalsIgnoreCase("200")){
								list=empDao.getRD_PendingDueInst_All(em.getDob(),201);
							}
							else{
								list=empDao.getRD_PendingDueInst(em.getDob(),Bcode);
							}
							 Date Effect_Date=null;
							 int Total_Inst=0;
							 int Inst_Paid=0;
							 int Inst_Amt=0;
							 int Pending_Inst=0;
								
							 for(SimpleBranch s1:list)
							 {
								  Effect_Date=s1.getS15();//Value_Date
								 Total_Inst=s1.getS11();//Instalment_Count
								 Inst_Paid=s1.getS12();//No_of_Inst_Paid
								Inst_Amt=s1.getS1();//Deposit_Amount
								Pending_Inst=s1.getS19();
								
									//gl.setS15(rs.getDate(4));	//Effect_DATE
									//gl.setS1(rs.getInt(6));	//Deposit Amount
								   // gl.setS11(rs.getInt(5));   //Instalment_Count
								   // gl.setS12(rs.getInt(7));   //Installment_Paid
								   
								
								
								
								
								
									String effectdate2=sd.format(Effect_Date);
									System.out.println("Effect Date fOR CALCULATION"+effectdate2);
							
									
									
									
										//int Months_Completed=dao16.getMonths_Between_TwoDates(effectdate2, sys);
									int Months_Completed=s1.getS41();
										
										//System.out.println("Months_Completed="+Months_Completed);
										//System.out.println("Inst_Paid"+Inst_Paid1);
									
										String Inst_Paid1=String.valueOf(Inst_Paid);
										  int No_of_Inst_Paid = 0;
								          if (Inst_Paid1 != "")
								               No_of_Inst_Paid =Inst_Paid;
								          System.out.println("No_of_Inst_Paid"+No_of_Inst_Paid);   
									
								          double Penal_int = 0;
								          double penal_rate = 25;
								          if (Months_Completed > No_of_Inst_Paid)
								          {
								              double inst_amt = Inst_Amt;
								              double pr = inst_amt;
								              
								              Calendar cal=Calendar.getInstance();
												cal.setTime(Effect_Date);
												cal.add(Calendar.MONTH,No_of_Inst_Paid);
											String effect1=sd.format(cal.getTime());
												System.out.println("After Adding Ins paid" +effect1);

								              for (int i = 0; i < (Months_Completed - No_of_Inst_Paid); i++)
								              {
								                  Penal_int += (pr * penal_rate / 1200);
								                  pr += inst_amt;
								                  System.out.println("Penal Interest inside Loop"+Penal_int);
								              }
								          }
								          
								       //   int Penal_int1=(int) Math.round(Penal_int);
								          
								          int Penal_int1=Inst_Amt*Pending_Inst;
								          System.out.println("Penal Interest"+Penal_int);
								          
								          mp.put("Date", sys);
								          
								          
								          s1.setS21(Penal_int1);
									
							 }
		  			   		mp.put("list",list);
		  			   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		  			   		
		  			   	        parameters.put("itemsJRBean", itemsJRBean); 
		  			   	    
		  			   	  parameters.put("Heading", Filename2); 
		  			   	  
		  			   	  
		  			   	 String Branch_Name = null;
		  	             String Branch_Address = null;
		  	             String Branch_City = null;
		  	             String Branch_Pincode = null;
		  	             String Branch_Phone = null;
		  	           List<SimpleBranch> brInfo=null;
		  	           
		  	           if(em.getBranch_Type().equalsIgnoreCase("200")){
		  	        	 brInfo=AuditDao.useBranch_Code2(201);
		  	           }else{
		  	        	 brInfo=AuditDao.useBranch_Code2(Bcode);
		  	           }
		  	            // List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(Bcode);
		  	             for(SimpleBranch sb:brInfo)
		  	             {
		  	            	Branch_Name=sb.getS2();
		  		            Branch_Address=sb.getS3();
		  		             Branch_City=sb.getS4();
		  		             Branch_Pincode=sb.getS5();
		  		             Branch_Phone=sb.getS6();
		  		             
		  		           }
		  	           String user_name=empDao.getEmployeeName(user);
		  	             parameters.put("Branch_Name", Branch_Name);
		  	             parameters.put("Branch_Address", Branch_Address);
		  	             parameters.put("Branch_City", Branch_City);
		  	             parameters.put("Branch_Pincode", Branch_Pincode);

		  	           parameters.put("user", user_name);
		  			           JasperReport jasperReport = JasperCompileManager.compileReport(input);
		  			           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

		  			           
		  			          
		  			           String  reportPath = request.getRealPath("/");
		  				     	  				          
		  			           if(em.getFile_Type().equalsIgnoreCase("1"))
		  			           {
		  		        	   JRExporter exporter2 = null;
		  		           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		  		           		 
		  		           		 response.setContentType("application/pdf");
		  		           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		  		                    exporter2 = new JRPdfExporter();
		  		                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		  		                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		  		                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		  		                    exporter2.exportReport();
		  		          
		  			           }
		  			           else if(em.getFile_Type().equalsIgnoreCase("2"))
		  			           {
		  			        	   
		  				          
		  				           response.setContentType("application/xls");
		  				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
		  				           JRXlsExporter exporter = new JRXlsExporter();
		  				           // JRXlsExporter exporter = new JRXlsExporter();
		  				            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		  				            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
		  				            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

		  				            exporter.exportReport();
		  				    
		  			           }
		  			           else if(em.getFile_Type().equalsIgnoreCase("3"))
		  			           {
		  			        	   response.setContentType("application/docx");
		  				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
		  				           JRDocxExporter exporter3 = new JRDocxExporter();
		  				           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		  				           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
		  				           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		  				           exporter3.exportReport();
		  			           }
		  				    
		  			          		  				       

		  		         
		  		           response.getOutputStream().flush();
		  		           response.getOutputStream().close();
		  		           
		  		         
		  		           //------06-03-2023----------------------------------
		  			         String File_Type="";
		  			 	     if(em.getFile_Type().equalsIgnoreCase("1"))
		  			 	    	File_Type="PDF";
		  			 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
		  			 	    	File_Type="EXCEL";
		  			 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
		  			 		File_Type="DOCUMENT";
		  			        
		  			 //---------------------------------
		  			 	    	// String user = (String) session.getAttribute("user");
		  			 			

		  			 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		  			 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('RD Pending Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+": as on "+To_Date+"')", 201);

		  		    
		  		       } catch (FileNotFoundException e) {
		  		           e.printStackTrace();
		  		       } catch (JRException e) {
		  		           e.printStackTrace();
		  		       } catch (ClassNotFoundException e) {
		  		           e.printStackTrace();
		  		       } catch (InstantiationException e) {
		  				// TODO Auto-generated catch block
		  				e.printStackTrace();
		  			} catch (IllegalAccessException e) {
		  				// TODO Auto-generated catch block
		  				e.printStackTrace();
		  			}
		  		       finally {
		  		           if(conn!=null){
		  		               try {
		  						conn.close();
		  					} catch (SQLException e) {
		  						// TODO Auto-generated catch block
		  						e.printStackTrace();
		  					}
		  		           }
		  		       }
		  		       }

		  			    	 


		  						 
		  						 
		  						 
		  						 //19-11-2022
		  						 @RequestMapping(value = "/RD_Consolidated")
		 		    		   	public String RD_Consolidated_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		 		    		       	///Session-------------------------------------------------------------
		 		    		   		 session=request.getSession();
		 		    		   			String user=(String) session.getAttribute("user");
		 		    		   			if(user==null)
		 		    		   			return  "Session_Popup";
		 		    		   	   //--------------------------------------------------------------------
		 		    		   		String fun_name="EOM Report";
									String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
					                String Operation_status=dao10.Get_ScalarFun(query, 201);
							 		 	if(!Operation_status.equalsIgnoreCase("Y"))
							 		 		return "/Report_Alert";
							 		 	
							 		 	
		 		    		   			String[] per1=perdao.GetPermission(user, "Business");
		 		    					
		 		    					
		 		      					 String View=null;
		 		      					 String Save=null;
		 		      					 String Update=null;
		 		      					 String Delete=null;
		 		      					 String Verify2=null;
		 		      					 String Verify3=null;
		 		      					 String Verify4=null;
		 		      					 String Verify5=null;
		 		      					 String Reports1=null;
		 		      					 String Button=null;
		 		      					 String Finger_Print=null;
		 		      							
		 		      					 
		 		      					 
		 		      					 View=per1[0];
		 		      					 Save=per1[1];
		 		      					 Update=per1[2];
		 		      					 Delete=per1[3];
		 		      					 Verify2=per1[4];
		 		      					 Verify3=per1[5];
		 		      					 Verify4=per1[6];
		 		      					 Verify5=per1[7];
		 		      					 Reports1=per1[8];
		 		      					 Button=per1[9];
		 		      					 Finger_Print=per1[10];
		 		      					
		 		      					 
		 		      					 System.out.println("View-------------------------"+View);
		 		      					 System.out.println("Save-------------------------"+Save);
		 		      					 System.out.println("Update-------------------------"+Update);
		 		      					 System.out.println("Delete-------------------------"+Delete);
		 		      					 System.out.println("Verify2-------------------------"+Verify2);
		 		      					 System.out.println("Verify3-------------------------"+Verify3);
		 		      					 System.out.println("Verify4-------------------------"+Verify4);
		 		      					 System.out.println("Verify5-------------------------"+Verify5);
		 		      					 System.out.println("Reports1-------------------------"+Reports1);
		 		      					 System.out.println("Button-------------------------"+Button);
		 		      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 		      					 
		 		      					 
		 		      					
		 		      					
		 		      					int btn_Verify=1;
		 		      					int btn_Save=1;
		 		      					int btn_Delete=1;
		 		      					int btn_Report=1;
		 		      					
		 		      					if (View.equalsIgnoreCase("N"))
		 		      						return ("/Authorization");
		 		      					System.out.println("0000000000000000000000");
		 							    if (Verify2.equalsIgnoreCase("N"))	
		 							       btn_Verify = 2;
		 							    System.out.println("111111111111");
		 							    if (Save.equalsIgnoreCase("N"))
		 							        btn_Save= 2;
		 							    System.out.println("222222222222222222222222");
		 							    if (Update.equalsIgnoreCase("N"))
		 							        btn_Save=2;
		 							    if (Reports1.equalsIgnoreCase("N"))
		 							    	btn_Report=2;
		 		    		   			
		 							    String SaveFlag="";
		 							    if(btn_Report==2)
		 							    {
		 								 SaveFlag="Display:none;";
		 								 System.out.println("1111111111111111111111");
		 							    }
		 							 
		 							 mp.put("ReportFlag", SaveFlag);
		 		       		   		 Employee em = new Employee();
		 		       				 mp.put("Employee2", em);
		 		       				 
		 		       				
				  			  			List <Simple> branchCode=dao10.getBranchCode();
										System.out.println("Branch_Code=getbranch");
										List<String> branchCodeList=new ArrayList<>();
										for(Simple s:branchCode)
										{
											String s3=s.getS1()+"-"+s.getS2();
											branchCodeList.add(s3);
											System.out.println(s3);  
											 
										}
										mp.put("BranchCodeList", branchCodeList);
				  			  				
		 		    		   			
		 		    		   		return  "RD_Consolidated";
		 		    		   	}
		 			    	 
		 			    	 
		 			    	 @RequestMapping(value = "/getRD_Consolidated", params ="Btn_RD_Consolidated", method=RequestMethod.POST)
		 					   public void RD_ConsolidatedReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
		 					   { 

									// JL_Master jl=new JL_Master();

								   System.out.println("inside controller-----------------------------------");
								   
									session = request.getSession();
									int DBCode = (int) session.getAttribute("Branch");
									String user=(String) session.getAttribute("user");
									List <Simple> branchCode=dao10.getBranchCode();
									System.out.println("Branch_Code=getbranch");
									List<String> branchCodeList=new ArrayList<>();
									for(Simple s:branchCode)
									{
										String s3=s.getS1()+"-"+s.getS2();
										branchCodeList.add(s3);
										System.out.println(s3);  
										 
									}
									mp.put("BranchCodeList", branchCodeList);
			  			  				
			  			  			

	  								String Branch_Type=em.getBranch_Type().substring(0, 3);
	  							
	  								int Bcode = Integer.parseInt(Branch_Type);
	  							

									String Scheme_Code = "30";
									/*if(Scheme.equalsIgnoreCase("300"))
									{
									String Scheme1[] = Scheme.split("-");
									Scheme_Code = Scheme1[0];
									}
									else
									{
										Scheme_Code="300";
									}*/
									String From_Date=em.getDob();
				    				String To_Date=em.getJoining_Date();
				    				
				    				System.out.println("inside control 2----------");
				    				
			//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
				    				//List<SimpleBranch> list1=null;
				    				List<SimpleBranch> list=null;
				    				//List<SimpleBranch> list3=null;
				    				//List<SimpleBranch> list2=null;
				    				String Status=null;
				    					
				    				if(em.getBranch_Type().equalsIgnoreCase("200")){
	  									Bcode=2;
	  								}
	  								
	  							
				    				
				    				if(em.getFD_Type().equalsIgnoreCase("A")){
				    					System.out.println("list1_1------------------");
				    					
				    					list = JLDao.getRD_Monthly_Report_Active(
												From_Date, To_Date,
												"A", Bcode);
				    					Status ="Active";
				    					 
				    					 System.out.println("list1------------------");
				    					
				    					}
				    				else if(em.getFD_Type().equalsIgnoreCase("C")){
				    					
				    					 System.out.println("list_l------------------");
				    					
				    					list = JLDao.getRD_Monthly_Report_Closed(
												From_Date, To_Date,
												"C", Bcode);
				    					
				    					Status="Closed";
				    					 System.out.println("list------------------");
			    					}
				    				else
				    				{
				    					list = JLDao.getRD_Monthly_Report_Active_Closed(
												From_Date, To_Date,
												"", Bcode);
				    					Status="All ";
				    				}
				    				
				    				
							
									

								
									// Connecting to the SQL server database

									Connection conn = null;

									try {

										// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
										// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
										Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
										// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

										// Loading Jasper Report File from Local file system

										// String jrxmlFile =
										// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
										// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
										// String jrxmlFile=request.getRealPath("Report1.jrxml");
										// String jrxmlFile =
										// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

										// String jrxmlFile=request.getRealPath("kk1.jrxml");
										String jrxmlFile = null;
										if(em.getFile_Type().equalsIgnoreCase("2")){
											 jrxmlFile = request.getRealPath("RD_Monthly_Report_xl.jrxml");
										}
										else{
											 jrxmlFile = request.getRealPath("RD_Monthly_Report.jrxml");
										}
											
										
										InputStream input = new FileInputStream(new File(jrxmlFile));

										

										/* Convert List to JRBeanCollectionDataSource */
										JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
												list);
										//JRBeanCollectionDataSource itemsJRBean1 = new JRBeanCollectionDataSource(
										//		list1);
										//JRBeanCollectionDataSource itemsJRBean2 = new JRBeanCollectionDataSource(
										//		list2);
										
										//JRBeanCollectionDataSource itemsJRBean3 = new JRBeanCollectionDataSource(
											//	list3);
										
										
										/* Map to hold Jasper report Parameters */
										Map<String, Object> parameters = new HashMap<String, Object>();
										
										//------------Get Branch Details----------------------------------
										String Branch_Name = null;
										String Branch_Address = null;
										String Branch_City = null;
										String Branch_Pincode = null;
										String Branch_Phone = null;


										List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
										for(SimpleBranch sb:brInfo)
										{
											Branch_Name=sb.getS2();
										   Branch_Address=sb.getS3();
										    Branch_City=sb.getS4();
										    Branch_Pincode=sb.getS5();
										    Branch_Phone=sb.getS6();
										    
										  }

										System.out.println("Branch_Name"+Branch_Name);
										Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
										 String Msg=""+Status+" : RD Monthly Report  between "+From_Date+"-"+ To_Date;
										 
										 String user_name=empDao.getEmployeeName(user);
										 parameters.put("Branch_Name", Branch_Name);
										 parameters.put("Branch_Address", Branch_Address);
										 parameters.put("Msg", Msg);
										 parameters.put("Status", Status);
										   parameters.put("user", user_name);
										 System.out.println("Status----"+Status);
										 if(!em.getFile_Type().equalsIgnoreCase("2")){ 
										//-11-05-2024--------------------------------------------------------------------------------
										 parameters.put("Comp_Cin",con.GetCINNO());
										 parameters.put("Comp_Name",con.GetCompName());
										 //----------------------------------------------------------------------------------------------
										 }
										String realPath = request.getRealPath("/resources/images/");
										parameters.put("realPath", realPath);

										parameters.put("itemsJLBean", itemsJRBean);
									//	parameters.put("itemsJLBean1", itemsJRBean1);
										//parameters.put("itemsJLBean2", itemsJRBean2);
									//	parameters.put("itemsJLBean3", itemsJRBean3);

										/* Using compiled version(.jasper) of Jasper report to generate PDF */
										// JasperPrint jasperPrint =
										// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
										// parameters, new JREmptyDataSource());

										/* outputStream to create PDF */
										// OutputStream outputStream = new FileOutputStream(new
										// File(outputFile));
										/* Write content to PDF file */
										// JasperExportManager.exportReportToPdfStream(jasperPrint,
										// outputStream);
										// Generating the report

										JasperReport jasperReport = JasperCompileManager
												.compileReport(input);
										JasperPrint jasperPrint = JasperFillManager.fillReport(
												jasperReport, parameters, new JREmptyDataSource());

										// Exporting the report as a PDF

										// JRExporter exporter = null;
										// OutputStream ouputStream = response.getOutputStream();

										// response.setContentType("application/pdf");
										// exporter = new JRPdfExporter();
										// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
										// jasperPrint);
										// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
										// ouputStream);

										String filename = DBCode+"-RD_Monthly_Report "+Status+" :"+From_Date+"-"+ To_Date;

										   if(em.getFile_Type().equalsIgnoreCase("1"))
								           {
								        	   JRExporter exporter2 = null;
								           		 ServletOutputStream ouputStream2 = response.getOutputStream();
								           		 
								           		 response.setContentType("application/pdf");
								           		 response.addHeader("Content-Disposition", "attachment; filename="+filename+".pdf");
								                    exporter2 = new JRPdfExporter();
								                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".pdf");
								                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
								                    exporter2.exportReport();
								           }
								           else if(em.getFile_Type().equalsIgnoreCase("2"))
								           {
								        	   
									          
									           response.setContentType("application/xls");
									           response.addHeader("Content-Disposition", "attachment; filename="+filename+".xls");
									           JRXlsExporter exporter = new JRXlsExporter();
									           // JRXlsExporter exporter = new JRXlsExporter();
									            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
									            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".xls");
									            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

									            exporter.exportReport();
									    
								           }
								           else if(em.getFile_Type().equalsIgnoreCase("3"))
								           {
								        	   response.setContentType("application/docx");
									           response.addHeader("Content-Disposition", "attachment; filename="+filename+".docx");
									           JRDocxExporter exporter3 = new JRDocxExporter();
									           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
									           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".docx");
									           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
									           exporter3.exportReport();
								           }

										response.getOutputStream().flush();
										response.getOutputStream().close();
										
										
										   
								           //------06-03-2023----------------------------------
									         String File_Type="";
									 	     if(em.getFile_Type().equalsIgnoreCase("1"))
									 	    	File_Type="PDF";
									 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
									 	    	File_Type="EXCEL";
									 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
									 		File_Type="DOCUMENT";
									        
									 //---------------------------------
									 	    	// String user = (String) session.getAttribute("user");
									 			

									 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
									 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('RD Consolidated Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+": "+Status+" :"+From_Date+"-"+ To_Date+"')", 201);


									} catch (FileNotFoundException e) {
										e.printStackTrace();
									} catch (JRException e) {
										e.printStackTrace();
									} catch (ClassNotFoundException e) {
										e.printStackTrace();
									} catch (InstantiationException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									} catch (IllegalAccessException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									} finally {
										if (conn != null) {
											try {
												conn.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
										}
									}

								} 

				

		 			   	 //23-11-2022
	  						 @RequestMapping(value = "/JL_Consolidated")
	 		    		   	public String JL_Consolidated_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
	 		    		       	///Session-------------------------------------------------------------
	 		    		   		 session=request.getSession();
	 		    		   			String user=(String) session.getAttribute("user");
	 		    		   			if(user==null)
	 		    		   			return  "Session_Popup";
	 		    		   	   //--------------------------------------------------------------------
	 		    		   		String fun_name="EOM Report";
								String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
				                String Operation_status=dao10.Get_ScalarFun(query, 201);
						 		 	if(!Operation_status.equalsIgnoreCase("Y"))
						 		 		return "/Report_Alert";
						 		
						 		 	
	 		    		   			String[] per1=perdao.GetPermission(user, "Business");
	 		    					
	 		    					
	 		      					 String View=null;
	 		      					 String Save=null;
	 		      					 String Update=null;
	 		      					 String Delete=null;
	 		      					 String Verify2=null;
	 		      					 String Verify3=null;
	 		      					 String Verify4=null;
	 		      					 String Verify5=null;
	 		      					 String Reports1=null;
	 		      					 String Button=null;
	 		      					 String Finger_Print=null;
	 		      							
	 		      					 
	 		      					 
	 		      					 View=per1[0];
	 		      					 Save=per1[1];
	 		      					 Update=per1[2];
	 		      					 Delete=per1[3];
	 		      					 Verify2=per1[4];
	 		      					 Verify3=per1[5];
	 		      					 Verify4=per1[6];
	 		      					 Verify5=per1[7];
	 		      					 Reports1=per1[8];
	 		      					 Button=per1[9];
	 		      					 Finger_Print=per1[10];
	 		      					
	 		      					 
	 		      					 System.out.println("View-------------------------"+View);
	 		      					 System.out.println("Save-------------------------"+Save);
	 		      					 System.out.println("Update-------------------------"+Update);
	 		      					 System.out.println("Delete-------------------------"+Delete);
	 		      					 System.out.println("Verify2-------------------------"+Verify2);
	 		      					 System.out.println("Verify3-------------------------"+Verify3);
	 		      					 System.out.println("Verify4-------------------------"+Verify4);
	 		      					 System.out.println("Verify5-------------------------"+Verify5);
	 		      					 System.out.println("Reports1-------------------------"+Reports1);
	 		      					 System.out.println("Button-------------------------"+Button);
	 		      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
	 		      					 
	 		      					 
	 		      					
	 		      					
	 		      					int btn_Verify=1;
	 		      					int btn_Save=1;
	 		      					int btn_Delete=1;
	 		      					int btn_Report=1;
	 		      					
	 		      					if (View.equalsIgnoreCase("N"))
	 		      						return ("/Authorization");
	 		      					System.out.println("0000000000000000000000");
	 							    if (Verify2.equalsIgnoreCase("N"))	
	 							       btn_Verify = 2;
	 							    System.out.println("111111111111");
	 							    if (Save.equalsIgnoreCase("N"))
	 							        btn_Save= 2;
	 							    System.out.println("222222222222222222222222");
	 							    if (Update.equalsIgnoreCase("N"))
	 							        btn_Save=2;
	 							    if (Reports1.equalsIgnoreCase("N"))
	 							    	btn_Report=2;
	 		    		   			
	 							    String SaveFlag="";
	 							    if(btn_Report==2)
	 							    {
	 								 SaveFlag="Display:none;";
	 								 System.out.println("1111111111111111111111");
	 							    }
	 							 
	 							 mp.put("ReportFlag", SaveFlag);
	 		       		   		 Employee em = new Employee();
	 		       				 mp.put("Employee2", em);
	 		       				 
	 		       				
			  			  			List <Simple> branchCode=dao10.getBranchCode();
									System.out.println("Branch_Code=getbranch");
									List<String> branchCodeList=new ArrayList<>();
									for(Simple s:branchCode)
									{
										String s3=s.getS1()+"-"+s.getS2();
										branchCodeList.add(s3);
										System.out.println(s3);  
										 
									}
									mp.put("BranchCodeList", branchCodeList);
			  			  				
	 		    		   			
	 		    		   		return  "JL_Consolidated";
	 		    		   	}
	 			    	 
	 			    	 
	 			    	 @RequestMapping(value = "/getJL_Consolidated", params ="Btn_JL_Consolidated", method=RequestMethod.POST)
	 					   public void JL_ConsolidatedReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
	 					   { 

								// JL_Master jl=new JL_Master();

							   System.out.println("inside controller-----------------------------------");
							   
								session = request.getSession();
								int DBCode = (int) session.getAttribute("Branch");
								String user=(String) session.getAttribute("user");

								String Scheme_Code = "600";
								List <Simple> branchCode=dao10.getBranchCode();
								System.out.println("Branch_Code=getbranch");
								List<String> branchCodeList=new ArrayList<>();
								for(Simple s:branchCode)
								{
									String s3=s.getS1()+"-"+s.getS2();
									branchCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("BranchCodeList", branchCodeList);
		  			  				
		  			  			

  								String Branch_Type=em.getBranch_Type().substring(0, 3);
  							
  								int Bcode = Integer.parseInt(Branch_Type);
  								if(em.getBranch_Type().equalsIgnoreCase("200"))
  								{
  									Bcode=2;
  								}

								String From_Date=em.getDob();
			    				String To_Date=em.getJoining_Date();
			    				String Status=null;
			    				System.out.println("inside control 2----------");
			    				
			    				
			    				String Sql_Final = null;
			    				String Sql_Final2 = null;
			    				String Sql_Condition1 = null;
			    				String Sql_Condition = null;
			    				String Sql_Condition3 = null;
			    				String Sql_Condition4 = null;

			    				//String Sql = "Select branch_code,(Select branch_name from branch_master where branch_code=JL_Master_View.branch_code) as bname,Account_No,(select scheme_name from scheme_master where scheme_code=JL_Master_View.scheme_code)as sname,Customer_Id,Customer_Name,Open_Date,Interest_Rate,Loan_Amount,interest_paid_upto,Due_Date,-Closing_Balance as Closing_Balance,Account_Status, Closed_date from JL_Master_View where ";
		    					//16-09-20214
			    				
			    				String Sql = "Select branch_code,(Select branch_name from branch_master where branch_code=JL_Master_View.branch_code) as bname,Account_No,(select scheme_name from scheme_master where scheme_code=JL_Master_View.scheme_code)as sname,Customer_Id,Customer_Name,Open_Date,Interest_Rate,Loan_Amount,interest_paid_upto,Due_Date,-Closing_Balance as Closing_Balance,Account_Status, Closed_date,nvl(JL_PACKET_NO,'0') as JL_PACKET_NO from JL_Master_View where ";

			    				
			    				Sql_Final = Sql;
		    					if (em.getFD_Type().equalsIgnoreCase("A")) {
			    					Sql_Condition4 = " Open_Date between to_date('"	+ From_Date + "','dd/MM/yyyy') and to_date('"+ To_Date+ "','dd/MM/yyyy') and Account_Status='A'";
			    					Sql_Final = Sql_Final + Sql_Condition4;
			    					Status="Active ";
			    				} else if (em.getFD_Type().equalsIgnoreCase("C")) {
			    					Sql_Condition4 = "  Closed_Date between to_date('"	+ From_Date + "','dd/MM/yyyy') and to_date('"+ To_Date 	+ "','dd/MM/yyyy') and Account_Status='C'";
			    					Sql_Final = Sql_Final + Sql_Condition4;
			    					Status="Closed ";
			    				} else{
			    					Sql_Condition4 = " ( Open_Date between to_date('"	+ From_Date + "','dd/MM/yyyy') and to_date('"+ To_Date+ "','dd/MM/yyyy') or Closed_Date between to_date('"	+ From_Date + "','dd/MM/yyyy') and to_date('"+ To_Date 	+ "','dd/MM/yyyy') ) and Account_Status like '%'";
			    					Sql_Final = Sql_Final + Sql_Condition4;
			    					Status="All ";
			    				}
			    				//String user = (String) session.getAttribute("user");
				    		       String temp =  dao10.Get_ScalarFun("Select user_level  from logindetails where username='"+user+"'",201);
				    				String Sql_Audit=" and  scheme_code not in ('60024','60028') ";
				    		     if(temp.equalsIgnoreCase("R"))
			    				{
			    					Sql_Final = Sql_Final + Sql_Audit;
			    				}

			    				Sql_Final = Sql_Final +" and to_char(branch_code) like '%"+Bcode+"%' Order by branch_code,jL_Master_view.scheme_code,Account_no";

			    				//24-12-2022
			    				//Sql_Final="select a.*,nvl(b.transaction_amount,0) as Closure_Amount from ("+Sql_Final+")a left join (select Account_no,nvl(sum(transaction_amount),0) as transaction_amount,transaction_date from daily_transaction_table where transaction_type='Credit' and flag in ('AC','INT') group by Account_no,transaction_date)b on a.Account_no=b.Account_no and a.Closed_date=b.Transaction_date";
			    			     
			    				//26-12-2024
			    				//Sql_Final="select a.*,nvl(b.transaction_amount,0) as Closure_Amount from ("+Sql_Final+")a left join (select Account_no,nvl(sum(transaction_amount),0) as transaction_amount,transaction_date from daily_transaction_table where transaction_type='Credit' and flag in ('AC','INT') group by Account_no,transaction_date)b on a.Account_no=b.Account_no and a.Closed_date=b.Transaction_date";
			    				Sql_Final="select a.*,case when a.Closed_date is not null then(select  nvl(b.principal,0)+nvl(b.interest,0)   as Amount from (select a.* , ROW_NUMBER() OVER ( ORDER BY Account_no DESC) as rno from ( select Account_no,transaction_date,principal,interest,transaction_id from Voucher_Print_view where page_source='JLR' and Account_no=a.Account_no order by Transaction_date desc,to_number(substr(to_char(transaction_id),-4)) desc)a )b where rownum=1) else 0 end as Closure_Amount from ("+Sql_Final+")a";

		//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
			    				//List<SimpleBranch> list1=null;
			    				List<SimpleBranch> list=null;
			    				//List<SimpleBranch> list3=null;
			    				//List<SimpleBranch> list2=null;
			    				
			    				
			    				
			    					
			    					list = JLDao.getJL_Monthly_ConsolidatedReport(Sql_Final, 2);
			    								    				
			    				
						
								

							
								// Connecting to the SQL server database

								Connection conn = null;

								try {

									// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
									// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
									Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
									// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

									// Loading Jasper Report File from Local file system

									// String jrxmlFile =
									// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
									// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
									// String jrxmlFile=request.getRealPath("Report1.jrxml");
									// String jrxmlFile =
									// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

									// String jrxmlFile=request.getRealPath("kk1.jrxml");
									String jrxmlFile = null;
									if(em.getFile_Type().equalsIgnoreCase("2")){
										 jrxmlFile = request.getRealPath("JL_Monthly_Report_xl.jrxml");
									}
									else{
										 jrxmlFile = request.getRealPath("JL_Monthly_Report.jrxml");
									}
										
									
									InputStream input = new FileInputStream(new File(jrxmlFile));

									

									/* Convert List to JRBeanCollectionDataSource */
									JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
											list);
									//JRBeanCollectionDataSource itemsJRBean1 = new JRBeanCollectionDataSource(
									//		list1);
									//JRBeanCollectionDataSource itemsJRBean2 = new JRBeanCollectionDataSource(
									//		list2);
									
									//JRBeanCollectionDataSource itemsJRBean3 = new JRBeanCollectionDataSource(
										//	list3);
									
									
									/* Map to hold Jasper report Parameters */
									Map<String, Object> parameters = new HashMap<String, Object>();
									
									//------------Get Branch Details----------------------------------
									String Branch_Name = null;
									String Branch_Address = null;
									String Branch_City = null;
									String Branch_Pincode = null;
									String Branch_Phone = null;


									List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
									for(SimpleBranch sb:brInfo)
									{
										Branch_Name=sb.getS2();
									   Branch_Address=sb.getS3();
									    Branch_City=sb.getS4();
									    Branch_Pincode=sb.getS5();
									    Branch_Phone=sb.getS6();
									    
									  }

									System.out.println("Branch_Name"+Branch_Name);
									Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
									 String Msg="Status :"+Status+" : JL Monthly Report  between "+From_Date+"-"+ To_Date;
									 String user_name=empDao.getEmployeeName(user);
									 parameters.put("Branch_Name", Branch_Name);
									 parameters.put("Branch_Address", Branch_Address);
									 parameters.put("Msg", Msg);
									 parameters.put("Status", Status);
									   parameters.put("user", user_name);
									 System.out.println("Status----"+Status);
									 if(!em.getFile_Type().equalsIgnoreCase("2")){ 
									//-11-05-2024--------------------------------------------------------------------------------
									 parameters.put("Comp_Cin",con.GetCINNO());
									 parameters.put("Comp_Name",con.GetCompName());
									 //----------------------------------------------------------------------------------------------
									 }
									String realPath = request.getRealPath("/resources/images/");
									parameters.put("realPath", realPath);

									parameters.put("itemsJLBean", itemsJRBean);
								//	parameters.put("itemsJLBean1", itemsJRBean1);
									//parameters.put("itemsJLBean2", itemsJRBean2);
								//	parameters.put("itemsJLBean3", itemsJRBean3);

									/* Using compiled version(.jasper) of Jasper report to generate PDF */
									// JasperPrint jasperPrint =
									// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
									// parameters, new JREmptyDataSource());

									/* outputStream to create PDF */
									// OutputStream outputStream = new FileOutputStream(new
									// File(outputFile));
									/* Write content to PDF file */
									// JasperExportManager.exportReportToPdfStream(jasperPrint,
									// outputStream);
									// Generating the report
									
									

									JasperReport jasperReport = JasperCompileManager
											.compileReport(input);
									JasperPrint jasperPrint = JasperFillManager.fillReport(
											jasperReport, parameters, new JREmptyDataSource());

									// Exporting the report as a PDF

									// JRExporter exporter = null;
									// OutputStream ouputStream = response.getOutputStream();

									// response.setContentType("application/pdf");
									// exporter = new JRPdfExporter();
									// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
									// jasperPrint);
									// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
									// ouputStream);
									 String branch="All Branch";
							          if(Bcode!=2)
							        	  branch=""+Bcode;
							          
									String filename = branch+"-JL_Monthly_Report "+Status+" :"+From_Date+"-"+ To_Date;

									   if(em.getFile_Type().equalsIgnoreCase("1"))
							           {
							        	   JRExporter exporter2 = null;
							           		 ServletOutputStream ouputStream2 = response.getOutputStream();
							           		 
							           		 response.setContentType("application/pdf");
							           		 response.addHeader("Content-Disposition", "attachment; filename="+filename+".pdf");
							                    exporter2 = new JRPdfExporter();
							                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
							                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".pdf");
							                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
							                    exporter2.exportReport();
							           }
							           else if(em.getFile_Type().equalsIgnoreCase("2"))
							           {
							        	   
								         
								        	  
								           response.setContentType("application/xls");
								           response.addHeader("Content-Disposition", "attachment; filename="+filename+".xls");
								           JRXlsExporter exporter = new JRXlsExporter();
								           exporter.setParameter(JRXlsAbstractExporterParameter.SHEET_NAMES, new String[] {""+branch+"-JL Report- "+Status+"",
								            "sheet three"});
								           // JRXlsExporter exporter = new JRXlsExporter();
								            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".xls");
								            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

								            exporter.exportReport();
								    
							           }
							           else if(em.getFile_Type().equalsIgnoreCase("3"))
							           {
							        	   response.setContentType("application/docx");
								           response.addHeader("Content-Disposition", "attachment; filename="+filename+".docx");
								           JRDocxExporter exporter3 = new JRDocxExporter();
								           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".docx");
								           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
								           exporter3.exportReport();
							           }

									response.getOutputStream().flush();
									response.getOutputStream().close();
									
									   
							           //------06-03-2023----------------------------------
								         String File_Type="";
								 	     if(em.getFile_Type().equalsIgnoreCase("1"))
								 	    	File_Type="PDF";
								 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
								 	    	File_Type="EXCEL";
								 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
								 		File_Type="DOCUMENT";
								        
								 //---------------------------------
								 	    	// String user = (String) session.getAttribute("user");
								 			

								 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
								 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Consolidated Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+": between "+From_Date+"-"+ To_Date+"')", 201);


								} catch (FileNotFoundException e) {
									e.printStackTrace();
								} catch (JRException e) {
									e.printStackTrace();
								} catch (ClassNotFoundException e) {
									e.printStackTrace();
								} catch (InstantiationException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (IllegalAccessException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} finally {
									if (conn != null) {
										try {
											conn.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
									}
								}

							} 

	 			    	 //30-01-2023
	 			    	  @RequestMapping(value = "/LAD_Consolidated")
		    		   	public String LAD_Consolidated_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		    		       	///Session-------------------------------------------------------------
		    		   		 session=request.getSession();
		    		   			String user=(String) session.getAttribute("user");
		    		   			if(user==null)
		    		   			return  "Session_Popup";
		    		   	   //--------------------------------------------------------------------
		    		   			String fun_name="EOM Report";
								String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
				                String Operation_status=dao10.Get_ScalarFun(query, 201);
						 		 	if(!Operation_status.equalsIgnoreCase("Y"))
						 		 		return "/Report_Alert";
		    		   			String[] per1=perdao.GetPermission(user, "Business");
		    					
		    					
		      					 String View=null;
		      					 String Save=null;
		      					 String Update=null;
		      					 String Delete=null;
		      					 String Verify2=null;
		      					 String Verify3=null;
		      					 String Verify4=null;
		      					 String Verify5=null;
		      					 String Reports1=null;
		      					 String Button=null;
		      					 String Finger_Print=null;
		      							
		      					 
		      					 
		      					 View=per1[0];
		      					 Save=per1[1];
		      					 Update=per1[2];
		      					 Delete=per1[3];
		      					 Verify2=per1[4];
		      					 Verify3=per1[5];
		      					 Verify4=per1[6];
		      					 Verify5=per1[7];
		      					 Reports1=per1[8];
		      					 Button=per1[9];
		      					 Finger_Print=per1[10];
		      					
		      					 
		      					 System.out.println("View-------------------------"+View);
		      					 System.out.println("Save-------------------------"+Save);
		      					 System.out.println("Update-------------------------"+Update);
		      					 System.out.println("Delete-------------------------"+Delete);
		      					 System.out.println("Verify2-------------------------"+Verify2);
		      					 System.out.println("Verify3-------------------------"+Verify3);
		      					 System.out.println("Verify4-------------------------"+Verify4);
		      					 System.out.println("Verify5-------------------------"+Verify5);
		      					 System.out.println("Reports1-------------------------"+Reports1);
		      					 System.out.println("Button-------------------------"+Button);
		      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		      					 
		      					 
		      					
		      					
		      					int btn_Verify=1;
		      					int btn_Save=1;
		      					int btn_Delete=1;
		      					int btn_Report=1;
		      					
		      					if (View.equalsIgnoreCase("N"))
		      						return ("/Authorization");
		      					System.out.println("0000000000000000000000");
							    if (Verify2.equalsIgnoreCase("N"))	
							       btn_Verify = 2;
							    System.out.println("111111111111");
							    if (Save.equalsIgnoreCase("N"))
							        btn_Save= 2;
							    System.out.println("222222222222222222222222");
							    if (Update.equalsIgnoreCase("N"))
							        btn_Save=2;
							    if (Reports1.equalsIgnoreCase("N"))
							    	btn_Report=2;
		    		   			
							    String SaveFlag="";
							    if(btn_Report==2)
							    {
								 SaveFlag="Display:none;";
								 System.out.println("1111111111111111111111");
							    }
							 
							 mp.put("ReportFlag", SaveFlag);
		       		   		 Employee em = new Employee();
		       				 mp.put("Employee2", em);
		       				 
		       				
		  			  			List <Simple> branchCode=dao10.getBranchCode();
								System.out.println("Branch_Code=getbranch");
								List<String> branchCodeList=new ArrayList<>();
								for(Simple s:branchCode)
								{
									String s3=s.getS1()+"-"+s.getS2();
									branchCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("BranchCodeList", branchCodeList);
		  			  				
		    		   			
		    		   		return  "LAD_Consolidated";
		    		   	}
			    	 

 				    	 @RequestMapping(value = "/getLAD_Consolidated", params ="Btn_LAD_Consolidated", method=RequestMethod.POST)
 						   public void LAD_ConsolidatedReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException 
 						   { 

								// JL_Master jl=new JL_Master();

							   System.out.println("inside controller-----------------------------------");
							   
								session = request.getSession();
								int DBCode = (int) session.getAttribute("Branch");
								///Session-------------------------------------------------------------
									String user=(String) session.getAttribute("user");
									//-----------------------------------------------------GetPermission-------------------------------------

								
								List <Simple> branchCode=dao10.getBranchCode();
								System.out.println("Branch_Code=getbranch");
								List<String> branchCodeList=new ArrayList<>();
								for(Simple s:branchCode)
								{
									String s3=s.getS1()+"-"+s.getS2();
									branchCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("BranchCodeList", branchCodeList);
		  			  				
		  			  			

									String Branch_Type=em.getBranch_Type().substring(0, 3);
								
									int Bcode = Integer.parseInt(Branch_Type);
								

								String Scheme_Code = "700";
								/*if(Scheme.equalsIgnoreCase("300"))
								{
								String Scheme1[] = Scheme.split("-");
								Scheme_Code = Scheme1[0];
								}
								else
								{
									Scheme_Code="300";
								}*/
								String From_Date=em.getDob();
			    				String To_Date=em.getJoining_Date();
			    				
			    				System.out.println("inside control 2----------");
			    				
		//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
			    				//List<SimpleBranch> list1=null;
			    				List<SimpleBranch> list=null;
			    				//List<SimpleBranch> list3=null;
			    				//List<SimpleBranch> list2=null;
			    				String Status=null;
			    				
			    				if(Bcode==200)
			    					Bcode=2;
			    					
			    				list = JLDao.getLAD_Monthly_Report_Active_Closed(
										From_Date, To_Date,
										em.getFD_Type(), Bcode);
		    					
			    				if(em.getFD_Type().equalsIgnoreCase("A")){
			    						Status ="Active";
			    					 
			    					 System.out.println("list1------------------");
			    					
			    					}
			    				else if(em.getFD_Type().equalsIgnoreCase("C")){
			    						Status="Closed";
			    					 System.out.println("list------------------");
		    					}
			    				else
			    				{
			    						Status="All ";
			    				}
			    				
			    				
						
								

							
								// Connecting to the SQL server database

								Connection conn = null;

							

									// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
									// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
									//Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
									// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

									// Loading Jasper Report File from Local file system

									// String jrxmlFile =
									// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
									// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
									// String jrxmlFile=request.getRealPath("Report1.jrxml");
									// String jrxmlFile =
									// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

									// String jrxmlFile=request.getRealPath("kk1.jrxml");
									String jrxmlFile = null;
									if(em.getFile_Type().equalsIgnoreCase("2")){
										 jrxmlFile = request.getRealPath("LAD_Monthly_Report_xl.jrxml");
									}
									else{
										 jrxmlFile = request.getRealPath("LAD_Monthly_Report.jrxml");
									}
										
										try(InputStream input = new FileInputStream(new File(jrxmlFile)))
										{
								//	InputStream input = new FileInputStream(new File(jrxmlFile));

									

									/* Convert List to JRBeanCollectionDataSource */
									JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
											list);
									//JRBeanCollectionDataSource itemsJRBean1 = new JRBeanCollectionDataSource(
									//		list1);
									//JRBeanCollectionDataSource itemsJRBean2 = new JRBeanCollectionDataSource(
									//		list2);
									
									//JRBeanCollectionDataSource itemsJRBean3 = new JRBeanCollectionDataSource(
										//	list3);
									
									
									/* Map to hold Jasper report Parameters */
									Map<String, Object> parameters = new HashMap<String, Object>();
									
									//------------Get Branch Details----------------------------------
									String Branch_Name = null;
									String Branch_Address = null;
									String Branch_City = null;
									String Branch_Pincode = null;
									String Branch_Phone = null;


									List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
									for(SimpleBranch sb:brInfo)
									{
										Branch_Name=sb.getS2();
									   Branch_Address=sb.getS3();
									    Branch_City=sb.getS4();
									    Branch_Pincode=sb.getS5();
									    Branch_Phone=sb.getS6();
									    
									  }

									System.out.println("Branch_Name"+Branch_Name);
									Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
									 String Msg=""+Status+" : LAD Monthly Report  between "+From_Date+"-"+ To_Date;
									 parameters.put("Branch_Name", Branch_Name);
									 parameters.put("Branch_Address", Branch_Address);
									 parameters.put("Msg", Msg);
									 parameters.put("Status", Status);
									 
									 System.out.println("Status----"+Status);
									 
									

									String realPath = request.getRealPath("/resources/images/");
									 String user_name=empDao.getEmployeeName(user);
									parameters.put("realPath", realPath);

									parameters.put("itemsJLBean", itemsJRBean);
									
									 //10-02-2023
						             parameters.put("user", user_name);
						         	if(!em.getFile_Type().equalsIgnoreCase("2")){ 
						           //-11-05-2024--------------------------------------------------------------------------------
						             parameters.put("Comp_Cin",con.GetCINNO());
						             parameters.put("Comp_Name",con.GetCompName());
						             //----------------------------------------------------------------------------------------------
						         	}
								//	parameters.put("itemsJLBean1", itemsJRBean1);
									//parameters.put("itemsJLBean2", itemsJRBean2);
								//	parameters.put("itemsJLBean3", itemsJRBean3);

									/* Using compiled version(.jasper) of Jasper report to generate PDF */
									// JasperPrint jasperPrint =
									// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
									// parameters, new JREmptyDataSource());

									/* outputStream to create PDF */
									// OutputStream outputStream = new FileOutputStream(new
									// File(outputFile));
									/* Write content to PDF file */
									// JasperExportManager.exportReportToPdfStream(jasperPrint,
									// outputStream);
									// Generating the report

									JasperReport jasperReport = JasperCompileManager
											.compileReport(input);
									JasperPrint jasperPrint = JasperFillManager.fillReport(
											jasperReport, parameters, new JREmptyDataSource());

									// Exporting the report as a PDF

									// JRExporter exporter = null;
									// OutputStream ouputStream = response.getOutputStream();

									// response.setContentType("application/pdf");
									// exporter = new JRPdfExporter();
									// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
									// jasperPrint);
									// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
									// ouputStream);

									String filename = DBCode+"-LAD_Monthly_Report "+Status+" :"+From_Date+"-"+ To_Date;

									   if(em.getFile_Type().equalsIgnoreCase("1"))
							           {
							        	   JRExporter exporter2 = null;
							           		 ServletOutputStream ouputStream2 = response.getOutputStream();
							           		 
							           		 response.setContentType("application/pdf");
							           		 response.addHeader("Content-Disposition", "attachment; filename="+filename+".pdf");
							                    exporter2 = new JRPdfExporter();
							                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
							                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".pdf");
							                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
							                    exporter2.exportReport();
							           }
							           else if(em.getFile_Type().equalsIgnoreCase("2"))
							           {
							        	   
								          
								           response.setContentType("application/xls");
								           response.addHeader("Content-Disposition", "attachment; filename="+filename+".xls");
								           JRXlsExporter exporter = new JRXlsExporter();
								           // JRXlsExporter exporter = new JRXlsExporter();
								            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".xls");
								            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

								            exporter.exportReport();
								    
							           }
							           else if(em.getFile_Type().equalsIgnoreCase("3"))
							           {
							        	   response.setContentType("application/docx");
								           response.addHeader("Content-Disposition", "attachment; filename="+filename+".docx");
								           JRDocxExporter exporter3 = new JRDocxExporter();
								           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".docx");
								           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
								           exporter3.exportReport();
							           }
									   
									   //------10-02-2023----------------------------------
					  			         String File_Type="";
					  				     if(em.getFile_Type().equalsIgnoreCase("1"))
					  				    	File_Type="PDF";
					  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
					  				    	File_Type="EXCEL";
					  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
					  					File_Type="DOCUMENT";
					  			        
					  	    //---------------------------------
				  			 
		    						//	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('LAD Consolidated Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		    							dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('LAD Consolidated Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":"+Status+" :"+From_Date+"-"+ To_Date+"')", 201);


									response.getOutputStream().flush();
									response.getOutputStream().close();

								} catch (FileNotFoundException e) {
									e.printStackTrace();
								} catch (JRException e) {
									e.printStackTrace();
								} finally {
									if (conn != null) {
										try {
											conn.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
									}
								}
								// return  "LAD_Consolidated";
							} 
 				    	 
 				    	 
 				    	 
 				    	 
 				    	 
 				   	 @RequestMapping(value = "/getJL_StockConsolidated", params ="Btn_JL_StockConsolidated", method=RequestMethod.POST)
					   public void Btn_JL_Stack_Consolidated(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
					   { 

							// JL_Master jl=new JL_Master();

						   System.out.println("inside controller-----------------------------------");
						   
							session = request.getSession();
							int DBCode = (int) session.getAttribute("Branch");

							String Scheme_Code = "600";
							List <Simple> branchCode=dao10.getBranchCode();
							System.out.println("Branch_Code=getbranch");
							List<String> branchCodeList=new ArrayList<>();
							for(Simple s:branchCode)
							{
								String s3=s.getS1()+"-"+s.getS2();
								branchCodeList.add(s3);
								System.out.println(s3);  
								 
							}
							mp.put("BranchCodeList", branchCodeList);
	  			  				
	  			  			

							String Branch_Type=em.getBranch_Type().substring(0, 3);
						    String BName="All Branches";
							int Bcode = Integer.parseInt(Branch_Type);
							if(em.getBranch_Type().equalsIgnoreCase("200"))
							{
								Bcode=2;
							}
							else
								BName=em.getBranch_Type().substring(4);
								
							
							String Scheme_type=em.getRemarks();
							String Status="All ";
							if(!Scheme_type.equalsIgnoreCase("600"))
							{
								Status=Scheme_type.substring(6);
								Scheme_Code=Scheme_type.substring(0, 5);
								
							}
							else
							{
								
								Status="All Schemes";
							}
                            Status=BName+"-"+Status;
							//String From_Date=em.getDob();
		    				//String To_Date=em.getJoining_Date();
		    				//System.out.println("inside control 2----------="+From_Date+" ="+Scheme_Code);
		    				String Sql_Final = null;
		    				

		    				//String Sql="select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)),mq.closed_date,mq.Account_status,mq.customer_id from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id from jl_master_view where Account_status ='A' and Branch like '%"+Bcode+"%' and Scheme_code like '%"+Scheme_Code+"%' )b on b.account_no=a.account_no)mq)main_qry where scheme_code is not null ";
	    					//10-02-2023
		    				//select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)),mq.closed_date,mq.Account_status,mq.customer_id,mq.rpg_list,mq.purity_list from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id,c.rpg_list,c.purity_list from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id from jl_master_view where Account_status ='A'  )b on b.account_no=a.account_no left join (SELECT Account_no,LISTAGG(nvl(rate_per_gram,0), ', ') WITHIN GROUP (ORDER BY rate_per_gram) as rpg_list,LISTAGG(nvl(purity,0), ', ') WITHIN GROUP (ORDER BY purity) as purity_list FROM Jewel_Details_View  group by Account_no)c on b.Account_no=c.Account_no)mq)main_qry
		    				//String Sql="select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)),mq.closed_date,mq.Account_status,mq.customer_id,mq.rpg_list,mq.purity_list from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id,c.rpg_list,c.purity_list from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id from jl_master_view where Account_status ='A' and Branch like '%"+Bcode+"%' and Scheme_code like '%"+Scheme_Code+"%'  )b on b.account_no=a.account_no left join (SELECT Account_no,LISTAGG(nvl(rate_per_gram,0), ', ') WITHIN GROUP (ORDER BY rate_per_gram) as rpg_list,LISTAGG(nvl(purity,0), ', ') WITHIN GROUP (ORDER BY purity) as purity_list FROM Jewel_Details_View  group by Account_no)c on b.Account_no=c.Account_no)mq)main_qry where scheme_code is not null ";


		    				//12-09-2024
		    				String Sql="select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)) as CB,mq.closed_date,mq.Account_status,mq.customer_id,mq.rpg_list,mq.purity_list,mq.JL_Packet_No from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id,c.rpg_list,c.purity_list,b.JL_Packet_No from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id,nvl(JL_PACKET_NO,'0') as JL_PACKET_NO from jl_master_view where Account_status ='A' and Branch like '%"+Bcode+"%' and Scheme_code like '%"+Scheme_Code+"%'  )b on b.account_no=a.account_no left join (SELECT Account_no,LISTAGG(nvl(rate_per_gram,0), ', ') WITHIN GROUP (ORDER BY rate_per_gram) as rpg_list,LISTAGG(nvl(purity,0), ', ') WITHIN GROUP (ORDER BY purity) as purity_list FROM Jewel_Details_View  group by Account_no)c on b.Account_no=c.Account_no)mq)main_qry where scheme_code is not null ";

		    				Sql_Final = Sql;
	    					
		    				String user = (String) session.getAttribute("user");
			    		       String temp =  dao10.Get_ScalarFun("Select user_level  from logindetails where username='"+user+"'",201);
			    				String Sql_Audit=" and main_qry.scheme_code not in ('60024','60028') ";
			    		     if(temp.equalsIgnoreCase("R"))
		    				{
		    					Sql_Final = Sql_Final + Sql_Audit;
		    				}

		    				Sql_Final = Sql_Final +"  order by main_qry.Branch,main_qry.Scheme_code,main_qry.Account_No";

	//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
		    				//List<SimpleBranch> list1=null;
		    				List<SimpleBranch> list=null;
		    				//List<SimpleBranch> list3=null;
		    				//List<SimpleBranch> list2=null;
		    				
		    				System.out.println(Sql_Final);
		    				
		    					
		    					list = JLDao.getJLStock( Sql_Final);
		    								    				
		    				
					
							

						
							// Connecting to the SQL server database
		    					Connection conn = null;

		    					try {

		    						// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
		    						// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
		    						Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		    						// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

		    						// Loading Jasper Report File from Local file system

		    						// String jrxmlFile =
		    						// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
		    						// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
		    						// String jrxmlFile=request.getRealPath("Report1.jrxml");
		    						// String jrxmlFile =
		    						// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

		    						// String jrxmlFile=request.getRealPath("kk1.jrxml");
		    						String jrxmlFile = request.getRealPath("JL_Stock_Register2.jrxml");
		    						if(em.getFile_Type().equalsIgnoreCase("2"))
		    				           {
		    							jrxmlFile = request.getRealPath("JL_Stock_Register2_xl.jrxml");
		    				           }
		    						InputStream input = new FileInputStream(new File(jrxmlFile));

		    						// String idDyn="101";
		    						// int idDyn=Transfer_Acc_No;
		    						// String StartDate=From_Date;
		    						// String EndDate=To_Date;
		    						// Map parameters = new HashMap();
		    						// parameters=null;
		    						// parameters.put("Accno",idDyn);
		    						// parameters.put("StartDate",StartDate);
		    						// parameters.put("EndDate",EndDate);

		    						/* Convert List to JRBeanCollectionDataSource */
		    						JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
		    								list);
		    						/* Map to hold Jasper report Parameters */
		    						Map<String, Object> parameters = new HashMap<String, Object>();
		    						
		    						
		    						
		    						//------------Get Branch Details----------------------------------
		    			  	             String Branch_Name = null;
		    			  	             String Branch_Address = null;
		    			  	             String Branch_City = null;
		    			  	             String Branch_Pincode = null;
		    			  	             String Branch_Phone = null;
		    			  	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
		    			  	             for(SimpleBranch sb:brInfo)
		    			  	             {
		    			  	            	Branch_Name=sb.getS2();
		    				    	            Branch_Address=sb.getS3();
		    				    	             Branch_City=sb.getS4();
		    				    	             Branch_Pincode=sb.getS5();
		    				    	             Branch_Phone=sb.getS6();
		    				    	             
		    				    	           }
		    			  	             parameters.put("Branch_Name", Branch_Name);
		    			  	             parameters.put("Branch_Address", Branch_Address+","+Branch_City+","+Branch_Pincode+".");
		    			  	            // parameters.put("Branch_City", Branch_City);
		    			  	            // parameters.put("Branch_Pincode", Branch_Pincode);
		    			  	            // parameters.put("Branch_Phone", Branch_Phone);
		    			  	          System.out.println("Branch_Name"+Branch_Name);
		    			  	     


		    						String realPath = request.getRealPath("/resources/images/");
		    						
		    						parameters.put("realPath", realPath);

		    						parameters.put("itemsJRBean", itemsJRBean);
		    						 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

		    						Date Current_Date=(Date) session.getAttribute("Current_Date");
		    				    	String Current=sd.format(Current_Date);
		    				    	 String user_name=empDao.getEmployeeName(user);
		    						parameters.put("Date", Current);
		    						
		    						parameters.put("Status", Status);
		    						
		    						 //10-02-2023
		    			             parameters.put("user", user_name);
		    			             

		    						/* Using compiled version(.jasper) of Jasper report to generate PDF */
		    						// JasperPrint jasperPrint =
		    						// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
		    						// parameters, new JREmptyDataSource());

		    						/* outputStream to create PDF */
		    						// OutputStream outputStream = new FileOutputStream(new
		    						// File(outputFile));
		    						/* Write content to PDF file */
		    						// JasperExportManager.exportReportToPdfStream(jasperPrint,
		    						// outputStream);
		    						// Generating the report

		    						JasperReport jasperReport = JasperCompileManager
		    								.compileReport(input);
		    						JasperPrint jasperPrint = JasperFillManager.fillReport(
		    								jasperReport, parameters, new JREmptyDataSource());

		    						// Exporting the report as a PDF

		    						// JRExporter exporter = null;
		    						// OutputStream ouputStream = response.getOutputStream();

		    						// response.setContentType("application/pdf");
		    						// exporter = new JRPdfExporter();
		    						// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
		    						// jasperPrint);
		    						// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
		    						// ouputStream);
		    			//---------------------------------------------------------------------------------------------------------------------------------------------
		    						//String filename = "JL_OD_Report";

		    						//JasperExportManager.exportReportToPdfStream(jasperPrint,
		    							//	response.getOutputStream());
		    						//JasperExportManager.exportReportToPdfFile(jasperPrint,
		    								//"f:/Reports/" + filename + ".pdf");
		    			//---------------------------------------------------------------------------------------------------------------------------------------------
		    					
		    						String Filename2="JL_Stock_Report";
		    				           String  reportPath = request.getRealPath("/");
		    				           if(em.getFile_Type().equalsIgnoreCase("1"))
		    				           {
		    				        	   JRExporter exporter2 = null;
		    				           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		    				           		 
		    				           		 response.setContentType("application/pdf");
		    				           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		    				                    exporter2 = new JRPdfExporter();
		    				                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    				                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		    				                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    				                    exporter2.exportReport();
		    				           }
		    				           else if(em.getFile_Type().equalsIgnoreCase("2"))
		    				           {
		    				        	   
		    					          
		    					           response.setContentType("application/xls");
		    					           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
		    					           JRXlsExporter exporter = new JRXlsExporter();
		    					           // JRXlsExporter exporter = new JRXlsExporter();
		    					            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    					            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
		    					            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

		    					            exporter.exportReport();
		    					    
		    				           }
		    				           else if(em.getFile_Type().equalsIgnoreCase("3"))
		    				           {
		    				        	   response.setContentType("application/docx");
		    					           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
		    					           JRDocxExporter exporter3 = new JRDocxExporter();
		    					           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    					           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
		    					           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    					           exporter3.exportReport();
		    				           }
		    						// JasperExportManager.exportReportToPdfStream(jasperPrint,
		    						// response.getOutputStream());
		    						// JasperExportManager.exportReportToHtmlFile(jasperPrint,
		    						// "/report1.html");
		    						// JasperViewer.viewReport(jasperPrint);
		    						
		    				           
		    				          //------10-02-2023----------------------------------
					  			         String File_Type="";
					  				     if(em.getFile_Type().equalsIgnoreCase("1"))
					  				    	File_Type="PDF";
					  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
					  				    	File_Type="EXCEL";
					  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
					  					File_Type="DOCUMENT";
					  			        
					  	    //---------------------------------
				  			 
		    						
		    							//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		    							dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+"')", 201);


		    						response.getOutputStream().flush();
		    						response.getOutputStream().close();

		    					} catch (FileNotFoundException e) {
		    						e.printStackTrace();
		    					} catch (JRException e) {
		    						e.printStackTrace();
		    					} catch (ClassNotFoundException e) {
		    						e.printStackTrace();
		    					} catch (InstantiationException e) {
		    						// TODO Auto-generated catch block
		    						e.printStackTrace();
		    					} catch (IllegalAccessException e) {
		    						// TODO Auto-generated catch block
		    						e.printStackTrace();
		    					} finally {
		    						if (conn != null) {
		    							try {
		    								conn.close();
		    							} catch (SQLException e) {
		    								// TODO Auto-generated catch block
		    								e.printStackTrace();
		    							}
		    						}
		    					}

						} 

				    	 
				  	 @RequestMapping(value = "/JL_StockConsolidated")
	    		   	public String JL_StockConsolidated_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
	    		       	///Session-------------------------------------------------------------
	    		   		 session=request.getSession();
	    		   			String user=(String) session.getAttribute("user");
	    		   			if(user==null)
	    		   			return  "Session_Popup";
	    		   	   //--------------------------------------------------------------------
	    		   			String fun_name="EOM Report";
							String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
			                String Operation_status=dao10.Get_ScalarFun(query, 201);
					 		 	if(!Operation_status.equalsIgnoreCase("Y"))
					 		 		return "/Report_Alert";
					 		
	    		   			String[] per1=perdao.GetPermission(user, "Business");
	    					
	    					
	      					 String View=null;
	      					 String Save=null;
	      					 String Update=null;
	      					 String Delete=null;
	      					 String Verify2=null;
	      					 String Verify3=null;
	      					 String Verify4=null;
	      					 String Verify5=null;
	      					 String Reports1=null;
	      					 String Button=null;
	      					 String Finger_Print=null;
	      							
	      					 
	      					 
	      					 View=per1[0];
	      					 Save=per1[1];
	      					 Update=per1[2];
	      					 Delete=per1[3];
	      					 Verify2=per1[4];
	      					 Verify3=per1[5];
	      					 Verify4=per1[6];
	      					 Verify5=per1[7];
	      					 Reports1=per1[8];
	      					 Button=per1[9];
	      					 Finger_Print=per1[10];
	      					
	      					 
	      					 System.out.println("View-------------------------"+View);
	      					 System.out.println("Save-------------------------"+Save);
	      					 System.out.println("Update-------------------------"+Update);
	      					 System.out.println("Delete-------------------------"+Delete);
	      					 System.out.println("Verify2-------------------------"+Verify2);
	      					 System.out.println("Verify3-------------------------"+Verify3);
	      					 System.out.println("Verify4-------------------------"+Verify4);
	      					 System.out.println("Verify5-------------------------"+Verify5);
	      					 System.out.println("Reports1-------------------------"+Reports1);
	      					 System.out.println("Button-------------------------"+Button);
	      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
	      					 
	      					 
	      					
	      					
	      					int btn_Verify=1;
	      					int btn_Save=1;
	      					int btn_Delete=1;
	      					int btn_Report=1;
	      					
	      					if (View.equalsIgnoreCase("N"))
	      						return ("/Authorization");
	      					System.out.println("0000000000000000000000");
						    if (Verify2.equalsIgnoreCase("N"))	
						       btn_Verify = 2;
						    System.out.println("111111111111");
						    if (Save.equalsIgnoreCase("N"))
						        btn_Save= 2;
						    System.out.println("222222222222222222222222");
						    if (Update.equalsIgnoreCase("N"))
						        btn_Save=2;
						    if (Reports1.equalsIgnoreCase("N"))
						    	btn_Report=2;
	    		   			
						    String SaveFlag="";
						    if(btn_Report==2)
						    {
							 SaveFlag="Display:none;";
							 System.out.println("1111111111111111111111");
						    }
						 
						 mp.put("ReportFlag", SaveFlag);
	       		   		 Employee em = new Employee();
	       				 mp.put("Employee2", em);
	       				 
	       				
	  			  			List <Simple> branchCode=dao10.getBranchCode();
							System.out.println("Branch_Code=getbranch");
							List<String> branchCodeList=new ArrayList<>();
							for(Simple s:branchCode)
							{
								String s3=s.getS1()+"-"+s.getS2();
								branchCodeList.add(s3);
								System.out.println(s3);  
								 
							}
							mp.put("BranchCodeList", branchCodeList);
	  			  			//getScheme_List	
							
							List <Simple> sc=JLDao.getScheme_List("JL");
							System.out.println("Branch_Code=getbranch");
							List<String> SchemeCodeList=new ArrayList<>();
							for(Simple s:sc)
							{
								String s3=s.getS2();
								SchemeCodeList.add(s3);
								System.out.println(s3);  
								 
							}
							mp.put("SchemeCodeList", SchemeCodeList);
	    		   			
	    		   		return  "JL_StockConsolidated";
	    		   	}
					
					 @RequestMapping(value = "/JL_Recovery")
    		   	public String JL_Recovery(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

    		   		String fun_name="EOM Report";
					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	                String Operation_status=dao10.Get_ScalarFun(query, 201);
			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
			 		 		return "/Report_Alert";

			 		 	
 				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
 					String sys=sd.format(Current_Date);
 				
 					String[] per1=perdao.GetPermission(user, "Recovery");
					
					
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");

 					
    		   			
       		   		 Employee em = new Employee();
       		   		 
       				 mp.put("Employee2", em);
    		   			
    		   		return  "JL_Recovery";
    		   	}


    		    @RequestMapping(value = "/Deposit_Consolidted")
    		   	public String Deposit_Consolidted(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    		       	///Session-------------------------------------------------------------
    		   		 session=request.getSession();
    		   			String user=(String) session.getAttribute("user");
    		   			if(user==null)
    		   			return  "Session_Popup";
    		   	   //--------------------------------------------------------------------
    		   		 //--------------------------------------------------------------------
	  					String fun_name="EOM Report";
						String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
		                String Operation_status=dao10.Get_ScalarFun(query, 201);
				 		 	if(!Operation_status.equalsIgnoreCase("Y"))
				 		 		return "/Report_Alert";
				 			//return  new ModelAndView("Authorization");
	  	
    		   			
    		   			
    		   		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

 				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
 					String sys=sd.format(Current_Date);
 				
 					String[] per1=perdao.GetPermission(user, "Recovery");
					
					
  					 String View=null;
  					 String Save=null;
  					 String Update=null;
  					 String Delete=null;
  					 String Verify2=null;
  					 String Verify3=null;
  					 String Verify4=null;
  					 String Verify5=null;
  					 String Reports1=null;
  					 String Button=null;
  					 String Finger_Print=null;
  							
  					 
  					 
  					 View=per1[0];
  					 Save=per1[1];
  					 Update=per1[2];
  					 Delete=per1[3];
  					 Verify2=per1[4];
  					 Verify3=per1[5];
  					 Verify4=per1[6];
  					 Verify5=per1[7];
  					 Reports1=per1[8];
  					 Button=per1[9];
  					 Finger_Print=per1[10];
  					
  					 
  					 System.out.println("View-------------------------"+View);
  					 System.out.println("Save-------------------------"+Save);
  					 System.out.println("Update-------------------------"+Update);
  					 System.out.println("Delete-------------------------"+Delete);
  					 System.out.println("Verify2-------------------------"+Verify2);
  					 System.out.println("Verify3-------------------------"+Verify3);
  					 System.out.println("Verify4-------------------------"+Verify4);
  					 System.out.println("Verify5-------------------------"+Verify5);
  					 System.out.println("Reports1-------------------------"+Reports1);
  					 System.out.println("Button-------------------------"+Button);
  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
  					 
  					 
  					
  					
  					int btn_Verify=1;
  					int btn_Save=1;
  					int btn_Delete=1;
  					
  					if (View.equalsIgnoreCase("N"))
  						return ("/Authorization");

 					
    		   			
       		   		 Employee em = new Employee();
       		   		 
       				 mp.put("Employee2", em);
    		   			
    		   		return  "Deposit_Consolidated";
    		   	}

@RequestMapping(value = "/getDepositConsolidated1", params ="Btn_FD_Report", method=RequestMethod.POST)
									   public void viewDepositReport2_11111(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
									   { 
									session=request.getSession();
									int DBCode=(int) session.getAttribute("Branch");
									
									System.out.println("con----------------------------");
									
									 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

									 	Date Current_Date=(Date) session.getAttribute("Current_Date");
										String sys=sd.format(Current_Date);
									

										
										String Branch_Name1="";
					    				String Scheme_name="";
					    				String Account_No="";
					    				String Customer_Name="";
					    				String Open_date="";
					    				String Loan_Amount="";
					    				String CB="";
					    				String pending_days="";
					    				String Interest_Upto="";
					    				String Arrear_Interest="";
					    				String From_Date=em.getTxt_from_date();
					    				String To_Date=em.getTxt_to_date();
					    				
					    				int Bcode=201;
					    			System.out.println("Inside controller---------------------------------------");
					    			    String BranchName="";      
					    			   
									
									Connection conn=null;
							        try {
							       
							           
							      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
							            
							                 String jrxmlFile=null;
							        
							                 	 jrxmlFile=request.getRealPath("FD_Deposit_Report.jrxml");
							                 
							                // jrxmlFile=request.getRealPath("demo.jrxml");
							            InputStream input = new FileInputStream(new File(jrxmlFile));
							            
							            



							       
							          	       	    	           
							           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
							            String Filename2="FD Maturity Report as on "+To_Date;
							            
							   
							   			 Map parameters = new HashMap();
							   		
								         System.out.println("Filename2--------------------------------"+Filename2);   
							   	
							   			String  realPath = request.getRealPath("/resources/images/");
							   			List<SimpleBranch> list=null;
							   			
							   		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
							   			String Date2=To_Date;
							   			String Branch=BranchName;
							   			//String sql="";
							   		 	
							   		// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
							   			
							   		 
							   			 list=empDao.getFD_Maturity_Report(From_Date,To_Date,Bcode);
							   		
							   		 
							   		mp.put("list",list);
							   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
							   		
							   	        parameters.put("itemsJRBean", itemsJRBean); 
							   	    
							   	  parameters.put("Heading", Filename2); 
							   	  
							   	  System.out.println("11111-----------------------");
							   	  
							   	 String Branch_Name = null;
					             String Branch_Address = null;
					             String Branch_City = null;
					             String Branch_Pincode = null;
					             String Branch_Phone = null;
					             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
					             for(SimpleBranch sb:brInfo)
					             {
					            	Branch_Name=sb.getS2();
						             Branch_Address=sb.getS3();
						             Branch_City=sb.getS4();
						             Branch_Pincode=sb.getS5();
						             Branch_Phone=sb.getS6();
						             
						           }
					           System.out.println("222222222-----------------------");
					             parameters.put("Branch_Name", Branch_Name);
					             parameters.put("Branch_Address", Branch_Address);
					             parameters.put("Branch_City", Branch_City);
					             parameters.put("Branch_Pincode", Branch_Pincode);
					             parameters.put("Branch_Phone", Branch_Phone);
					             parameters.put("To_Date", To_Date);
							           JasperReport jasperReport = JasperCompileManager.compileReport(input);
							           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

							         System.out.println("33333333333333-----------------------");
							          
							           String  reportPath = request.getRealPath("/");
							           parameters.put("To_Date", To_Date);
							         parameters.put("From_Date", From_Date);
							       System.out.println("4444444444-----------------------");   
								          
								           response.setContentType("application/xls");
								           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
								           JRXlsExporter exporter = new JRXlsExporter();
								           // JRXlsExporter exporter = new JRXlsExporter();
								            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
								            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

								            exporter.exportReport();
								    
								          System.out.println("5555555555555-----------------------");							       

						         
						           response.getOutputStream().flush();
						           response.getOutputStream().close();
						           
						           
						         
						           String user = (String) session.getAttribute("user");
							 			

							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

						    
						       } catch (FileNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("aa-----------------------"+e.getLocalizedMessage());
						       } catch (JRException e) {
						           e.printStackTrace();
						         System.out.println("bb-----------------------"+e.getLocalizedMessage());
						       } catch (ClassNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("cc-----------------------"+e.getLocalizedMessage());
						       } catch (InstantiationException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("dd-----------------------"+e.getLocalizedMessage());
							} catch (IllegalAccessException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("ee-----------------------"+e.getLocalizedMessage());
							}
						       finally {
						           if(conn!=null){
						               try {
										conn.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
										 System.out.println("ff-----------------------"+e.getLocalizedMessage());
									}
						           }
						       }
						       }



 				    	  			@RequestMapping(value = "/getDepositConsolidated", params ="Btn_RD_Report", method=RequestMethod.POST)
									   public void viewDepositReport1(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
									   { 
									session=request.getSession();
									int DBCode=(int) session.getAttribute("Branch");
									
									System.out.println("con----------------------------");
									
									 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

									 	Date Current_Date=(Date) session.getAttribute("Current_Date");
										String sys=sd.format(Current_Date);
									

										
										String Branch_Name1="";
					    				String Scheme_name="";
					    				String Account_No="";
					    				String Customer_Name="";
					    				String Open_date="";
					    				String Loan_Amount="";
					    				String CB="";
					    				String pending_days="";
					    				String Interest_Upto="";
					    				String Arrear_Interest="";
					    				String From_Date=em.getTxt_from_date();
					    				String To_Date=em.getTxt_to_date();
					    				
					    				int Bcode=201;
					    			System.out.println("Inside controller---------------------------------------");
					    			    String BranchName="";      
					    			   
									
									Connection conn=null;
							        try {
							       
							           
							      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
							            
							                 String jrxmlFile=null;
							        
							                 	 jrxmlFile=request.getRealPath("RD_Deposit_Report.jrxml");
							                 
							                // jrxmlFile=request.getRealPath("demo.jrxml");
							            InputStream input = new FileInputStream(new File(jrxmlFile));
							            
							            



							       
							          	       	    	           
							           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
							            String Filename2="RD Maturity Report as on "+To_Date;
							            
							   
							   			 Map parameters = new HashMap();
							   		
								         System.out.println("Filename2--------------------------------"+Filename2);   
							   	
							   			String  realPath = request.getRealPath("/resources/images/");
							   			List<SimpleBranch> list=null;
							   			
							   		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
							   			String Date2=To_Date;
							   			String Branch=BranchName;
							   			//String sql="";
							   		 	
							   		// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
							   			
							   		 
							   			 list=empDao.getRD_Maturity_Report(From_Date,To_Date,Bcode);
							   		
							   		 
							   		mp.put("list",list);
							   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
							   		
							   	        parameters.put("itemsJRBean", itemsJRBean); 
							   	    
							   	  parameters.put("Heading", Filename2); 
							   	  
							   	  System.out.println("11111-----------------------");
							   	  
							   	 String Branch_Name = null;
					             String Branch_Address = null;
					             String Branch_City = null;
					             String Branch_Pincode = null;
					             String Branch_Phone = null;
					             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
					             for(SimpleBranch sb:brInfo)
					             {
					            	Branch_Name=sb.getS2();
						             Branch_Address=sb.getS3();
						             Branch_City=sb.getS4();
						             Branch_Pincode=sb.getS5();
						             Branch_Phone=sb.getS6();
						             
						           }
					           System.out.println("222222222-----------------------");
					             parameters.put("Branch_Name", Branch_Name);
					             parameters.put("Branch_Address", Branch_Address);
					             parameters.put("Branch_City", Branch_City);
					             parameters.put("Branch_Pincode", Branch_Pincode);
					             parameters.put("Branch_Phone", Branch_Phone);
					             parameters.put("To_Date", To_Date);
							           JasperReport jasperReport = JasperCompileManager.compileReport(input);
							           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

							         System.out.println("33333333333333-----------------------");
							          
							           String  reportPath = request.getRealPath("/");
							           parameters.put("To_Date", To_Date);
							         parameters.put("From_Date", From_Date);
							       System.out.println("4444444444-----------------------");   
								          
								           response.setContentType("application/xls");
								           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
								           JRXlsExporter exporter = new JRXlsExporter();
								           // JRXlsExporter exporter = new JRXlsExporter();
								            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
								            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
								            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

								            exporter.exportReport();
								    
								          System.out.println("5555555555555-----------------------");							       

						         
						           response.getOutputStream().flush();
						           response.getOutputStream().close();
						           
						           
						         
						           String user = (String) session.getAttribute("user");
							 			

							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
							 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

						    
						       } catch (FileNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("aa-----------------------"+e.getLocalizedMessage());
						       } catch (JRException e) {
						           e.printStackTrace();
						         System.out.println("bb-----------------------"+e.getLocalizedMessage());
						       } catch (ClassNotFoundException e) {
						           e.printStackTrace();
						         System.out.println("cc-----------------------"+e.getLocalizedMessage());
						       } catch (InstantiationException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("dd-----------------------"+e.getLocalizedMessage());
							} catch (IllegalAccessException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								 System.out.println("ee-----------------------"+e.getLocalizedMessage());
							}
						       finally {
						           if(conn!=null){
						               try {
										conn.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
										 System.out.println("ff-----------------------"+e.getLocalizedMessage());
									}
						           }
						       }
						       }

					
					

				  	 
				  	@RequestMapping(value = "/getMLArrear", params ="Btn_MLArrear_New", method=RequestMethod.POST)
					   public void viewMLArrear_New(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
					   { 
					session=request.getSession();
					int DBCode=(int) session.getAttribute("Branch");
					
					System.out.println("con----------------------------");
					
					 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

					 	Date Current_Date=(Date) session.getAttribute("Current_Date");
						String sys=sd.format(Current_Date);
					
						 String user = (String) session.getAttribute("user");
				 			
						
						String Branch_Name1="";
	    				String Scheme_name="";
	    				String Account_No="";
	    				String Customer_Name="";
	    				String Open_date="";
	    				String Loan_Amount="";
	    				String CB="";
	    				String pending_days="";
	    				String Interest_Upto="";
	    				String Arrear_Interest="";
	    				String To_Date=em.getDob();
	    				
	    				int Bcode=201;
	    			System.out.println("Inside controller new---------------------------------------");
	    			    String BranchName="";      
	    			    String Branch_Type=em.getBranch_Type().substring(0, 3);
	    			    if(!Branch_Type.equalsIgnoreCase("All"))
						  Bcode = Integer.parseInt(Branch_Type);
	    			    else
	    			    {
	    			    	BranchName="All Branches";
	    			    }
						
	    			List <Simple> branchCode=dao10.getBranchCode();
	    			System.out.println("Branch_Code=getbranch");
	    			List<String> branchCodeList=new ArrayList<>();
	    			for(Simple s:branchCode)
	    			{
	    				String s3=s.getS1()+"-"+s.getS2();
	    				if(Bcode==s.getS1())
	    				{
	    					BranchName=s.getS2();
	    				}
	    				branchCodeList.add(s3);
	    				System.out.println(s3);  
	    				//System.out.println("branchCodeList--------------------"+s3);
	    			}
	    			
	    			//---------------------------------------------
	         		
	         		
	         		mp.put("BranchCodeList", branchCodeList);
				 

					
					Connection conn=null;
			        try {
			       
			           
			      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			            
			                 String jrxmlFile=null;
			        
			                 if(em.getFile_Type().equalsIgnoreCase("2")){
			                	 jrxmlFile=request.getRealPath("ML_Arrear3_xl.jrxml");
			                 }
			                 else{
			                	 jrxmlFile=request.getRealPath("ML_Arrear3.jrxml");
			                }
			               
			                // jrxmlFile=request.getRealPath("demo.jrxml");
			            InputStream input = new FileInputStream(new File(jrxmlFile));
			            
			            



			       
			          	       	    	           
			           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
			            String Filename2="Mortgage Loan Arrear Report as on "+To_Date;
			            
			   
			   			 Map parameters = new HashMap();
			   		
				         System.out.println("Filename2--------------------------------"+Filename2);   
			   	
			   			String  realPath = request.getRealPath("/resources/images/");
			   			List<SimpleBranch> list=null;
			   			
			   		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
			   			String Date2=To_Date;
			   			String Branch=BranchName;
			   			String sql="";
			   		 if(!Branch_Type.equalsIgnoreCase("All"))
			   		 {
			   			sql="Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI where Account_no=a.Account_No and EMI.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) ,round(nvl(calc_ML_Product_New(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,NVL(Debit,0)-NVL(Credit,0)+round(nvl(calc_ML_Product_New(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as Closing_Outstanding,(select bname from General_Settings where AO_BRANCH_CODE=substr(a.Account_No,0,3)) as bname,due_date from OL_Master a left join customer b on a.customer_id=b.customer_id left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit'    group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0";
			   		 }
			   		 else
			   		 {
			   			//sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";and a.Account_No=215080004
			   			sql="Select Account_No,Customer_Name,Open_Date,Loan_Amount,Last_Trans_Date,Outstanding,Os_Proj,Pending_Due,EMI,Mobile_No,Last_Repaid_Date,Last_Trans_Amt,Curr_Int,nvl(Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,Branch_Name as BName,Due_Date from (Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt,case when g.Last_Trans_Date=LAST_DAY(ADD_MONTHS('"+Date2+"',-1)) then round((NVL(Debit,0)-NVL(Credit,0))*case when Due_Date>'"+Date2+"' then Interest_Rate else Interest_Rate+2 End*(to_date('"+Date2+"','dd/MM/yyyy')-g.Last_Trans_Date-1)/36500,0) else round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) End as curr_int,Branch_Name,Due_Date,h.Branch_Code from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No left join branch_master h on a.Branch_Code=h.Branch_Code where Scheme_Code='80001'  and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by Branch_Code,Account_No";
			   		 }
			   		
			   		 System.out.println(sql);
			   		 if(!Branch_Type.equalsIgnoreCase("All"))
			   			 list=empDao.getPL_PendinDue(sql,To_Date,BranchName,Bcode);
			   		 else
			   		 {   BranchName="All Branches";
			   			list=empDao.getPL_PendinDue(sql,To_Date,BranchName,Bcode);
			   		 }
			   		 
			   		mp.put("list",list);
			   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
			   		String user_name=empDao.getEmployeeName(user);
			   		
			   		parameters.put("user", user_name);
	             
	             System.out.println("user---------"+user_name);
			   	        parameters.put("itemsJRBean", itemsJRBean); 
			   	    
			   	  parameters.put("Heading", Filename2); 
			   	 if(!em.getFile_Type().equalsIgnoreCase("2")){ 	  
			   	//-11-05-2024--------------------------------------------------------------------------------
			   	parameters.put("Comp_Cin",con.GetCINNO());
			   	parameters.put("Comp_Name",con.GetCompName());
			   	//----------------------------------------------------------------------------------------------
			   	 }
			   	String Branch_Name = null;
	             String Branch_Address = null;
	             String Branch_City = null;
	             String Branch_Pincode = null;
	             String Branch_Phone = null;
	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	             for(SimpleBranch sb:brInfo)
	             {
	            	Branch_Name=sb.getS2();
		             Branch_Address=sb.getS3();
		             Branch_City=sb.getS4();
		             Branch_Pincode=sb.getS5();
		             Branch_Phone=sb.getS6();
		             
		           }
	             parameters.put("Branch_Name", Branch_Name);
	             parameters.put("Branch_Address", Branch_Address);
	             parameters.put("Branch_City", Branch_City);
	             parameters.put("Branch_Pincode", Branch_Pincode);
	             parameters.put("Branch_Phone", Branch_Phone);
	             parameters.put("To_Date", To_Date);
	            
				    
			           JasperReport jasperReport = JasperCompileManager.compileReport(input);
			           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

			           
			          
			           String  reportPath = request.getRealPath("/");
			           parameters.put("To_Date", To_Date);
			           if(em.getFile_Type().equalsIgnoreCase("1"))
			           {
		        	   JRExporter exporter2 = null;
		           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		           		 
		           		 response.setContentType("application/pdf");
		           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		                    exporter2 = new JRPdfExporter();
		                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		                    exporter2.exportReport();
		          
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("2"))
			           {
			        	   
				          
				           response.setContentType("application/xls");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
				           JRXlsExporter exporter = new JRXlsExporter();
				           // JRXlsExporter exporter = new JRXlsExporter();
				            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
				            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				            exporter.exportReport();
				    
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("3"))
			           {
			        	   response.setContentType("application/docx");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
				           JRDocxExporter exporter3 = new JRDocxExporter();
				           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
				           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
				           exporter3.exportReport();
			           }
				       

		         
		           response.getOutputStream().flush();
		           response.getOutputStream().close();
		           
		           
		           //------06-03-2023----------------------------------
			         String File_Type="";
			 	     if(em.getFile_Type().equalsIgnoreCase("1"))
			 	    	File_Type="PDF";
			 	    else if(em.getFile_Type().equalsIgnoreCase("2"))
			 	    	File_Type="EXCEL";
			 	    else if(em.getFile_Type().equalsIgnoreCase("3"))
			 		File_Type="DOCUMENT";
			        
			 //---------------------------------
			 	    	// String user = (String) session.getAttribute("user");
			 			

			 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			 	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

		    
		       } catch (FileNotFoundException e) {
		           e.printStackTrace();
		       } catch (JRException e) {
		           e.printStackTrace();
		       } catch (ClassNotFoundException e) {
		           e.printStackTrace();
		       } catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		       finally {
		           if(conn!=null){
		               try {
						conn.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		           }
		       }
		       }

				  	
 	  			  	
    	  			 @RequestMapping(value = "/JL_OS_Consolidated")
		    		   	public String JL_OSConsolidated_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		    		       	///Session-------------------------------------------------------------
		    		   		 session=request.getSession();
		    		   			String user=(String) session.getAttribute("user");
		    		   			if(user==null)
		    		   			return  "Session_Popup";
		    		   	   //--------------------------------------------------------------------
		    		   			String fun_name="EOM Report";
								String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
				                String Operation_status=dao10.Get_ScalarFun(query, 201);
						 		 	if(!Operation_status.equalsIgnoreCase("Y"))
						 		 		return "/Report_Alert";
						 	 
		    		   			String[] per1=perdao.GetPermission(user, "Business");
		    					
		    					
		      					 String View=null;
		      					 String Save=null;
		      					 String Update=null;
		      					 String Delete=null;
		      					 String Verify2=null;
		      					 String Verify3=null;
		      					 String Verify4=null;
		      					 String Verify5=null;
		      					 String Reports1=null;
		      					 String Button=null;
		      					 String Finger_Print=null;
		      							
		      					 
		      					 
		      					 View=per1[0];
		      					 Save=per1[1];
		      					 Update=per1[2];
		      					 Delete=per1[3];
		      					 Verify2=per1[4];
		      					 Verify3=per1[5];
		      					 Verify4=per1[6];
		      					 Verify5=per1[7];
		      					 Reports1=per1[8];
		      					 Button=per1[9];
		      					 Finger_Print=per1[10];
		      					
		      					 
		      					 System.out.println("View-------------------------"+View);
		      					 System.out.println("Save-------------------------"+Save);
		      					 System.out.println("Update-------------------------"+Update);
		      					 System.out.println("Delete-------------------------"+Delete);
		      					 System.out.println("Verify2-------------------------"+Verify2);
		      					 System.out.println("Verify3-------------------------"+Verify3);
		      					 System.out.println("Verify4-------------------------"+Verify4);
		      					 System.out.println("Verify5-------------------------"+Verify5);
		      					 System.out.println("Reports1-------------------------"+Reports1);
		      					 System.out.println("Button-------------------------"+Button);
		      					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		      					 
		      					 
		      					
		      					
		      					int btn_Verify=1;
		      					int btn_Save=1;
		      					int btn_Delete=1;
		      					int btn_Report=1;
		      					
		      					if (View.equalsIgnoreCase("N"))
		      						return ("/Authorization");
		      					System.out.println("0000000000000000000000");
							    if (Verify2.equalsIgnoreCase("N"))	
							       btn_Verify = 2;
							    System.out.println("111111111111");
							    if (Save.equalsIgnoreCase("N"))
							        btn_Save= 2;
							    System.out.println("222222222222222222222222");
							    if (Update.equalsIgnoreCase("N"))
							        btn_Save=2;
							    if (Reports1.equalsIgnoreCase("N"))
							    	btn_Report=2;
		    		   			
							    String SaveFlag="";
							    if(btn_Report==2)
							    {
								 SaveFlag="Display:none;";
								 System.out.println("1111111111111111111111");
							    }
							 
							 mp.put("ReportFlag", SaveFlag);
		       		   		 Employee em = new Employee();
		       				 mp.put("Employee2", em);
		       				 
		       				
		  			  			List <Simple> branchCode=dao10.getBranchCode();
								System.out.println("Branch_Code=getbranch");
								List<String> branchCodeList=new ArrayList<>();
								for(Simple s:branchCode)
								{
									String s3=s.getS1()+"-"+s.getS2();
									branchCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("BranchCodeList", branchCodeList);
		  			  			//getScheme_List	
								
								List <Simple> sc=JLDao.getScheme_List("JL");
								System.out.println("Branch_Code=getbranch");
								List<String> SchemeCodeList=new ArrayList<>();
								for(Simple s:sc)
								{
									String s3=s.getS2();
									SchemeCodeList.add(s3);
									System.out.println(s3);  
									 
								}
								mp.put("SchemeCodeList", SchemeCodeList);
		    		   			
		    		   		return  "JL_OS_Consolidated";
		    		   	}
    	  			 
    	  			 @RequestMapping(value = "/getJL_OS_Consolidated", params ="Btn_JL_OS_Consolidated", method=RequestMethod.POST)
					   public void Btn_JL_OS_Consolidated(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException, ClassNotFoundException, InstantiationException 
					   { 
							// JL_Master jl=new JL_Master();

						   System.out.println("inside controller-----------------------------------");
						   
							session = request.getSession();
							int DBCode = (int) session.getAttribute("Branch");

String user=(String) session.getAttribute("user");
							String Scheme_Code = "600";
							List <Simple> branchCode=dao10.getBranchCode();
							System.out.println("Branch_Code=getbranch");
							List<String> branchCodeList=new ArrayList<>();
							for(Simple s:branchCode)
							{
								String s3=s.getS1()+"-"+s.getS2();
								branchCodeList.add(s3);
								System.out.println(s3);  
								 
							}
							mp.put("BranchCodeList", branchCodeList);
	  			  				
	  			  			

							String Branch_Type=em.getBranch_Type().substring(0, 3);
						    String BName="All Branches";
							int Bcode = Integer.parseInt(Branch_Type);
							if(em.getBranch_Type().equalsIgnoreCase("200"))
							{
								Bcode=2;
							}
							else
								BName=em.getBranch_Type().substring(4);
								
							
							String Scheme_type=em.getRemarks();
							String Status="All ";
							if(!Scheme_type.equalsIgnoreCase("600"))
							{
								Status=Scheme_type.substring(6);
								Scheme_Code=Scheme_type.substring(0, 5);
								
							}
							else
							{
								
								Status="All Schemes";
							}
                            Status=BName+"-"+Status;
							//String From_Date=em.getDob();
		    				//String To_Date=em.getJoining_Date();
		    				//System.out.println("inside control 2----------="+From_Date+" ="+Scheme_Code);
		    				String Sql_Final = null;
		    				

		    				//String Sql="select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)),mq.closed_date,mq.Account_status,mq.customer_id from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id from jl_master_view where Account_status ='A' and Branch like '%"+Bcode+"%' and Scheme_code like '%"+Scheme_Code+"%' )b on b.account_no=a.account_no)mq)main_qry where scheme_code is not null ";
	    					//10-02-2023
		    				//select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)),mq.closed_date,mq.Account_status,mq.customer_id,mq.rpg_list,mq.purity_list from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id,c.rpg_list,c.purity_list from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id from jl_master_view where Account_status ='A'  )b on b.account_no=a.account_no left join (SELECT Account_no,LISTAGG(nvl(rate_per_gram,0), ', ') WITHIN GROUP (ORDER BY rate_per_gram) as rpg_list,LISTAGG(nvl(purity,0), ', ') WITHIN GROUP (ORDER BY purity) as purity_list FROM Jewel_Details_View  group by Account_no)c on b.Account_no=c.Account_no)mq)main_qry
		    				String Sql="select main_qry.* from (select  mq.branch,(select branch_name from branch_master where branch_code=mq.branch) as bname,mq.Account_no,(select scheme_name from scheme_master where scheme_code=mq.Scheme_code) as scheme_name,mq.Scheme_code,mq.open_date,mq.due_date,mq.Customer_name,mq.no_of_items,mq.gross_weight,mq.net_weight,mq.loan_amount,abs(nvl(mq.cb,0)),mq.closed_date,mq.Account_status,mq.customer_id,mq.rpg_list,mq.purity_list,mq.interest_rate from (select a.*,b.customer_name,b.loan_amount,b.CB,b.branch,b.scheme_code,b.open_date,b.due_date,b.closed_date,b.Account_Status,b.customer_id,c.rpg_list,c.purity_list,b.interest_rate from (Select Account_No,sum(No_of_Items) as No_of_Items,sum(gross_weight) as gross_weight,sum(net_weight) as net_weight from JEWEL_DETAILS_VIEW where Account_no in (select account_no from jl_master_view where account_status='A') group by Account_No)a left join (select branch,Account_no,customer_name,open_date,due_date,loan_amount,-Closing_Balance as CB,scheme_code,closed_date,Account_status,customer_id,interest_rate from jl_master_view where Account_status ='A' and Branch like '%"+Bcode+"%' and Scheme_code like '%"+Scheme_Code+"%'  )b on b.account_no=a.account_no left join (SELECT Account_no,LISTAGG(nvl(rate_per_gram,0), ', ') WITHIN GROUP (ORDER BY rate_per_gram) as rpg_list,LISTAGG(nvl(purity,0), ', ') WITHIN GROUP (ORDER BY purity) as purity_list FROM Jewel_Details_View  group by Account_no)c on b.Account_no=c.Account_no)mq)main_qry where scheme_code is not null ";

		    				Sql_Final = Sql;
	    					
		    				//String user = (String) session.getAttribute("user");
			    		       String temp =  dao10.Get_ScalarFun("Select user_level  from logindetails where username='"+user+"'",201);
			    				String Sql_Audit=" and main_qry.scheme_code not in ('60024','60028') ";
			    		     if(temp.equalsIgnoreCase("R"))
		    				{
		    					Sql_Final = Sql_Final + Sql_Audit;
		    				}

		    				Sql_Final = Sql_Final +"  order by main_qry.Branch,main_qry.Scheme_code,main_qry.Account_No";

	//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
		    				//List<SimpleBranch> list1=null;
		    				List<SimpleBranch> list=null;
		    				//List<SimpleBranch> list3=null;
		    				//List<SimpleBranch> list2=null;
		    				
		    				System.out.println(Sql_Final);
		    				
		    					
		    					list = JLDao.getJL_OS( Sql_Final);
		    								    				
		    				
					
							

						
							// Connecting to the SQL server database
		    					Connection conn = null;

		    				/*	try {
*/
		    						// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
		    						// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
		    						//Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		    						// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

		    						// Loading Jasper Report File from Local file system

		    						// String jrxmlFile =
		    						// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
		    						// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
		    						// String jrxmlFile=request.getRealPath("Report1.jrxml");
		    						// String jrxmlFile =
		    						// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

		    						// String jrxmlFile=request.getRealPath("kk1.jrxml");
		    						String jrxmlFile = request.getRealPath("JL_OS_Register2.jrxml");
		    						if(em.getFile_Type().equalsIgnoreCase("2"))
		    				           {
		    							jrxmlFile = request.getRealPath("JL_OS_Register2_xl.jrxml");
		    				           }
		    						//InputStream input = new FileInputStream(new File(jrxmlFile));
		    						try(InputStream input = new FileInputStream(new File(jrxmlFile)))
		    						{
		    						// String idDyn="101";
		    						// int idDyn=Transfer_Acc_No;
		    						// String StartDate=From_Date;
		    						// String EndDate=To_Date;
		    						// Map parameters = new HashMap();
		    						// parameters=null;
		    						// parameters.put("Accno",idDyn);
		    						// parameters.put("StartDate",StartDate);
		    						// parameters.put("EndDate",EndDate);

		    						/* Convert List to JRBeanCollectionDataSource */
		    						JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
		    								list);
		    						/* Map to hold Jasper report Parameters */
		    						Map<String, Object> parameters = new HashMap<String, Object>();
		    						
		    						
		    						
		    						//------------Get Branch Details----------------------------------
		    			  	             String Branch_Name = null;
		    			  	             String Branch_Address = null;
		    			  	             String Branch_City = null;
		    			  	             String Branch_Pincode = null;
		    			  	             String Branch_Phone = null;
		    			  	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
		    			  	             for(SimpleBranch sb:brInfo)
		    			  	             {
		    			  	            	Branch_Name=sb.getS2();
		    				    	            Branch_Address=sb.getS3();
		    				    	             Branch_City=sb.getS4();
		    				    	             Branch_Pincode=sb.getS5();
		    				    	             Branch_Phone=sb.getS6();
		    				    	             
		    				    	           }
		    			  	             parameters.put("Branch_Name", Branch_Name);
		    			  	             parameters.put("Branch_Address", Branch_Address+","+Branch_City+","+Branch_Pincode+".");
		    			  	            // parameters.put("Branch_City", Branch_City);
		    			  	            // parameters.put("Branch_Pincode", Branch_Pincode);
		    			  	            // parameters.put("Branch_Phone", Branch_Phone);
		    			  	          System.out.println("Branch_Name"+Branch_Name);
		    			  	     


		    						String realPath = request.getRealPath("/resources/images/");
		    						 String user_name=empDao.getEmployeeName(user);
		    						parameters.put("realPath", realPath);

		    						parameters.put("itemsJRBean", itemsJRBean);
		    						 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

		    						Date Current_Date=(Date) session.getAttribute("Current_Date");
		    				    	String Current=sd.format(Current_Date);
		    						parameters.put("Date", Current);
		    						
		    						parameters.put("Status", Status);
		    						
		    						 //10-02-2023
		    			             parameters.put("user", user_name);
		    			             

		    						/* Using compiled version(.jasper) of Jasper report to generate PDF */
		    						// JasperPrint jasperPrint =
		    						// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
		    						// parameters, new JREmptyDataSource());

		    						/* outputStream to create PDF */
		    						// OutputStream outputStream = new FileOutputStream(new
		    						// File(outputFile));
		    						/* Write content to PDF file */
		    						// JasperExportManager.exportReportToPdfStream(jasperPrint,
		    						// outputStream);
		    						// Generating the report

		    						JasperReport jasperReport = JasperCompileManager
		    								.compileReport(input);
		    						JasperPrint jasperPrint = JasperFillManager.fillReport(
		    								jasperReport, parameters, new JREmptyDataSource());

		    						// Exporting the report as a PDF

		    						// JRExporter exporter = null;
		    						// OutputStream ouputStream = response.getOutputStream();

		    						// response.setContentType("application/pdf");
		    						// exporter = new JRPdfExporter();
		    						// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
		    						// jasperPrint);
		    						// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
		    						// ouputStream);
		    			//---------------------------------------------------------------------------------------------------------------------------------------------
		    						//String filename = "JL_OD_Report";

		    						//JasperExportManager.exportReportToPdfStream(jasperPrint,
		    							//	response.getOutputStream());
		    						//JasperExportManager.exportReportToPdfFile(jasperPrint,
		    								//"f:/Reports/" + filename + ".pdf");
		    			//---------------------------------------------------------------------------------------------------------------------------------------------
		    					
		    						String Filename2="JL_OutStanding_Report";
		    				           String  reportPath = request.getRealPath("/");
		    				           if(em.getFile_Type().equalsIgnoreCase("1"))
		    				           {
		    				        	   JRExporter exporter2 = null;
		    				           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		    				           		 
		    				           		 response.setContentType("application/pdf");
		    				           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		    				                    exporter2 = new JRPdfExporter();
		    				                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    				                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		    				                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    				                    exporter2.exportReport();
		    				           }
		    				           else if(em.getFile_Type().equalsIgnoreCase("2"))
		    				           {
		    				        	   
		    					          
		    					           response.setContentType("application/xls");
		    					           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
		    					           JRXlsExporter exporter = new JRXlsExporter();
		    					           // JRXlsExporter exporter = new JRXlsExporter();
		    					            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    					            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
		    					            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

		    					            exporter.exportReport();
		    					    
		    				           }
		    				           else if(em.getFile_Type().equalsIgnoreCase("3"))
		    				           {
		    				        	   response.setContentType("application/docx");
		    					           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
		    					           JRDocxExporter exporter3 = new JRDocxExporter();
		    					           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    					           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
		    					           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    					           exporter3.exportReport();
		    				           }
		    						// JasperExportManager.exportReportToPdfStream(jasperPrint,
		    						// response.getOutputStream());
		    						// JasperExportManager.exportReportToHtmlFile(jasperPrint,
		    						// "/report1.html");
		    						// JasperViewer.viewReport(jasperPrint);
		    						
		    				           
		    				          //------10-02-2023----------------------------------
					  			         String File_Type="";
					  				     if(em.getFile_Type().equalsIgnoreCase("1"))
					  				    	File_Type="PDF";
					  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
					  				    	File_Type="EXCEL";
					  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
					  					File_Type="DOCUMENT";
					  			        
					  	    //---------------------------------
				  			 
		    						
		    							//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		    							dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL OS Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+"')", 201);


		    						response.getOutputStream().flush();
		    						response.getOutputStream().close();

		    					} catch (FileNotFoundException e) {
		    						e.printStackTrace();
		    					} catch (JRException e) {
		    						e.printStackTrace();
		    					} finally {
		    						if (conn != null) {
		    							try {
		    								conn.close();
		    							} catch (SQLException e) {
		    								// TODO Auto-generated catch block
		    								e.printStackTrace();
		    							}
		    						}
		    					}

						} 
    	  			 
    	  			 
    	  			 
    	  			 
    	  			 
    	  			 
    	  			 
    	  			  @RequestMapping(value = "/Daily_CollectionReport/{User_Name}/{Type}", method=RequestMethod.GET)
    	  		    public void DailyCollectionReport(@PathVariable String User_Name,@PathVariable String Type,ModelMap mp,HttpServletRequest request,Model model,HttpSession session,HttpServletResponse response)throws Exception
    	  		    {
    	  				  
    	  				      	  				  Connection conn = null;
    	  				      	  				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
    	  			    					 conn=DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe","dbuser1","dbpwd1");
/*
    	  			try {
    	  				Class.forName("oracle.jdbc.driver.OracleDriver");
    	  				conn = DriverManager.getConnection(
    	  						"jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1",
    	  						"dbpwd1");
    	  				System.out.println("connected....!!");

    	  			}

    	  			catch (Exception e) {
    	  				System.out.println("Exception : " + e.getMessage() + "");
    	  			}*/
    	  			    					System.out.println(" Type : " +Type);
    	  			    					System.out.println("User Name : " +User_Name);
    	  			if (Type.equalsIgnoreCase(null)) {
    	  				System.out.println("Please enter your type.");
    	  			} else {
    	  				int no = Integer.parseInt(Type);
    	  				if(no == 52){
    	  					 String temp[]=User_Name.split("&");
    	  					 /*String devId = request.getParameter("did");//Request.QueryString["did"].ToString();
    	  				        String uid =request.getParameter("uid");
    	  				        String pwd =request.getParameter("pwd");
    	  				        String ss =request.getParameter("app");*/
    	  					 
    	  				        //String et =request.getParameter("pwd");
    	  					 
    	  					 String devId =temp[0];
 	  				        String uid =temp[1];
 	  				        String pwd =temp[2];
 	  				        String ss =temp[3];
 	  					 
    	  					 String encryptedMessage = pwd;
    	  				        int shift = 3;
    	  				    
    	  					
    	  					        StringBuilder decryptedText = new StringBuilder();

    	  					        for (int i = 0; i < encryptedMessage.length(); i++) {
    	  					            char character = encryptedMessage.charAt(i);

    	  					            // Check if the character is a letter
    	  					            if (Character.isLetter(character)) {
    	  					                // Determine whether it's an uppercase or lowercase letter
    	  					                boolean isUpperCase = Character.isUpperCase(character);
    	  					                char base = isUpperCase ? 'A' : 'a';

    	  					                // Apply the reverse Caesar Cipher shift
    	  					                character = (char) ((character - base - shift) % 26 + base);

    	  					                if (character < base) {
    	  					                    character += 26;
    	  					                }
    	  					            }

    	  					            // Append the character to the decrypted text
    	  					            decryptedText.append(character);
    	  					        }

    	  					   pwd=decryptedText.toString();
    	  				       
    	  				      



    	  				        
    	  				        String Uname=null;
    	  						 	String Pword=null;
    	  						 	String output=null;
    	  						 	int f=1;
    	  				    
    	  				     Connection conn1 = null;
    	  				     Statement statement = null;
    	  				     ResultSet rs = null;
    	  				     try
    	  				     {
    	  				     	
    	  				         Class.forName("oracle.jdbc.driver.OracleDriver");
    	  				        conn1 = DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1", "dbpwd1");

    	  				          System.out.println("connected....!!");
    	  				         statement = conn1.createStatement();
       	  				    //  String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='"+devId+"' and User_Type='Tablet'";

    	  				      // sql query to retrieve values from the secified table.
    	  				     // String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='"+devId+"' and User_Type='Tablet'";
        	  				    //  String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where User_Type='Tablet'";
         	  				      String QueryString = "insert into test12 values('"+User_Name+"')";

    	  				         //out.println(QueryString); 
    	  	 rs = statement.executeQuery(QueryString);
    	  	 System.out.println("After Execution");
    	  				      /*if (rs.next() == false)
    	  				      {
    	  				    	  f=0;

    	  				      }*/
    	  				      while (rs.next()) {

    	  				     	 Uname=rs.getString(1);
    	  				     	 Pword=rs.getString(2);
    	  				     	 
    	  				     	 System.out.println("Uname="+Uname+",Pass="+Pword);
    	  				      }
    	  				     if(f!=0)
    	  				      {
    	  	//out.println(uid +" " +Uname);
    	  	//out.println(pwd +" "+Pword);



    	  		if(Uname.equalsIgnoreCase(uid)&& Pword.equalsIgnoreCase(pwd))
    	  				             	output="Y";
    	  				        else
    	  				        	output="N";
    	  				      
    	  				      }
    	  				      else
    	  				      {
    	  				      	output="D";
    	  				      }
    	  				      conn1.close();
    	  				     }
    	  				     catch(Exception e)
    	  				     {
    	  				    	 output="D";
    	  				    	System.out.println("Exception : " + e.getMessage() + "");
    	  				    	 conn.close(); 
    	  				     }
    	  				   
    	  				   System.out.println("AX^="+output+"ER,");

    	  				   
    	  				     response.addHeader("VectorFExp2", "AX^=this is outputfromcontrollerER,");
    	  				      
    	  				   conn.close(); 
    	  				    }
    	  				   
    	  				else {
    	  					System.out.println("Enter Valid Type");
    	  				}
    	  			}
    	  		
    	  		    }
    	  			  
    	  			/*  @RequestMapping(value = { "/Daily_Collection" }, method = { RequestMethod.GET })
    	  		    public void DailyCollection_Page(final ModelMap mp, final HttpServletRequest request, final Model model, final HttpSession session, final HttpServletResponse response) throws Exception {
    	  		        Connection conn = null;
    	  		        Statement statement = null;
    	  		        ResultSet rs = null;
    	  		        Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
    	  		        conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1", "dbpwd1");
    	  		        final String QueryString = "insert into test12 values('This is test')";
    	  		        statement = conn.createStatement();
    	  		        rs = statement.executeQuery(QueryString);
    	  		        conn.close();
    	  		        response.addHeader("VectorFExp3", "AX^=testfrom dailycollectionBase/ER,");
    	  		    }
    	  			 */
    	  			  
    	  			  
    	  			  
    	  			  
    	  			  
    	  			  /*	  @RequestMapping(value = "/Daily_Collection", method=RequestMethod.GET)
      	  		    public void DailyCollection_Page(ModelMap mp,HttpServletRequest request,Model model,HttpSession session,HttpServletResponse response)throws Exception
      	  		    {
      	  				  
      	  				      	  				  *//***Connection conn = null;
      	  				      	  			Statement statement = null;
  	  			    					 	ResultSet rs = null;
  	  			    					 	
      	  				      	  				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
      	  			    					 conn=DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe","dbuser1","dbpwd1");
      	  			    					 	String QueryString = "insert into test12 values('This is test')";
      	  			    					 	//out.println(QueryString); 
      	  			    					  statement = conn.createStatement();
      	  			    					 	rs = statement.executeQuery(QueryString);
      	        	  			    					 	conn.close(); ***//*
      	        	  			    					 	

 	  					 String temp[]=User_Name.split("&");
 	  					 String devId = request.getParameter("did");//Request.QueryString["did"].ToString();
 	  				        String uid =request.getParameter("uid");
 	  				        String pwd =request.getParameter("pwd");
 	  				        String ss =request.getParameter("app");
 	  					 
 	  				        //String et =request.getParameter("pwd");
 	  					 
 	  					 String devId =temp[0];
	  				        String uid =temp[1];
	  				        String pwd =temp[2];
	  				        String ss =temp[3];
	  					 
 	  					 String encryptedMessage = pwd;
 	  				        int shift = 3;
 	  				    
 	  					
 	  					        StringBuilder decryptedText = new StringBuilder();

 	  					        for (int i = 0; i < encryptedMessage.length(); i++) {
 	  					            char character = encryptedMessage.charAt(i);

 	  					            // Check if the character is a letter
 	  					            if (Character.isLetter(character)) {
 	  					                // Determine whether it's an uppercase or lowercase letter
 	  					                boolean isUpperCase = Character.isUpperCase(character);
 	  					                char base = isUpperCase ? 'A' : 'a';

 	  					                // Apply the reverse Caesar Cipher shift
 	  					                character = (char) ((character - base - shift) % 26 + base);

 	  					                if (character < base) {
 	  					                    character += 26;
 	  					                }
 	  					            }

 	  					            // Append the character to the decrypted text
 	  					            decryptedText.append(character);
 	  					        }

 	  					   pwd=decryptedText.toString();
 	  				       
 	  				      



 	  				        
 	  				        String Uname=null;
 	  						 	String Pword=null;
 	  						 	String output=null;
 	  						 	int f=1;
 	  				    
 	  				     Connection conn1 = null;
 	  				     Statement statement = null;
 	  				     ResultSet rs = null;
 	  				     try
 	  				     {
 	  				     	
 	  				         Class.forName("oracle.jdbc.driver.OracleDriver");
 	  				        conn1 = DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1", "dbpwd1");

 	  				          System.out.println("connected....!!");
 	  				         statement = conn1.createStatement();
    	  				    //  String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='"+devId+"' and User_Type='Tablet'";

 	  				      // sql query to retrieve values from the secified table.
 	  				     // String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='"+devId+"' and User_Type='Tablet'";
     	  				    //  String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where User_Type='Tablet'";
      	  				      String QueryString = "insert into test12 values('"+User_Name+"')";

 	  				         //out.println(QueryString); 
 	  	 rs = statement.executeQuery(QueryString);
 	  	 System.out.println("After Execution");
 	  				      if (rs.next() == false)
 	  				      {
 	  				    	  f=0;

 	  				      }
 	  				      while (rs.next()) {

 	  				     	 Uname=rs.getString(1);
 	  				     	 Pword=rs.getString(2);
 	  				     	 
 	  				     	 System.out.println("Uname="+Uname+",Pass="+Pword);
 	  				      }
 	  				     if(f!=0)
 	  				      {
 	  	//out.println(uid +" " +Uname);
 	  	//out.println(pwd +" "+Pword);



 	  		if(Uname.equalsIgnoreCase(uid)&& Pword.equalsIgnoreCase(pwd))
 	  				             	output="Y";
 	  				        else
 	  				        	output="N";
 	  				      
 	  				      }
 	  				      else
 	  				      {
 	  				      	output="D";
 	  				      }
 	  				      conn1.close();
 	  				     }
 	  				     catch(Exception e)
 	  				     {
 	  				    	 output="D";
 	  				    	System.out.println("Exception : " + e.getMessage() + "");
 	  				    	 conn.close(); 
 	  				     }
 	  				   
 	  				   System.out.println("AX^="+output+"ER,");

 	  				   
 	  				     response.addHeader("VectorFExp", "AX^="+output+"ER,");
 	  				      
 	  				   conn.close(); 
 	  				    }
 	  				   
 	  				else {
 	  					System.out.println("Enter Valid Type");
 	  				}


      	        	  			    					  response.addHeader("VectorFExp", "AX^=testER,");
      	  				   
      	  			
      	  		
      	        	  			    					  
      	        	  			    					// Create a trust manager that does not validate certificate chains
      	        	  			    				TrustManager[] trustAllCerts = new TrustManager[] { 
      	        	  			    				    new X509TrustManager() {     
      	        	  			    				        public java.security.cert.X509Certificate[] getAcceptedIssuers() { 
      	        	  			    				            return new X509CertImpl[0];
      	        	  			    				        } 
      	        	  			    				        public void checkClientTrusted( 
      	        	  			    				            java.security.cert.X509Certificate[] certs, String authType) {
      	        	  			    				            } 
      	        	  			    				        public void checkServerTrusted( 
      	        	  			    				            java.security.cert.X509Certificate[] certs, String authType) {
      	        	  			    				        }
      	        	  			    				    } 
      	        	  			    				}; 

      	        	  			    				// Install the all-trusting trust manager
      	        	  			    				try {
      	        	  			    				    SSLContext sc = SSLContext.getInstance("SSL"); 
      	        	  			    				    sc.init(null, trustAllCerts, new java.security.SecureRandom()); 
      	        	  			    				    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
      	        	  			    				} catch (GeneralSecurityException e) {
      	        	  			    				} 
      	        	  			    				// Now you can access an https URL without having the certificate in the truststore
      	        	  			    				try { 
      	        	  			    				    URL url = new URL("https://hostname/index.html"); 
      	      	        	  			    			final URLConnection urlCon = new URL( "https://someserver.yo/resource" ).openConnection();
      	      	        	  			    		( (HttpsURLConnection) urlCon ).setSSLSocketFactory( sc.getSocketFactory() );
      	        	  			    				} catch (MalformedURLException e) {
      	        	  			    				} 				  
      	        	  			    					  
      	        	  			    				
      	        	  			    			 Imports: javax.net.ssl.TrustManager, javax.net.ssl.X509TrustManager try { // Create a trust manager that does not validate certificate chains final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() { @Override public void checkClientTrusted( final X509Certificate[] chain, final String authType ) { } @Override public void checkServerTrusted( final X509Certificate[] chain, final String authType ) { } @Override public X509Certificate[] getAcceptedIssuers() { return null; } } };

      	        	  			    			// Install the all-trusting trust manager
      	        	  			    			final SSLContext sslContext = SSLContext.getInstance( "SSL" );
      	        	  			    			sslContext.init( null, trustAllCerts, new java.security.SecureRandom() );
      	        	  			    			// Create an ssl socket factory with our all-trusting manager
      	        	  			    			final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();


      	        	  			    			// All set up, we can get a resource through https now:
      	        	  			    			final URLConnection urlCon = new URL( "https://someserver.yo/resource" ).openConnection();
      	        	  			    			// Tell the url connection object to use our socket factory which bypasses security checks
      	        	  			    			( (HttpsURLConnection) urlCon ).setSSLSocketFactory( sslSocketFactory );
      	        	  			    				
      	        	  			    					  
      	        	  			    					  
      	        	  			    					String url = "https://corporate.snnl.net/Daily_Collection";
      	        	  			    	            // Perform the network operation here
      	        	  			    	            //url="https://corporate.snnl.net/Daily_Collection/gggg&iuoiu&kkkk&kk3k3k";
      	        	  			    	            URL requestUrl = new URL(url);
      	        	  			    	            HttpURLConnection connection = (HttpURLConnection) requestUrl.openConnection();
      	        	  			    	            TrustManager[] trustManagers = new TrustManager[] { new TrustManager() };

      	        	  			    	            // Create an SSLContext
      	        	  			    	            SSLContext sslContext = SSLContext.getInstance("TLS");
      	        	  			    	            sslContext.init(null, trustManagers, null);

      	        	  			    	            if (connection instanceof HttpsURLConnection) {
      	        	  			    	                HttpsURLConnection httpsConnection = (HttpsURLConnection) connection;

      	        	  			    	                // Set the custom SSL socket factory
      	        	  			    	                httpsConnection.setSSLSocketFactory(sslContext.getSocketFactory());
      	        	  			    	            }
      	        	  			    	            connection.setRequestMethod("GET");
      	        	  			    	            connection.setDoOutput(true);

      	        	  			    	            OutputStream outputStream = connection.getOutputStream();
      	        	  			    	            outputStream.write(requestBody.getBytes());
      	        	  			    	            outputStream.flush();
      	        	  			    	            outputStream.close();

      	        	  			    	            int responseCode = connection.getResponseCode();

      	        	  			    	            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
      	        	  			    	            responseBuilder = new StringBuilder();
      	        	  			    	            String line;
      	        	  			    	            while ((line = reader.readLine()) != null) {
      	        	  			    	                responseBuilder.append(line);
      	        	  			    	            }
      	        	  			    	            reader.close();
      	  		    }*/
    	  			  
    	  			  
    	  			  
    	  			/*  @RequestMapping(value = { "/Daily_Collection/{User_Name}" }, method = { RequestMethod.GET })
    	  		    public void DailyCollection_Path(@PathVariable final String User_Name, final ModelMap mp, final HttpServletRequest request, final Model model, final HttpSession session, final HttpServletResponse response) throws Exception {
    	  		        Connection conn = null;
    	  		        Statement statement = null;
    	  		        ResultSet rs = null;
    	  		        Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
    	  		        conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1", "dbpwd1");
    	  		        final String[] temp = User_Name.split("&");
    	  		        final String devId = temp[0];
    	  		        final String uid = temp[1];
    	  		        final String pwd = temp[2];
    	  		        final String ss = temp[3];
    	  		        String Uname = null;
    	  		        String Pword = null;
    	  		        String output = null;
    	  		        final int f = 1;
    	  		        Connection conn2 = null;
    	  		        Statement statement2 = null;
    	  		        ResultSet rs2 = null;
    	  		        try {
    	  		            Class.forName("oracle.jdbc.driver.OracleDriver");
    	  		            conn2 = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "dbuser1", "dbpwd1");
    	  		            statement2 = conn2.createStatement();
    	  		            final String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='" + devId + "' and User_Type='Tablet'";
    	  		            rs2 = statement2.executeQuery(QueryString);
    	  		            while (rs2.next()) {
    	  		                Uname = rs2.getString(1);
    	  		                Pword = rs2.getString(2);
    	  		            }
    	  		            if (f != 0) {
    	  		                if (Uname.equalsIgnoreCase(uid) && Pword.equalsIgnoreCase(pwd)) {
    	  		                    output = "Y";
    	  		                }
    	  		                else {
    	  		                    output = "N";
    	  		                }
    	  		            }
    	  		            else {
    	  		                output = "D";
    	  		            }
    	  		            conn2.close();
    	  		        }
    	  		        catch (Exception e) {
    	  		            output = "D";
    	  		        }
    	  		        System.out.println("AX^=" + output + "ER,");
    	  		        String token = "NA";
    	  		        if (output.equalsIgnoreCase("Y")) {
    	  		            token = this.empDao.generateToken("PisquareJWT");
    	  		            token=token.replace(".", "#");
    	  		        }
    	  		        response.addHeader("VectorFExp", "AC^=" + output + "ER" + token + ",");
    	  		        final String QueryString2 = "insert into test12 values('" + token + "')";
    	  		        statement = conn.createStatement();
    	  		        rs = statement.executeQuery(QueryString2);
    	  		        conn.close();
    	  		    }*/
    	  		
    	  			 
    	  			 
    	  		/*	 @RequestMapping(value = "/Check_DWT/{token}", method=RequestMethod.GET)
      	  		    public void Check_DWT33(@PathVariable String token,ModelMap mp,HttpServletRequest request,Model model,HttpSession session,HttpServletResponse response)throws Exception
      	  		    {

    	  				 Connection conn = null;
      	  		        Statement statement = null;
      	  		        ResultSet rs = null;
      	  		        Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
      	  		        conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1", "dbpwd1");
      	  		      
    	  				
				     	String devid="Temp";
				     	
				     //	if(!User_Name.equalsIgnoreCase("NA"))
				     	//{
				     	//String token = this.empDao.generateToken("PisquareJWT");
	          		        //response.addHeader("VectorFExp", token);

				     	//	if(empDao.validateToken("eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQaXNxdWFyZUpXVCIsImlhdCI6MTY5NTY0MTI3MSwiZXhwIjoxNjk1NjQ0ODcxfQ.n7gy4QOiXP6xCVlEnCouqVlxbbA52U4knLu0aXitd64"))
				     			//token="eyJhbGciOiJIUzI1NiJ9#eyJzdWIiOiJQaXNxdWFyZUpXVCIsImlhdCI6MTY5NTY0NjczMCwiZXhwIjoxNjk1NjUwMzMwfQ#Wtq7NTpQJhOb4XEyavKO2ZocWinjNRBFZyjYeLFjqO8";
				     	if(empDao.validateToken(token.replaceAll("#", ".")))
				     		{
				     			//devid=empDao.getUsernameFromToken("eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQaXNxdWFyZUpXVCIsImlhdCI6MTY5NTY0MTI3MSwiZXhwIjoxNjk1NjQ0ODcxfQ.n7gy4QOiXP6xCVlEnCouqVlxbbA52U4knLu0aXitd64");
				     			devid=empDao.getUsernameFromToken(token.replaceAll("#", "."));

				     			//devid="True";
				     		}
				     	//}
	    	  	            
	      	  		          		        response.addHeader("VectorFExp", "AC^="+devid+"ER");
	      	  		          		  final String QueryString2 = "select userstring from test12 where rownum=1";
	      	    	  		        statement = conn.createStatement();
	      	    	  		        rs = statement.executeQuery(QueryString2);
	      	    	  		    while (rs.next()) {
	      	    	  		    token = rs.getString(1);
	    	  		             
	    	  		            }
	      	    	  		if(empDao.validateToken(token))
				     		{
				     			//devid=empDao.getUsernameFromToken("eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQaXNxdWFyZUpXVCIsImlhdCI6MTY5NTY0MTI3MSwiZXhwIjoxNjk1NjQ0ODcxfQ.n7gy4QOiXP6xCVlEnCouqVlxbbA52U4knLu0aXitd64");
				     			devid=empDao.getUsernameFromToken(token);

				     			//devid="True";
				     		}
	      	    	  		        conn.close();
    	  			
    	  				
    	  			  //.addHeader("VectorFExp", "AC^=" + devid + "ER" + User_Name + ",");
     	  				  
      	  		    }
    	  			 
    	  			 */
    	  			 
    	  			/*public static String createJWT(String id, String issuer, String subject, long ttlMillis) {
    	  			  
    	  			    //The JWT signature algorithm we will be using to sign the token
    	  			    SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;

    	  			    long nowMillis = System.currentTimeMillis();
    	  			    Date now = new Date(nowMillis);

    	  			    //We will sign our JWT with our ApiKey secret
    	  			    byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(SECRET_KEY);
    	  			    Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());

    	  			    //Let's set the JWT Claims
    	  			    JwtBuilder builder = Jwts.builder().setId(id)
    	  			            .setIssuedAt(now)
    	  			            .setSubject(subject)
    	  			            .setIssuer(issuer)
    	  			            .signWith(signatureAlgorithm, signingKey);
    	  			  
    	  			    //if it has been specified, let's add the expiration
    	  			    if (ttlMillis > 0) {
    	  			        long expMillis = nowMillis + ttlMillis;
    	  			        Date exp = new Date(expMillis);
    	  			        builder.setExpiration(exp);
    	  			    }  
    	  			  
    	  			    //Builds the JWT and serializes it to a compact, URL-safe string
    	  			    return builder.compact();
    	  			}*/
    	  			 
    	  			/*private static String encode(byte[] bytes) 
    	  			{
    	  		        return Base64.getUrlEncoder().withoutPadding().encodeToString(bytes);
    	  	     
    	  			}
    	  			private JSONObject payload = new JSONObject();
    	  		
    	  		payload.put("sub", "User");
    	  		payload.put("aud", "Admin");
    	  		payload.put("exp", 12345);
    	  		*/
    	  		
    	  		
    	  		    
    	  /*		    
    	  			  @RequestMapping(value = "/Daily_Collection/{User_Name}/{Type}", method=RequestMethod.GET)
      	  		    public void DailyCollection(@PathVariable String User_Name,@PathVariable String Type,ModelMap mp,HttpServletRequest request,Model model,HttpSession session,HttpServletResponse response)throws Exception
      	  		    {
      	  				  
      	  				      	  				  Connection conn = null;
      	  				      	  				Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
      	  			    					 conn=DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe","dbuser1","dbpwd1");
  
      	  			try {
      	  				Class.forName("oracle.jdbc.driver.OracleDriver");
      	  				conn = DriverManager.getConnection(
      	  						"jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1",
      	  						"dbpwd1");
      	  				System.out.println("connected....!!");

      	  			}

      	  			catch (Exception e) {
      	  				System.out.println("Exception : " + e.getMessage() + "");
      	  			}
      	  			    					System.out.println(" Type : " +Type);
      	  			    					System.out.println("User Name : " +User_Name);
      	  			if (Type.equalsIgnoreCase(null)) {
      	  				System.out.println("Please enter your type.");
      	  			} else {
      	  				int no = Integer.parseInt(Type);
      	  				if(no == 52){
      	  					 String temp[]=User_Name.split("&");
      	  					 String devId = request.getParameter("did");//Request.QueryString["did"].ToString();
      	  				        String uid =request.getParameter("uid");
      	  				        String pwd =request.getParameter("pwd");
      	  				        String ss =request.getParameter("app");
      	  					 
      	  				        //String et =request.getParameter("pwd");
      	  					 
      	  					 String devId =temp[0];
   	  				        String uid =temp[1];
   	  				        String pwd =temp[2];
   	  				        String ss =temp[3];
   	  					 
      	  					 String encryptedMessage = pwd;
      	  				        int shift = 3;
      	  				    
      	  					
      	  					        StringBuilder decryptedText = new StringBuilder();

      	  					        for (int i = 0; i < encryptedMessage.length(); i++) {
      	  					            char character = encryptedMessage.charAt(i);

      	  					            // Check if the character is a letter
      	  					            if (Character.isLetter(character)) {
      	  					                // Determine whether it's an uppercase or lowercase letter
      	  					                boolean isUpperCase = Character.isUpperCase(character);
      	  					                char base = isUpperCase ? 'A' : 'a';

      	  					                // Apply the reverse Caesar Cipher shift
      	  					                character = (char) ((character - base - shift) % 26 + base);

      	  					                if (character < base) {
      	  					                    character += 26;
      	  					                }
      	  					            }

      	  					            // Append the character to the decrypted text
      	  					            decryptedText.append(character);
      	  					        }

      	  					   pwd=decryptedText.toString();
      	  				       
      	  				      



      	  				        
      	  				        String Uname=null;
      	  						 	String Pword=null;
      	  						 	String output=null;
      	  						 	int f=1;
      	  				    
      	  				     Connection conn1 = null;
      	  				     Statement statement = null;
      	  				     ResultSet rs = null;
      	  				     try
      	  				     {
      	  				     	
      	  				         Class.forName("oracle.jdbc.driver.OracleDriver");
      	  				        conn1 = DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.64:1521:xe", "dbuser1", "dbpwd1");

      	  				          System.out.println("connected....!!");
      	  				         statement = conn1.createStatement();
         	  				    //  String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='"+devId+"' and User_Type='Tablet'";

      	  				      // sql query to retrieve values from the secified table.
      	  				     // String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where DEVICEID='"+devId+"' and User_Type='Tablet'";
          	  				    //  String QueryString = "SELECT USERNAME,PASSWORD from DG_Login_details where User_Type='Tablet'";
           	  				      String QueryString = "insert into test12 values('"+User_Name+"')";

      	  				         //out.println(QueryString); 
      	  	 rs = statement.executeQuery(QueryString);
      	  	 System.out.println("After Execution");
      	  				      if (rs.next() == false)
      	  				      {
      	  				    	  f=0;

      	  				      }
      	  				      while (rs.next()) {

      	  				     	 Uname=rs.getString(1);
      	  				     	 Pword=rs.getString(2);
      	  				     	 
      	  				     	 System.out.println("Uname="+Uname+",Pass="+Pword);
      	  				      }
      	  				     if(f!=0)
      	  				      {
      	  	//out.println(uid +" " +Uname);
      	  	//out.println(pwd +" "+Pword);



      	  		if(Uname.equalsIgnoreCase(uid)&& Pword.equalsIgnoreCase(pwd))
      	  				             	output="Y";
      	  				        else
      	  				        	output="N";
      	  				      
      	  				      }
      	  				      else
      	  				      {
      	  				      	output="D";
      	  				      }
      	  				      conn1.close();
      	  				     }
      	  				     catch(Exception e)
      	  				     {
      	  				    	 output="D";
      	  				    	System.out.println("Exception : " + e.getMessage() + "");
      	  				    	 conn.close(); 
      	  				     }
      	  				   
      	  				   System.out.println("AX^="+output+"ER,");

      	  				   
      	  				     response.addHeader("VectorFExp2", "AX^=this is outputfromcontrollerER,");
      	  				      
      	  				   conn.close(); 
      	  				    }
      	  				   
      	  				else {
      	  					System.out.println("Enter Valid Type");
      	  				}
      	  			}
      	  		
      	  		    }    */
    	  			  
    	  			@RequestMapping(value = "/getShareConsolidated", params ="Btn_Share_consolidated_Report", method=RequestMethod.POST)
					   public void viewShareDepositReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
					   { 
					session=request.getSession();
					int DBCode=(int) session.getAttribute("Branch");
					
					System.out.println("con----------------------------");
					
					 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

					 	Date Current_Date=(Date) session.getAttribute("Current_Date");
						String sys=sd.format(Current_Date);
					

						
						String Branch_Name1="";
	    				String Scheme_name="";
	    				String Account_No="";
	    				String Customer_Name="";
	    				String Open_date="";
	    				String Loan_Amount="";
	    				String CB="";
	    				String pending_days="";
	    				String Interest_Upto="";
	    				String Arrear_Interest="";
	    				String From_Date=em.getTxt_from_date();
	    				String To_Date=em.getTxt_to_date();
	    				
	    				int Bcode=201;
	    			System.out.println("Inside controller---------------------------------------");
	    			    String BranchName="";      
	    			   
					
					Connection conn=null;
			        try {
			       
			           
			      Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			            
			                 String jrxmlFile=null;
			        
			                 	 jrxmlFile=request.getRealPath("Share_Consolidated_Report.jrxml");
			                 
			                // jrxmlFile=request.getRealPath("demo.jrxml");
			            InputStream input = new FileInputStream(new File(jrxmlFile));
			            
			            



			       
			          	       	    	           
			           // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
			            String Filename2="Share Consolidated Report as on "+To_Date;
			            
			   
			   			 Map parameters = new HashMap();
			   		
				         System.out.println("Filename2--------------------------------"+Filename2);   
			   	
			   			String  realPath = request.getRealPath("/resources/images/");
			   			List<SimpleBranch> list=null;
			   			
			   		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
			   			String Date2=To_Date;
			   			String Branch=BranchName;
			   			//String sql="";
			   		 	
			   		// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
			   			
			   		 
			   			 list=empDao.getShare_Consolidated_Report(From_Date,To_Date,Bcode);
			   		
			   		 
			   		mp.put("list",list);
			   		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
			   		
			   	        parameters.put("itemsJRBean", itemsJRBean); 
			   	    
			   	  parameters.put("Heading", Filename2); 
			   	  
			   	  System.out.println("11111-----------------------");
			   	  
			   	 String Branch_Name = null;
	             String Branch_Address = null;
	             String Branch_City = null;
	             String Branch_Pincode = null;
	             String Branch_Phone = null;
	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	             for(SimpleBranch sb:brInfo)
	             {
	            	Branch_Name=sb.getS2();
		             Branch_Address=sb.getS3();
		             Branch_City=sb.getS4();
		             Branch_Pincode=sb.getS5();
		             Branch_Phone=sb.getS6();
		             
		           }
	           System.out.println("222222222-----------------------");
	             parameters.put("Branch_Name", Branch_Name);
	             parameters.put("Branch_Address", Branch_Address);
	             parameters.put("Branch_City", Branch_City);
	             parameters.put("Branch_Pincode", Branch_Pincode);
	             parameters.put("Branch_Phone", Branch_Phone);
	             parameters.put("To_Date", To_Date);
			           JasperReport jasperReport = JasperCompileManager.compileReport(input);
			           JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

			         System.out.println("33333333333333-----------------------");
			          
			           String  reportPath = request.getRealPath("/");
			           parameters.put("To_Date", To_Date);
			         parameters.put("From_Date", From_Date);
			       System.out.println("4444444444-----------------------");   
				          
				           response.setContentType("application/xls");
				           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
				           JRXlsExporter exporter = new JRXlsExporter();
				           // JRXlsExporter exporter = new JRXlsExporter();
				            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
				            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				            exporter.exportReport();
				    
				          System.out.println("5555555555555-----------------------");							       

		         
		           response.getOutputStream().flush();
		           response.getOutputStream().close();
		           
		           
		         
		           String user = (String) session.getAttribute("user");
	 	        	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Share Consolidated Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

	

			 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			 	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);

		    
		       } catch (FileNotFoundException e) {
		           e.printStackTrace();
		         System.out.println("aa-----------------------"+e.getLocalizedMessage());
		       } catch (JRException e) {
		           e.printStackTrace();
		         System.out.println("bb-----------------------"+e.getLocalizedMessage());
		       } catch (ClassNotFoundException e) {
		           e.printStackTrace();
		         System.out.println("cc-----------------------"+e.getLocalizedMessage());
		       } catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				 System.out.println("dd-----------------------"+e.getLocalizedMessage());
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				 System.out.println("ee-----------------------"+e.getLocalizedMessage());
			}
		       finally {
		           if(conn!=null){
		               try {
						conn.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						 System.out.println("ff-----------------------"+e.getLocalizedMessage());
					}
		           }
		       }
		       }



	  			  	




@RequestMapping(value = "/Share_Consolidted")
      		   	public String Share_Consolidted(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
      		       	///Session-------------------------------------------------------------
      		   		 session=request.getSession();
      		   			String user=(String) session.getAttribute("user");
      		   			if(user==null)
      		   			return  "Session_Popup";
      		   	   //--------------------------------------------------------------------
      		   		String fun_name="EOM Report";
					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	                String Operation_status=dao10.Get_ScalarFun(query, 201);
			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
			 		 		return "/Report_Alert";
      		   			
      		   		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

   				 	Date Current_Date=(Date) session.getAttribute("Current_Date");
   					String sys=sd.format(Current_Date);
   				
   					String[] per1=perdao.GetPermission(user, "Recovery");
  					
  					
    					 String View=null;
    					 String Save=null;
    					 String Update=null;
    					 String Delete=null;
    					 String Verify2=null;
    					 String Verify3=null;
    					 String Verify4=null;
    					 String Verify5=null;
    					 String Reports1=null;
    					 String Button=null;
    					 String Finger_Print=null;
    							
    					 
    					 
    					 View=per1[0];
    					 Save=per1[1];
    					 Update=per1[2];
    					 Delete=per1[3];
    					 Verify2=per1[4];
    					 Verify3=per1[5];
    					 Verify4=per1[6];
    					 Verify5=per1[7];
    					 Reports1=per1[8];
    					 Button=per1[9];
    					 Finger_Print=per1[10];
    					
    					 
    					 System.out.println("View-------------------------"+View);
    					 System.out.println("Save-------------------------"+Save);
    					 System.out.println("Update-------------------------"+Update);
    					 System.out.println("Delete-------------------------"+Delete);
    					 System.out.println("Verify2-------------------------"+Verify2);
    					 System.out.println("Verify3-------------------------"+Verify3);
    					 System.out.println("Verify4-------------------------"+Verify4);
    					 System.out.println("Verify5-------------------------"+Verify5);
    					 System.out.println("Reports1-------------------------"+Reports1);
    					 System.out.println("Button-------------------------"+Button);
    					 System.out.println("Finger_Print-------------------------"+Finger_Print);
    					 
    					 
    					
    					
    					int btn_Verify=1;
    					int btn_Save=1;
    					int btn_Delete=1;
    					
    					if (View.equalsIgnoreCase("N"))
    						return ("/Authorization");

   					
      		   			
         		   		 Employee em = new Employee();
         		   		 
         				 mp.put("Employee2", em);
      		   			
      		   		return  "Share_Consolidated";
      		   	}

@RequestMapping(value = "/getJLRecovery", params ="Btn_JL_Recovery", method=RequestMethod.POST)
  public void viewJLRecovery(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
  { 
session=request.getSession();
int DBCode=(int) session.getAttribute("Branch");

System.out.println("con----------------------------");

SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

	Date Current_Date=(Date) session.getAttribute("Current_Date");
	String sys=sd.format(Current_Date);


String user=(String) session.getAttribute("user");
	
	String Branch_Name1="";
	String Scheme_name="";
	String Account_No="";
	String Customer_Name="";
	String Open_date="";
	String Loan_Amount="";
	String CB="";
	String pending_days="";
	String Interest_Upto="";
	String Arrear_Interest="";
	String From_Date=em.getTxt_from_date();
	String To_Date=em.getTxt_to_date();
	
	int Bcode=201;
System.out.println("Inside controller---------------------------------------");
   String BranchName="";      
  

Connection conn=null;
try {

  
Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
   
        String jrxmlFile=null;

        	 jrxmlFile=request.getRealPath("JL_Recovery_xl_new.jrxml");
        
       // jrxmlFile=request.getRealPath("demo.jrxml");
   InputStream input = new FileInputStream(new File(jrxmlFile));
   
   




 	       	    	           
  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
   String Filename2="JL Recovery Report as on "+To_Date;
   

		 Map parameters = new HashMap();
	
    System.out.println("Filename2--------------------------------"+Filename2);   

		String  realPath = request.getRealPath("/resources/images/");
		List<SimpleBranch> list=null;
		
	//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
		String Date2=To_Date;
		String Branch=BranchName;
		//String sql="";
	 	
	// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
		
	 
		 list=empDao.getJL_Recovery(From_Date,To_Date,Bcode);
	
	 
	mp.put("list",list);
	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
	
      parameters.put("itemsJRBean", itemsJRBean); 
  
parameters.put("Heading", Filename2); 

System.out.println("11111-----------------------");

String Branch_Name = null;
String Branch_Address = null;
String Branch_City = null;
String Branch_Pincode = null;
String Branch_Phone = null;
List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
for(SimpleBranch sb:brInfo)
{
Branch_Name=sb.getS2();
Branch_Address=sb.getS3();
Branch_City=sb.getS4();
Branch_Pincode=sb.getS5();
Branch_Phone=sb.getS6();

}
System.out.println("222222222-----------------------");
parameters.put("Branch_Name", Branch_Name);
parameters.put("Branch_Address", Branch_Address);
parameters.put("Branch_City", Branch_City);
parameters.put("Branch_Pincode", Branch_Pincode);
parameters.put("Branch_Phone", Branch_Phone);
parameters.put("To_Date", To_Date);
parameters.put("user", user);
  JasperReport jasperReport = JasperCompileManager.compileReport(input);
  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

System.out.println("33333333333333-----------------------");
 
  String  reportPath = request.getRealPath("/");
  parameters.put("To_Date", To_Date);
parameters.put("From_Date", From_Date);
System.out.println("4444444444-----------------------");   
     
      response.setContentType("application/xls");
      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
      JRXlsExporter exporter = new JRXlsExporter();
      // JRXlsExporter exporter = new JRXlsExporter();
       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

       exporter.exportReport();

     System.out.println("5555555555555-----------------------");							       

  	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Recovery Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

response.getOutputStream().flush();
response.getOutputStream().close();



//String user = (String) session.getAttribute("user");
	

//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


} catch (FileNotFoundException e) {
e.printStackTrace();
System.out.println("aa-----------------------"+e.getLocalizedMessage());
} catch (JRException e) {
e.printStackTrace();
System.out.println("bb-----------------------"+e.getLocalizedMessage());
} catch (ClassNotFoundException e) {
e.printStackTrace();
System.out.println("cc-----------------------"+e.getLocalizedMessage());
} catch (InstantiationException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("dd-----------------------"+e.getLocalizedMessage());
} catch (IllegalAccessException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("ee-----------------------"+e.getLocalizedMessage());
}
finally {
if(conn!=null){
  try {
	conn.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	 System.out.println("ff-----------------------"+e.getLocalizedMessage());
}
}
}
}

	
	@RequestMapping(value = "/getJLRecovery", params ="Btn_DL_Recovery", method=RequestMethod.POST)
   public void viewJLRecovery_DL(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
   { 
session=request.getSession();
int DBCode=(int) session.getAttribute("Branch");
String user = (String) session.getAttribute("user");

System.out.println("con----------------------------");

 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

 	Date Current_Date=(Date) session.getAttribute("Current_Date");
	String sys=sd.format(Current_Date);


	
	String Branch_Name1="";
	String Scheme_name="";
	String Account_No="";
	String Customer_Name="";
	String Open_date="";
	String Loan_Amount="";
	String CB="";
	String pending_days="";
	String Interest_Upto="";
	String Arrear_Interest="";
	String From_Date=em.getTxt_from_date();
	String To_Date=em.getTxt_to_date();
	
	int Bcode=201;
System.out.println("Inside controller---------------------------------------");
    String BranchName="";      
   

Connection conn=null;
try {

   
Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
    
         String jrxmlFile=null;

         	 jrxmlFile=request.getRealPath("DL_Recovery_xl.jrxml");
         
        // jrxmlFile=request.getRealPath("demo.jrxml");
    InputStream input = new FileInputStream(new File(jrxmlFile));
    
    




  	       	    	           
   // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
    String Filename2="DL Recovery Report as on "+To_Date;
    

		 Map parameters = new HashMap();
	
     System.out.println("Filename2--------------------------------"+Filename2);   

		String  realPath = request.getRealPath("/resources/images/");
		List<SimpleBranch> list=null;
		
	//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
		String Date2=To_Date;
		String Branch=BranchName;
		//String sql="";
	 	
	// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
		
	 
		 list=empDao.getDL_Recovery(From_Date,To_Date,Bcode);
	
	 
	mp.put("list",list);
	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
	
       parameters.put("itemsJRBean", itemsJRBean); 
   
 parameters.put("Heading", Filename2); 
 
 System.out.println("11111-----------------------");
 
String Branch_Name = null;
String Branch_Address = null;
String Branch_City = null;
String Branch_Pincode = null;
String Branch_Phone = null;
List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
for(SimpleBranch sb:brInfo)
{
Branch_Name=sb.getS2();
 Branch_Address=sb.getS3();
 Branch_City=sb.getS4();
 Branch_Pincode=sb.getS5();
 Branch_Phone=sb.getS6();
 
}
System.out.println("222222222-----------------------");
parameters.put("Branch_Name", Branch_Name);
parameters.put("Branch_Address", Branch_Address);
parameters.put("Branch_City", Branch_City);
parameters.put("Branch_Pincode", Branch_Pincode);
parameters.put("Branch_Phone", Branch_Phone);
parameters.put("To_Date", To_Date);
   JasperReport jasperReport = JasperCompileManager.compileReport(input);
   JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

 System.out.println("33333333333333-----------------------");
  
   String  reportPath = request.getRealPath("/");
   parameters.put("To_Date", To_Date);
 parameters.put("From_Date", From_Date);
 parameters.put("user", user);
System.out.println("4444444444-----------------------");   
      
       response.setContentType("application/xls");
       response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
       JRXlsExporter exporter = new JRXlsExporter();
       // JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
        exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

        exporter.exportReport();

      System.out.println("5555555555555-----------------------");							       

    	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('DL Recovery Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

response.getOutputStream().flush();
response.getOutputStream().close();



//String user = (String) session.getAttribute("user");
		

//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


} catch (FileNotFoundException e) {
e.printStackTrace();
System.out.println("aa-----------------------"+e.getLocalizedMessage());
} catch (JRException e) {
e.printStackTrace();
System.out.println("bb-----------------------"+e.getLocalizedMessage());
} catch (ClassNotFoundException e) {
e.printStackTrace();
System.out.println("cc-----------------------"+e.getLocalizedMessage());
} catch (InstantiationException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("dd-----------------------"+e.getLocalizedMessage());
} catch (IllegalAccessException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("ee-----------------------"+e.getLocalizedMessage());
}
finally {
if(conn!=null){
   try {
	conn.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	 System.out.println("ff-----------------------"+e.getLocalizedMessage());
}
}
}
}


	@RequestMapping(value = "/getJLRecovery", params ="Btn_SL_Recovery", method=RequestMethod.POST)
	   public void viewJLRecovery_SL(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
	   { 
	session=request.getSession();
	int DBCode=(int) session.getAttribute("Branch");
	String user = (String) session.getAttribute("user");

	System.out.println("con----------------------------");
	
	 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

	 	Date Current_Date=(Date) session.getAttribute("Current_Date");
		String sys=sd.format(Current_Date);
	

		
		String Branch_Name1="";
		String Scheme_name="";
		String Account_No="";
		String Customer_Name="";
		String Open_date="";
		String Loan_Amount="";
		String CB="";
		String pending_days="";
		String Interest_Upto="";
		String Arrear_Interest="";
		String From_Date=em.getTxt_from_date();
		String To_Date=em.getTxt_to_date();
		
		int Bcode=201;
	System.out.println("Inside controller---------------------------------------");
	    String BranchName="";      
	   
	
	Connection conn=null;
 try {

    
Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
     
          String jrxmlFile=null;
 
          	 jrxmlFile=request.getRealPath("SL_Recovery_xl.jrxml");
          
         // jrxmlFile=request.getRealPath("demo.jrxml");
     InputStream input = new FileInputStream(new File(jrxmlFile));
     
     




   	       	    	           
    // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
     String Filename2="SL Recovery Report as on "+To_Date;
     

		 Map parameters = new HashMap();
	
      System.out.println("Filename2--------------------------------"+Filename2);   

		String  realPath = request.getRealPath("/resources/images/");
		List<SimpleBranch> list=null;
		
	//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
		String Date2=To_Date;
		String Branch=BranchName;
		//String sql="";
	 	
	// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
		
	 
		 list=empDao.getSL_Recovery(From_Date,To_Date,Bcode);
	
	 
	mp.put("list",list);
	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
	
        parameters.put("itemsJRBean", itemsJRBean); 
    
  parameters.put("Heading", Filename2); 
  
  System.out.println("11111-----------------------");
  
 String Branch_Name = null;
String Branch_Address = null;
String Branch_City = null;
String Branch_Pincode = null;
String Branch_Phone = null;
List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
for(SimpleBranch sb:brInfo)
{
	Branch_Name=sb.getS2();
  Branch_Address=sb.getS3();
  Branch_City=sb.getS4();
  Branch_Pincode=sb.getS5();
  Branch_Phone=sb.getS6();
  
}
System.out.println("222222222-----------------------");
parameters.put("Branch_Name", Branch_Name);
parameters.put("Branch_Address", Branch_Address);
parameters.put("Branch_City", Branch_City);
parameters.put("Branch_Pincode", Branch_Pincode);
parameters.put("Branch_Phone", Branch_Phone);
parameters.put("To_Date", To_Date);
parameters.put("user", user);
    JasperReport jasperReport = JasperCompileManager.compileReport(input);
    JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

  System.out.println("33333333333333-----------------------");
   
    String  reportPath = request.getRealPath("/");
    parameters.put("To_Date", To_Date);
  parameters.put("From_Date", From_Date);
System.out.println("4444444444-----------------------");   
       
        response.setContentType("application/xls");
        response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
        JRXlsExporter exporter = new JRXlsExporter();
        // JRXlsExporter exporter = new JRXlsExporter();
         exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
         exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
         exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

         exporter.exportReport();
 
       System.out.println("5555555555555-----------------------");							       
     	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('SL Recovery Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);


response.getOutputStream().flush();
response.getOutputStream().close();



//String user = (String) session.getAttribute("user");
		

//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


} catch (FileNotFoundException e) {
e.printStackTrace();
System.out.println("aa-----------------------"+e.getLocalizedMessage());
} catch (JRException e) {
e.printStackTrace();
System.out.println("bb-----------------------"+e.getLocalizedMessage());
} catch (ClassNotFoundException e) {
e.printStackTrace();
System.out.println("cc-----------------------"+e.getLocalizedMessage());
} catch (InstantiationException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("dd-----------------------"+e.getLocalizedMessage());
} catch (IllegalAccessException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("ee-----------------------"+e.getLocalizedMessage());
}
finally {
if(conn!=null){
    try {
		conn.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		 System.out.println("ff-----------------------"+e.getLocalizedMessage());
	}
}
}
}



	@RequestMapping(value = "/getJLRecovery", params ="Btn_ML_Recovery", method=RequestMethod.POST)
 public void viewJLRecovery_ML(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
 { 
session=request.getSession();
int DBCode=(int) session.getAttribute("Branch");
String user = (String) session.getAttribute("user");

System.out.println("con----------------------------");

SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

	Date Current_Date=(Date) session.getAttribute("Current_Date");
	String sys=sd.format(Current_Date);


	
	String Branch_Name1="";
	String Scheme_name="";
	String Account_No="";
	String Customer_Name="";
	String Open_date="";
	String Loan_Amount="";
	String CB="";
	String pending_days="";
	String Interest_Upto="";
	String Arrear_Interest="";
	String From_Date=em.getTxt_from_date();
	String To_Date=em.getTxt_to_date();
	
	int Bcode=201;
System.out.println("Inside controller---------------------------------------");
  String BranchName="";      
 

Connection conn=null;
try {

 
Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
  
       String jrxmlFile=null;

       	 jrxmlFile=request.getRealPath("ML_Recovery_xl.jrxml");
       
      // jrxmlFile=request.getRealPath("demo.jrxml");
  InputStream input = new FileInputStream(new File(jrxmlFile));
  
  




	       	    	           
 // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
  String Filename2="ML Recovery Report as on "+To_Date;
  

		 Map parameters = new HashMap();
	
   System.out.println("Filename2--------------------------------"+Filename2);   

		String  realPath = request.getRealPath("/resources/images/");
		List<SimpleBranch> list=null;
		
	//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
		String Date2=To_Date;
		String Branch=BranchName;
		//String sql="";
	 	
	// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
		
	 
		 list=empDao.getML_Recovery(From_Date,To_Date,Bcode);
	
	 
	mp.put("list",list);
	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
	
     parameters.put("itemsJRBean", itemsJRBean); 
 
parameters.put("Heading", Filename2); 

System.out.println("11111-----------------------");

String Branch_Name = null;
String Branch_Address = null;
String Branch_City = null;
String Branch_Pincode = null;
String Branch_Phone = null;
List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
for(SimpleBranch sb:brInfo)
{
Branch_Name=sb.getS2();
Branch_Address=sb.getS3();
Branch_City=sb.getS4();
Branch_Pincode=sb.getS5();
Branch_Phone=sb.getS6();

}
System.out.println("222222222-----------------------");
parameters.put("Branch_Name", Branch_Name);
parameters.put("Branch_Address", Branch_Address);
parameters.put("Branch_City", Branch_City);
parameters.put("Branch_Pincode", Branch_Pincode);
parameters.put("Branch_Phone", Branch_Phone);
parameters.put("To_Date", To_Date);
parameters.put("user", user);

 JasperReport jasperReport = JasperCompileManager.compileReport(input);
 JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

System.out.println("33333333333333-----------------------");

 String  reportPath = request.getRealPath("/");
 parameters.put("To_Date", To_Date);
parameters.put("From_Date", From_Date);
System.out.println("4444444444-----------------------");   
    
     response.setContentType("application/xls");
     response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
     JRXlsExporter exporter = new JRXlsExporter();
     // JRXlsExporter exporter = new JRXlsExporter();
      exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
      exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
      exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

      exporter.exportReport();

    System.out.println("5555555555555-----------------------");							       

  	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Recovery Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

response.getOutputStream().flush();
response.getOutputStream().close();



	

//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


} catch (FileNotFoundException e) {
e.printStackTrace();
System.out.println("aa-----------------------"+e.getLocalizedMessage());
} catch (JRException e) {
e.printStackTrace();
System.out.println("bb-----------------------"+e.getLocalizedMessage());
} catch (ClassNotFoundException e) {
e.printStackTrace();
System.out.println("cc-----------------------"+e.getLocalizedMessage());
} catch (InstantiationException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("dd-----------------------"+e.getLocalizedMessage());
} catch (IllegalAccessException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("ee-----------------------"+e.getLocalizedMessage());
}
finally {
if(conn!=null){
 try {
	conn.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	 System.out.println("ff-----------------------"+e.getLocalizedMessage());
}
}
}
}



	@RequestMapping(value = "/getJLRecovery", params ="Btn_RL_Recovery", method=RequestMethod.POST)
  public void viewJLRecovery_RL(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
  { 
session=request.getSession();
int DBCode=(int) session.getAttribute("Branch");
String user = (String) session.getAttribute("user");

System.out.println("con----------------------------");

SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

	Date Current_Date=(Date) session.getAttribute("Current_Date");
	String sys=sd.format(Current_Date);


	
	String Branch_Name1="";
	String Scheme_name="";
	String Account_No="";
	String Customer_Name="";
	String Open_date="";
	String Loan_Amount="";
	String CB="";
	String pending_days="";
	String Interest_Upto="";
	String Arrear_Interest="";
	String From_Date=em.getTxt_from_date();
	String To_Date=em.getTxt_to_date();
	
	int Bcode=201;
System.out.println("Inside controller---------------------------------------");
   String BranchName="";      
  

Connection conn=null;
try {

  
Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
   
        String jrxmlFile=null;

        	 jrxmlFile=request.getRealPath("RL_Recovery_xl.jrxml");
        
       // jrxmlFile=request.getRealPath("demo.jrxml");
   InputStream input = new FileInputStream(new File(jrxmlFile));
   
   




 	       	    	           
  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
   String Filename2="RL Recovery Report as on "+To_Date;
   

		 Map parameters = new HashMap();
	
    System.out.println("Filename2--------------------------------"+Filename2);   

		String  realPath = request.getRealPath("/resources/images/");
		List<SimpleBranch> list=null;
		
	//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
		String Date2=To_Date;
		String Branch=BranchName;
		//String sql="";
	 	
	// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
		
	 
		 list=empDao.getRL_Recovery(From_Date,To_Date,Bcode);
	
	 
	mp.put("list",list);
	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
	
      parameters.put("itemsJRBean", itemsJRBean); 
  
parameters.put("Heading", Filename2); 

System.out.println("11111-----------------------");

String Branch_Name = null;
String Branch_Address = null;
String Branch_City = null;
String Branch_Pincode = null;
String Branch_Phone = null;
List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
for(SimpleBranch sb:brInfo)
{
Branch_Name=sb.getS2();
Branch_Address=sb.getS3();
Branch_City=sb.getS4();
Branch_Pincode=sb.getS5();
Branch_Phone=sb.getS6();

}
System.out.println("222222222-----------------------");
parameters.put("Branch_Name", Branch_Name);
parameters.put("Branch_Address", Branch_Address);
parameters.put("Branch_City", Branch_City);
parameters.put("Branch_Pincode", Branch_Pincode);
parameters.put("Branch_Phone", Branch_Phone);
parameters.put("To_Date", To_Date);
parameters.put("user", user);

  JasperReport jasperReport = JasperCompileManager.compileReport(input);
  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

System.out.println("33333333333333-----------------------");
 
  String  reportPath = request.getRealPath("/");
  parameters.put("To_Date", To_Date);
parameters.put("From_Date", From_Date);
System.out.println("4444444444-----------------------");   
     
      response.setContentType("application/xls");
      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
      JRXlsExporter exporter = new JRXlsExporter();
      // JRXlsExporter exporter = new JRXlsExporter();
       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

       exporter.exportReport();

     System.out.println("5555555555555-----------------------");							       

   	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('RL Recovery Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

response.getOutputStream().flush();
response.getOutputStream().close();



//String user = (String) session.getAttribute("user");
	

//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


} catch (FileNotFoundException e) {
e.printStackTrace();
System.out.println("aa-----------------------"+e.getLocalizedMessage());
} catch (JRException e) {
e.printStackTrace();
System.out.println("bb-----------------------"+e.getLocalizedMessage());
} catch (ClassNotFoundException e) {
e.printStackTrace();
System.out.println("cc-----------------------"+e.getLocalizedMessage());
} catch (InstantiationException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("dd-----------------------"+e.getLocalizedMessage());
} catch (IllegalAccessException e) {
// TODO Auto-generated catch block
e.printStackTrace();
System.out.println("ee-----------------------"+e.getLocalizedMessage());
}
finally {
if(conn!=null){
  try {
	conn.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	 System.out.println("ff-----------------------"+e.getLocalizedMessage());
}
}
}
}


	
	 @RequestMapping(value = "/GL_Report")
		public String View_GL_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
	    	///Session-------------------------------------------------------------
			 session=request.getSession();
				String user=(String) session.getAttribute("user");
				if(user==null)
				return  "Session_Popup";
		   //--------------------------------------------------------------------
				String fun_name="EOM Report";
	  			String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
	  	        String Operation_status=dao10.Get_ScalarFun(query, 201);
	  	 		 	if(!Operation_status.equalsIgnoreCase("Y"))
	  	 		 		return "/Report_Alert";
	  		
				
				String[] per1=perdao.GetPermission(user, "Recovery");
				
				
				 String View=null;
				 String Save=null;
				 String Update=null;
				 String Delete=null;
				 String Verify2=null;
				 String Verify3=null;
				 String Verify4=null;
				 String Verify5=null;
				 String Reports1=null;
				 String Button=null;
				 String Finger_Print=null;
						
				 
				 
				 View=per1[0];
				 Save=per1[1];
				 Update=per1[2];
				 Delete=per1[3];
				 Verify2=per1[4];
				 Verify3=per1[5];
				 Verify4=per1[6];
				 Verify5=per1[7];
				 Reports1=per1[8];
				 Button=per1[9];
				 Finger_Print=per1[10];
				
				 
				 System.out.println("View-------------------------"+View);
				 System.out.println("Save-------------------------"+Save);
				 System.out.println("Update-------------------------"+Update);
				 System.out.println("Delete-------------------------"+Delete);
				 System.out.println("Verify2-------------------------"+Verify2);
				 System.out.println("Verify3-------------------------"+Verify3);
				 System.out.println("Verify4-------------------------"+Verify4);
				 System.out.println("Verify5-------------------------"+Verify5);
				 System.out.println("Reports1-------------------------"+Reports1);
				 System.out.println("Button-------------------------"+Button);
				 System.out.println("Finger_Print-------------------------"+Finger_Print);
				 
				 
				
				int btn_Verify=1;
				int btn_Save=1;
				int btn_Delete=1;
				
				if (View.equalsIgnoreCase("N"))
					return ("/Authorization"); 
				
				 List <Simple> branchCode=dao10.getBranchCode();
					System.out.println("Branch_Code=getbranch");
					List<String> branchCodeList=new ArrayList<>();
					for(Simple s:branchCode)
					{
						String s3=s.getS1()+"-"+s.getS2();
						branchCodeList.add(s3);
						System.out.println(s3);  
						 
					}
					mp.put("BranchCodeList", branchCodeList);
					
					List <Simple> glcode=empDao.getGLCode();
					//System.out.println("Branch_Code=getbranch");
					List<String> glcodelist=new ArrayList<>();
					for(Simple s:glcode)
					{
						String s3=s.getS1()+"-"+s.getS2();
						glcodelist.add(s3);
						System.out.println(s3);  
						 
					}
					mp.put("GLCode_List", glcodelist);
					
					
					List <Simple> glcode2=empDao.getBranchGLCode();
						//System.out.println("Branch_Code=getbranch");
						List<String> glcodelist2=new ArrayList<>();
						for(Simple s:glcode2)
						{
							String s3=s.getS1()+"-"+s.getS2();
							glcodelist2.add(s3);
							System.out.println(s3);  
							 
						}
						mp.put("GLCode_List2", glcodelist2);
				
				 Employee em = new Employee();
				 mp.put("Employee2", em);
				 

				
			return  "GL_Report_New";
		}
	    

     	 
	  @RequestMapping(value = "/getGLReport", params ="Btn_GL_Report", method=RequestMethod.POST)
	  public void getGLReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
	  { 
	session=request.getSession();
	int DBCode=(int) session.getAttribute("Branch");

	System.out.println("con----------------------------");

	SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

		Date Current_Date=(Date) session.getAttribute("Current_Date");
		String sys=sd.format(Current_Date);


	String user=(String) session.getAttribute("user");
		
		String Branch_Name1="";
		String Scheme_name="";
		String Account_No="";
		String Customer_Name="";
		String Open_date="";
		String Loan_Amount="";
		String CB="";
		String pending_days="";
		String Interest_Upto="";
		String Arrear_Interest="";
		String From_Date=em.getDob();
		String To_Date=em.getJoining_Date();
		String GL_Code1=em.getGL_Code().substring(0, 5);
		String BCode=em.getBranch_Type().substring(0, 3);
		String Branch=null;
		String GL_Code=null;
		if(BCode.equalsIgnoreCase("200")){
			Branch="%";
		}
		else{
			Branch=BCode;
		}
		
		if(GL_Code1.equalsIgnoreCase("20000")){
			GL_Code="%";
		}
		else{
			GL_Code=GL_Code1;
		}
		
		System.out.println("BCode--------------------------"+BCode);
		System.out.println("GL_Code--------------------------"+GL_Code);
		int Bcode=201;
	System.out.println("Inside controller---------------------------------------");
	   String BranchName="";      
	  

	Connection conn=null;
	try {

	  
	Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
	   
	        String jrxmlFile=null;

	        	 jrxmlFile=request.getRealPath("GL_Report_xl.jrxml");
	        
	       // jrxmlFile=request.getRealPath("demo.jrxml");
	   InputStream input = new FileInputStream(new File(jrxmlFile));
	   
	   




	 	       	    	           
	  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
	   String Filename2="GL Report as on "+To_Date;
	   

			 Map parameters = new HashMap();
		
	    System.out.println("Filename2--------------------------------"+Filename2);   

			String  realPath = request.getRealPath("/resources/images/");
			List<SimpleBranch> list=null;
			
		//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
			String Date2=To_Date;
			String Branch_Code=BranchName;
			//String sql="";
		 	
		// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
			if(GL_Code1.equalsIgnoreCase("20000")){
				list=empDao.getGL_ReportAll(From_Date,To_Date,Branch,Bcode);
			}
			else{
			 list=empDao.getGL_Report(From_Date,To_Date,GL_Code,Branch,Bcode);
			}
			
			
			
		 
		mp.put("list",list);
		JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
		
	      parameters.put("itemsJRBean", itemsJRBean); 
	  
	parameters.put("Heading", Filename2); 

	System.out.println("11111-----------------------");

	String Branch_Name = null;
	String Branch_Address = null;
	String Branch_City = null;
	String Branch_Pincode = null;
	String Branch_Phone = null;
	List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	for(SimpleBranch sb:brInfo)
	{
	Branch_Name=sb.getS2();
	Branch_Address=sb.getS3();
	Branch_City=sb.getS4();
	Branch_Pincode=sb.getS5();
	Branch_Phone=sb.getS6();

	}
	System.out.println("222222222-----------------------");
	parameters.put("Branch_Name", Branch_Name);
	parameters.put("Branch_Address", Branch_Address);
	parameters.put("Branch_City", Branch_City);
	parameters.put("Branch_Pincode", Branch_Pincode);
	parameters.put("Branch_Phone", Branch_Phone);
	parameters.put("To_Date", To_Date);
	parameters.put("user", user);
	  JasperReport jasperReport = JasperCompileManager.compileReport(input);
	  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

	System.out.println("33333333333333-----------------------");
	 
	  String  reportPath = request.getRealPath("/");
	  parameters.put("To_Date", To_Date);
	parameters.put("From_Date", From_Date);
	System.out.println("4444444444-----------------------");   
	     
	      response.setContentType("application/xls");
	      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
	      JRXlsExporter exporter = new JRXlsExporter();
	      // JRXlsExporter exporter = new JRXlsExporter();
	       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
	       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
	       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

	       exporter.exportReport();

	     System.out.println("5555555555555-----------------------");							       

	   	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('GL Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

	response.getOutputStream().flush();
	response.getOutputStream().close();



	//String user = (String) session.getAttribute("user");
		

	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
	//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


	} catch (FileNotFoundException e) {
	e.printStackTrace();
	System.out.println("aa-----------------------"+e.getLocalizedMessage());
	} catch (JRException e) {
	e.printStackTrace();
	System.out.println("bb-----------------------"+e.getLocalizedMessage());
	} catch (ClassNotFoundException e) {
	e.printStackTrace();
	System.out.println("cc-----------------------"+e.getLocalizedMessage());
	} catch (InstantiationException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	System.out.println("dd-----------------------"+e.getLocalizedMessage());
	} catch (IllegalAccessException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
	System.out.println("ee-----------------------"+e.getLocalizedMessage());
	}
	finally {
	if(conn!=null){
	  try {
		conn.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		 System.out.println("ff-----------------------"+e.getLocalizedMessage());
	}
	}
	}
	  }



		@RequestMapping(value = "/getFD_Consolidated", params ="Btn_FD_Consolidated2", method=RequestMethod.POST)
		   public void Btn_SKBranchwise_Incentive_Report(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
		   { 

				
			   System.out.println("inside controller-----------------------------------");
			   
				session = request.getSession();
				int DBCode = (int) session.getAttribute("Branch");

				String Scheme_Code = "30";
				
				String From_Date=em.getDob();
				String To_Date=em.getJoining_Date();
				
				System.out.println("inside control 2----------");
				

				List<SimpleBranch> list=null;
				
				String Status=null;
				
				System.out.println("inside control 2----------"+em.getFD_Type().toString());
				
				if(em.getFD_Type().equalsIgnoreCase("A")){
				list = JLDao.getSKFD_Monthly_Report(
						From_Date, To_Date,"Fresh",DBCode);
				}
				else if(em.getFD_Type().equalsIgnoreCase("R")){
					list = JLDao.getSKFD_Monthly_Report(
							From_Date, To_Date,"Renewal",DBCode);
				}
				else{
					
				}
				
			/*	if(bm.getFD_Type().equalsIgnoreCase("A")){
					System.out.println("list1_1------------------");
					
					list = jldao.getFD_Monthly_Report_Active_new(
							From_Date, To_Date,
							Scheme_Code, DBCode);
					Status ="Active";
					 
					 System.out.println("list1------------------");
					
					}
				else if(bm.getFD_Type().equalsIgnoreCase("C")){
					
					 System.out.println("list_l------------------");
					
					list = jldao.getFD_Monthly_Report_Closed_new(
							From_Date, To_Date,
							Scheme_Code, DBCode);
					
					Status="Closed";
					 System.out.println("list------------------");
				}
				if(bm.getFD_Type().equalsIgnoreCase("CR")){
					
					 System.out.println("list3_3------------------");
					 
					 list = jldao.getFD_Monthly_Report_Closed_Renewal_new(
							From_Date, To_Date,
							Scheme_Code, DBCode);
					 Status ="Closed Renewal";
					 
					 System.out.println("list3------------------");
					
				}
				if(bm.getFD_Type().equalsIgnoreCase("R")){
					
					System.out.println("list2_2------------------");
					
					list = jldao.getFD_Monthly_Report_Renewal_new(
							From_Date, To_Date,
							Scheme_Code, DBCode);
					
					Status="Renewal";
					
					 System.out.println("list2------------------");
				}
				*/
		
				

			
				// Connecting to the SQL server database

				Connection conn = null;

				try {

					// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
					// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
					Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
					String jrxmlFile = null;
					 if(em.getFile_Type().equalsIgnoreCase("2")){
						 jrxmlFile = request.getRealPath("SKFD_Monthly_Report_xl.jrxml");
					 }
					 else{
						 jrxmlFile = request.getRealPath("SKFD_Monthly_Report.jrxml");
					 }
					
					InputStream input = new FileInputStream(new File(jrxmlFile));

					

					/* Convert List to JRBeanCollectionDataSource */
					JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
							list);
					
					
					/* Map to hold Jasper report Parameters */
					Map<String, Object> parameters = new HashMap<String, Object>();
					
					//------------Get Branch Details----------------------------------
					String Branch_Name = null;
					String Branch_Address = null;
					String Branch_City = null;
					String Branch_Pincode = null;
					String Branch_Phone = null;


					List<SimpleBranch> brInfo=empDao.useBranch_Code2(DBCode);
					for(SimpleBranch sb:brInfo)
					{
						Branch_Name=sb.getS2();
					   Branch_Address=sb.getS3();
					    Branch_City=sb.getS4();
					    Branch_Pincode=sb.getS5();
					    Branch_Phone=sb.getS6();
					    
					  }

					System.out.println("Branch_Name"+Branch_Name);
					Branch_Address=Branch_Address+" ,"+Branch_City+" -"+Branch_Pincode+".";
					 String Msg="SK FD Monthly Report between "+From_Date+"-"+ To_Date;
					 parameters.put("Branch_Name", Branch_Name);
					 parameters.put("Branch_Address", Branch_Address);
					 parameters.put("Msg", Msg);
					 parameters.put("Status", Status);
					 
					 System.out.println("Status----"+Status);
					 if(!em.getFile_Type().equalsIgnoreCase("2")){ 
					//-11-05-2024--------------------------------------------------------------------------------
					 parameters.put("Comp_Cin",con.GetCINNO());
					 parameters.put("Comp_Name",con.GetCompName());
					 //----------------------------------------------------------------------------------------------
					 }
					String realPath = request.getRealPath("/resources/images/");
					parameters.put("realPath", realPath);

					parameters.put("itemsJLBean", itemsJRBean);
				
					JasperReport jasperReport = JasperCompileManager
							.compileReport(input);
					JasperPrint jasperPrint = JasperFillManager.fillReport(
							jasperReport, parameters, new JREmptyDataSource());

					

					String filename = DBCode+"-SK Report :"+From_Date+"-"+ To_Date;

					  
			        	   
					 if(em.getFile_Type().equalsIgnoreCase("1"))
			           {
		        	   JRExporter exporter2 = null;
		           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		           		 
		           		 response.setContentType("application/pdf");
		           		 response.addHeader("Content-Disposition", "attachment; filename="+filename+".pdf");
		                    exporter2 = new JRPdfExporter();
		                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".pdf");
		                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		                    exporter2.exportReport();
		          
			           }
			           else if(em.getFile_Type().equalsIgnoreCase("2"))
			           {
			        	   
				          
				           response.setContentType("application/xls");
				           response.addHeader("Content-Disposition", "attachment; filename="+filename+".xls");
				           JRXlsExporter exporter = new JRXlsExporter();
				           // JRXlsExporter exporter = new JRXlsExporter();
				            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename+".xls");
				            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				            exporter.exportReport();
				    
			           }

				    
			          
					response.getOutputStream().flush();
					response.getOutputStream().close();

				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (JRException e) {
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				} catch (InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					if (conn != null) {
						try {
							conn.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}

			}
		
		
		@RequestMapping("/Deposit_Period")
		public ModelAndView viewDeposit_Period(ModelMap mp,HttpServletRequest request,HttpSession session)
		{
			
			///Session-------------------------------------------------------------
			 session=request.getSession();
				String user=(String) session.getAttribute("user");
				if(user==null)
				return  new ModelAndView("Session");
		   //--------------------------------------------------------------------
				int DBCode=(int) session.getAttribute("Branch");
		//-----------------------------------------------------GetPermission-------------------------------------

				session=request.getSession();
				//request.getSession().setMaxInactiveInterval(40);
				
				// user=(String) session.getAttribute("user"); 
				
				String[] per;
				try {
					 per=perdao.GetPermission(user, "Operations");
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					mp.put("e", e);
					return new ModelAndView("/Error");
				}
				
				 String View=null;
				 String Save=null;
				 String Update=null;
				 String Delete=null;
				 String Verify1=null;
				 String Reports1=null;
				 String Verify_21=null;
				 
				 View=per[0];
				 Save=per[1];
				 Update=per[2];
				 Delete=per[3];
				 Verify1=per[4];
				 Reports1=per[5];
				 Verify_21=per[6];
				
				
				int btn_Verify=1;
				int btn_Save=1;
				int btn_Update=1;
				int btn_Delete=1;
				
				if (View==null)
					return new ModelAndView("/Authorization");
				if (View.equalsIgnoreCase("N")||View.isEmpty())
					return new ModelAndView("/Authorization");
				
			    if (Delete.equalsIgnoreCase("N"))
			    	btn_Delete = 2;
			    if (Save.equalsIgnoreCase("N"))
			        btn_Save= 2;
			    if (Update.equalsIgnoreCase("N"))
			    	btn_Update=2;
			    System.out.println("btn_Delete="+btn_Delete);
			    System.out.println("btn_Save="+btn_Save);
			    System.out.println("btn_Update="+btn_Update);
			  //---------------------------------------------------------------------------------------------------
			  // 1.----------
			    mp.put("SaveFlag", btn_Save);//SaveFlag
			  
			    // 2. ----------
			 
			//----------------------------------------------------------------------------------------------------------	
		 

			    List <SimpleBranch> shareType=null;
				shareType=empDao.getSchemeCode_FD_All(DBCode);
					//List <Simple> branchCode=dao2.getBranchCode();
		     List<String> shareTypeList=new ArrayList<>();
		     for(SimpleBranch sav:shareType)
		     {
			String s3=sav.getS4()+"-"+sav.getS2();
				shareTypeList.add(s3);
			System.out.println(s3);  
		     }
		     
					mp.put("SchemeTypeList",shareTypeList);
					
					
					 List <Simple> branchCode=dao10.getBranchCode();
						System.out.println("Branch_Code=getbranch");
						List<String> branchCodeList=new ArrayList<>();
						for(Simple s:branchCode)
						{
							String s3=s.getS1()+"-"+s.getS2();
							branchCodeList.add(s3);
							System.out.println(s3);  
							 
						}
						mp.put("BranchCodeList", branchCodeList);
					
				
			FD_Master fd=new FD_Master();
			mp.put("Dep_Per", fd);
			
			List<SimpleBranch> list=empDao.getfd_Period(DBCode);
			 if(list.size()!=0)
				{
					mp.put("NoOfRecords", list.size());
				}
				else
				{
					mp.put("NoOfRecords", 0);
				}
		       
			mp.put("Jewel", list);
			
			
			return new ModelAndView("Period_Master");
		}
		
		
		 @RequestMapping(value="/deletePeriod_Master/{Scheme_Code}/{Period}",method = RequestMethod.GET)  
		    public ModelAndView deletePeriod_Master(@PathVariable String Scheme_Code,@PathVariable String Period,ModelMap mp,HttpServletRequest request,HttpSession session,RedirectAttributes attributes){  
		      
			///Session-------------------------------------------------------------
			 session=request.getSession();
				String user=(String) session.getAttribute("user");
				if(user==null)
				return  new ModelAndView("Session");
		   //--------------------------------------------------------------------
				int DBCode=(int) session.getAttribute("Branch");
			 
					int i=0;
		    	
		    	  i=empDao.deletePeriod_Master(Scheme_Code,Period,DBCode); 
		       
		    	  attributes.addFlashAttribute("message", "Record was Deleted");
		    	  
		    	  
		 		 

				    List <SimpleBranch> shareType=null;
					shareType=empDao.getSchemeCode_FD_All(DBCode);
						//List <Simple> branchCode=dao2.getBranchCode();
			     List<String> shareTypeList=new ArrayList<>();
			     for(SimpleBranch sav:shareType)
			     {
				String s3=sav.getS4()+"-"+sav.getS2();
					shareTypeList.add(s3);
				System.out.println(s3);  
			     }
			     
						mp.put("SchemeTypeList",shareTypeList);
					
				FD_Master fd=new FD_Master();
				mp.put("Dep_Per", fd);
				
				List<SimpleBranch> list=empDao.getfd_Period(DBCode);
				 if(list.size()!=0)
					{
						mp.put("NoOfRecords", list.size());
					}
					else
					{
						mp.put("NoOfRecords", 0);
					}
			       
				mp.put("Jewel", list);
	    	 
		        return new ModelAndView("redirect:/Deposit_Period");  
		    } 
		 
		 
		 @RequestMapping(value="/savedepositPeriod",method = RequestMethod.POST)  
		    public ModelAndView savedepositPeriod(@ModelAttribute("Dep_Per") FD_Master fd,Map<String,Object> model,ModelMap mp,HttpServletRequest request,HttpSession session,RedirectAttributes attributes) throws ParseException
		    {  
			///Session-------------------------------------------------------------
			 session=request.getSession();
				String user=(String) session.getAttribute("user");
				if(user==null)
				return  new ModelAndView("Session");
		   //--------------------------------------------------------------------
				int DBCode=(int) session.getAttribute("Branch");
				
				
				String Scheme_Code=fd.getScheme_Type().substring(0, 5);
				System.out.println("Scheme_Code-------------"+Scheme_Code);
				String Period=fd.getPeriod()+""+fd.getStanding_Scheme().substring(0, 1);
				System.out.println("Period------------------"+Period);
				String Period_Desc=fd.getPeriod() +" "+fd.getStanding_Scheme();
				System.out.println("Period_Desc-------------------"+Period_Desc);
				String Statue=fd.getAccount_Status();
				System.out.println("Statue------------"+Statue);
				String Branch_Code=fd.getBranch_Type().substring(0, 3);
				
				if(Scheme_Code.equalsIgnoreCase("00000"))
				{
					 
					int a=empDao.INSERT_TD_Period_All_Scheme(Period,Period_Desc,Statue,Branch_Code,201);
				 	if(a==1){
				 		attributes.addFlashAttribute("message", "Records Successfully Added");
				 	}
				}
				else
				{
					int a=empDao.INSERT_TD_Period_Scheme(Period,Period_Desc,Statue,Branch_Code,Scheme_Code,201);
				 	if(a==1){
				 		attributes.addFlashAttribute("message", "Records Successfully Added");
				 	}
				}
				
				/*int b=empDao.checkFD_Period_All(Scheme_Code,Period,DBCode);
				
				if(b==0){
				
			 	int a=empDao.savefd_Period(Scheme_Code,Period,Period_Desc,Statue,Branch_Code,DBCode);
			 	if(a==1){
			 		attributes.addFlashAttribute("message", "Records Successfully Added");
			 	}
			 		
				}
				else {
					attributes.addFlashAttribute("message", "Already Exists");
				}*/
			  
			 		

			 		
			 		  List <SimpleBranch> shareType=null;
						shareType=empDao.getSchemeCode_FD_All(DBCode);
							//List <Simple> branchCode=dao2.getBranchCode();
				     List<String> shareTypeList=new ArrayList<>();
				     for(SimpleBranch sav:shareType)
				     {
					String s3=sav.getS4()+"-"+sav.getS2();
						shareTypeList.add(s3);
					System.out.println(s3);  
				     }
				     
							mp.put("SchemeTypeList",shareTypeList);
						
					//FD_Master fd=new FD_Master();
					mp.put("Dep_Per", fd);
					
					List<SimpleBranch> list=empDao.getfd_Period(DBCode);
					 if(list.size()!=0)
						{
							mp.put("NoOfRecords", list.size());
						}
						else
						{
							mp.put("NoOfRecords", 0);
						}
				       
					mp.put("Jewel", list);
		    	 
					
			 		return new ModelAndView("redirect:/Deposit_Period");
		    	}
		 @RequestMapping(value="/savedepositPeriod", params ="Go",method = RequestMethod.POST)  
		    public ModelAndView depoviewsitPeriod(@ModelAttribute("Dep_Per") FD_Master fd,Map<String,Object> model,ModelMap mp,HttpServletRequest request,HttpSession session,RedirectAttributes attributes)
		    {  
			///Session-------------------------------------------------------------
			 session=request.getSession();
				String user=(String) session.getAttribute("user");
				if(user==null)
				return  new ModelAndView("Session");
		   //--------------------------------------------------------------------
				int DBCode=(int) session.getAttribute("Branch");
				
				
				String Scheme_Code=fd.getScheme_Type().substring(0, 5);

				List<SimpleBranch> list=null;
				    if(Scheme_Code.equalsIgnoreCase("00000")){
					 list=empDao.getfd_Period(DBCode);
				    }
				    else{
				    	 list=empDao.getfd_Period_scheme(Scheme_Code,DBCode);
				    }
					 if(list.size()!=0)
						{
							mp.put("NoOfRecords", list.size());
						}
						else
						{
							mp.put("NoOfRecords", 0);
						}
				       
					mp.put("Jewel", list);
		    	 
					
					  List <SimpleBranch> shareType=null;
						shareType=empDao.getSchemeCode_FD_All(DBCode);
							//List <Simple> branchCode=dao2.getBranchCode();
				     List<String> shareTypeList=new ArrayList<>();
				     for(SimpleBranch sav:shareType)
				     {
					String s3=sav.getS4()+"-"+sav.getS2();
						shareTypeList.add(s3);
					System.out.println(s3);  
				     }
				     
							mp.put("SchemeTypeList",shareTypeList);
					
					
			 		return new ModelAndView("Period_Master");
		    	}


		 
		  @RequestMapping(value="/SavePermissionBranch_MKKOld",params = "Save_Individual",method=RequestMethod.POST)
			public ModelAndView setPermission_Save_Individual_OLd(@Valid @ModelAttribute("Permission")Permission permission,ModelMap mp,BindingResult result,RedirectAttributes attributes,HttpSession session)
			{
			  
				if(result.hasErrors())
				{
					return new ModelAndView("SetPermission"); 
				}
				else
				{
					
					
					
				mp.addAttribute("Permission", permission);
				
				ArrayList<String> ct=permission.getCT_Operation_Types();
				List<String> sm=permission.getSM_Operation_Types();
				List<String> sd=permission.getSD_Operation_Types();
				List<String> fd=permission.getFD_Operation_Types();
				List<String> rd=permission.getRD_Operation_Types();
				List<String> jl=permission.getJL_Operation_Types();
				List<String> ol=permission.getOL_Operation_Types();
				List<String> jo=permission.getJO_Operation_Types();
				List<String> st=permission.getST_Operation_Types();
				List<String> tr=permission.getTR_Operation_Types();
				List<String> ib=permission.getIB_Operation_Types();
				//UP
				List<String> UP=permission.getUP300_Operation_Types();
				//List<String> branch=permission.getBranch_Code();
				//01-03-2024
				List<String> branch=permission.getBranch_Operation_Types();
				
				String userName=permission.getUser_name();
				
				
				mp.addAttribute("sm",sm);
				mp.addAttribute("sd",sd);
				mp.addAttribute("fd",fd);
				mp.addAttribute("rd",rd);
				mp.addAttribute("jl",jl);
				mp.addAttribute("ol",ol);
				mp.addAttribute("jo",jo);
				mp.addAttribute("st",st);
				mp.addAttribute("tr",tr);
				mp.addAttribute("ib",ib);
				
				
				mp.addAttribute("branch", branch);
				mp.addAttribute("Username", userName);
				
				
				
				//saveUser_Branch
				//System.out.println("branch.size()="+branch.size());
				
				if(branch==null)
				{
					//mp.addAttribute("message", "Select Branch");
					attributes.addFlashAttribute("message", "Select Branch !");

					//return new ModelAndView("redirect:/SetPermission");
					return new ModelAndView("redirect:/GetPermissionBranch/"+userName); 
				}
				else if(branch.size()>0)
				{
					System.out.println("branch.size()="+branch.size());
					int multibranchUser=dao20.Get_ScalarINT("select count(*) from Multibranch_User where user_name='"+userName+"'", 201);
					//String multibranchEmp=dao10.Get_ScalarFun("select lev1 from Employee_Master where user_name='"+userName+"'", 201);
					String multibranchEmp=permission.getMuli_branch();
					System.out.println("multibranchEmp="+multibranchEmp);
					if( multibranchUser==0 && branch.size()>1)
					{
						//mp.addAttribute("message", "Not the multibranch User ! Select one branch / Contact Admin");
						attributes.addFlashAttribute("message",  "Not the multibranch User ! Select one branch / Contact Admin");

						//return new ModelAndView("redirect:/SetPermission"); 
						return new ModelAndView("redirect:/GetPermissionBranch_Type2/"+userName); 
					}
					else{
						//---------  Delete and Add User Branch--------------------------------------
						empDao.DeleteUser_Branch(userName);
	    				for(String a:branch)
	    				{
	    					//System.out.println("branch.get(i)="+branch.get(i));
	    					if(!a.equalsIgnoreCase(null) &&  a !=null)
	    					{
	    					//System.out.println("Branch_Name branch.get(i)="+branch.get(i));
	    					int BCode=empDao.Get_Branch_Code(a);
	    					int j=empDao.saveUser_Branch(userName, BCode);
	    					}
	    				}
					}
				}
				
				
				
				//EMP EDIT-------------------------------------------------------------
				String Emp_Id=null;
				String Emp_Name=null;
				String Gender=null;
				String Dob=null;
				String Father_Name=null;
				String Marital_Status=null;
				String Email_id=null;
				String Mobile_number=null;
				String Address=null;
				String Edu_qualifi=null;
				
				String User_name=null;
				String Password=null;
				String Access_Level=null;
				String Login_type=null;
				String Status=null;
				String Designation=null;
				String User_Level=null;
				String Muli_branch=null;
				String Subakalyan=null;
				String Transaction_Edit=null;
				//String Branch_Code=null;
				
				
				 Emp_Id=permission.getEmp_Id();
				 Emp_Name=permission.getEmp_Name();
				 Mobile_number=permission.getMobile_number();
				 User_name=permission.getUser_name();
				 Password=permission.getPassword();
				 Access_Level=permission.getAccess_Level();
				 Login_type=permission.getLogin_type();
				Status=permission.getStatus();
				 User_Level=permission.getUser_Level();
				 Muli_branch=permission.getMuli_branch();
				 Subakalyan=permission.getSubakalyan();
				 Transaction_Edit=permission.getTransaction_Edit();
				// String Btype=permission.getBranch_Type().substring(0, 3);
				
				Login_type=dao10.Get_ScalarFun("Select login_type from employee_master where user_name='"+userName+"'", 201);
				//Login type Finger/Button
				String finger="N";
				String button="N";
				if(Login_type.contentEquals("A"))
				{
					 finger="Y";
					 button="Y";
				}
				else if(Login_type.contentEquals("F"))
				{
					finger="Y";
					 button="N";	
				}
				else if(Login_type.contentEquals("P"))
				{
					finger="N";
					 button="Y";	
				}
				//Corp Transaction
				//Corp Transaction
				String Corp_Transaction=null;
				String PermissionLevel=null;
				Corp_Transaction=permission.getCorpTransaction();
				PermissionLevel=permission.getPermissionLevel();
				
				if(!PermissionLevel.equalsIgnoreCase("C"))
				{
				//22-02-2024
				empDao.InsertUser_Permission_Type(userName, finger, button,PermissionLevel, 201);
			       dao20.UpdateDATA("update employee_master set permission_type='"+PermissionLevel+"' where user_name='"+userName+"'",201);

				}
				else
				{
					
					
				String view="N";
				String save="N";
				String update="N";
				String delete="N";
				String verify1="N";
				String verify2="N";
				String reports="N";
				
				String finger1="N";
				String button1="N";
				
				if(ct==null)
				{
					 view="N";
					 save="N";
					 update="N";
					 delete="N";
					 verify1="N";
					 verify2="N";
					reports="N";
					
					finger1="N";
					button1="N";
					
					
				}
				else if(ct.size()>=0)
				for(int i=0;i<ct.size();i++)
				{
					if(ct.get(i).equals("View"))
					{
						view="Y";
					}
					
						
					if(ct.get(i).equals("Save"))
					{
						save="Y";
					}
					if(ct.get(i).equals("Update"))
					{
						update="Y";
					}
					if(ct.get(i).equals("Verify1"))
					{
						verify1="Y";
					}
					if(ct.get(i).equals("Delete"))
					{
						delete="Y";
					}
					if(ct.get(i).equals("Verify2"))
					{
						verify2="Y";
					}
					if(ct.get(i).equals("Reports"))
					{
						reports="Y";
					}
				
					
					if(ct.get(i).equals("Verify2"))
					{
						verify2="Y";
					}
					if(ct.get(i).equals("Reports"))
					{
						reports="Y";
					}
					
					
					if(ct.get(i).equals("Finger"))
					{
						finger1="Y";
					}
					if(ct.get(i).equals("Button"))
					{
						button1="Y";
					}
					
					
				}
				
				empDao.DeletePermissionDetails(userName);
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				try
				{
					System.out.println("Enter in to neew permission : Customer");
					//empDao.savePermissionDetails(userName, "CT", view, save, update, delete, verify1, verify2, reports);
					empDao.savePermissionDetails2(userName, "CT", view, save, update, delete, verify1, verify2, reports,finger1,button1);
				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
			
				String viewSM="N";
				String saveSM="N";
				String updateSM="N";
				String deleteSM="N";
				String verify1SM="N";
				String verify2SM="N";
				String reportsSM="N";
				
				String finger1SM="N";
				String button1SM="N";

				
				if(sm==null)
				{
					 viewSM="N";
					 saveSM="N";
					 updateSM="N";
					 deleteSM="N";
					 verify1SM="N";
					 verify2SM="N";
					 reportsSM="N";
					 
					 finger1SM="N";
						button1SM="N";

				}
				else if(sm.size()>=0)
				for(int i=0;i<sm.size();i++)
				{
					if(sm.get(i).equals("View"))
					{
						viewSM="Y";
					}
					
						
					if(sm.get(i).equals("Save"))
					{
						saveSM="Y";
					}
					if(sm.get(i).equals("Update"))
					{
						updateSM="Y";
					}
					if(sm.get(i).equals("Verify1"))
					{
						verify1SM="Y";
					}
					if(sm.get(i).equals("Delete"))
					{
						deleteSM="Y";
					}
					if(sm.get(i).equals("Verify2"))
					{
						verify2SM="Y";
					}
					if(sm.get(i).equals("Reports"))
					{
						reportsSM="Y";
					}

					if(sm.get(i).equals("Finger"))
					{
					finger1SM="Y";
					}
					if(sm.get(i).equals("Button"))
					{
					button1SM="Y";
					}


					
					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				try
				{
					System.out.println("Enter in to neew permission : Savings Master");
				//empDao.savePermissionDetails(userName, "SM", viewSM, saveSM, updateSM, deleteSM, verify1SM, verify2SM, reportsSM);
				empDao.savePermissionDetails2(userName, "SM", viewSM, saveSM, updateSM, deleteSM, verify1SM, verify2SM, reportsSM,finger1SM,button1SM);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				String viewSD="N";
				String saveSD="N";
				String updateSD="N";
				String deleteSD="N";
				String verify1SD="N";
				String verify2SD="N";
				String reportsSD="N";
				
				String finger1SD="N";
				String button1SD="N";

				
				
				if(sd==null)
				{
					 viewSD="N";
					 saveSD="N";
					 updateSD="N";
					 deleteSD="N";
					 verify1SD="N";
					 verify2SD="N";
					 reportsSD="N";
					 
						finger1SD="N";
						button1SD="N";

						
				}
				else if(sd.size()>=0)
				for(int i=0;i<sd.size();i++)
				{
					if(sd.get(i).equals("View"))
					{
						viewSD="Y";
					}
					
						
					if(sd.get(i).equals("Save"))
					{
						saveSD="Y";
					}
					if(sd.get(i).equals("Update"))
					{
						updateSD="Y";
					}
					if(sd.get(i).equals("Verify1"))
					{
						verify1SD="Y";
					}
					if(sd.get(i).equals("Delete"))
					{
						deleteSD="Y";
					}
					if(sd.get(i).equals("Verify2"))
					{
						verify2SD="Y";
					}
					if(sd.get(i).equals("Reports"))
					{
						reportsSD="Y";
					}
					if(sd.get(i).equals("Finger"))
					{
					finger1SD="Y";
					}
					if(sd.get(i).equals("Button"))
					{
					button1SD="Y";
					}


					
					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try
				{
					
					System.out.println("Enter in to neew permission : SD");
				//empDao.savePermissionDetails(userName, "SD", viewSD, saveSD, updateSD, deleteSD, verify1SD, verify2SD, reportsSD);
				empDao.savePermissionDetails2(userName, "SD", viewSD, saveSD, updateSD, deleteSD, verify1SD, verify2SD, reportsSD,finger1SD,button1SD);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				String viewFD="N";
				String saveFD="N";
				String updateFD="N";
				String deleteFD="N";
				String verify1FD="N";
				String verify2FD="N";
				String reportsFD="N";
				
				String finger1FD="N";
				String button1FD="N";

						
				
				if(fd==null)
				{
					viewFD="N";
					 saveFD="N";
					 updateFD="N";
					 deleteFD="N";
					 verify1FD="N";
					 verify2FD="N";
					 reportsFD="N";
					 
					 finger1FD="N";
						button1FD="N";

						
					
				}
				else if(fd.size()>=0)
				for(int i=0;i<fd.size();i++)
				{
					if(fd.get(i).equals("View"))
					{
						viewFD="Y";
					}
					
						
					if(fd.get(i).equals("Save"))
					{
						saveFD="Y";
					}
					if(fd.get(i).equals("Update"))
					{
						updateFD="Y";
					}
					if(fd.get(i).equals("Verify1"))
					{
						verify1FD="Y";
					}
					if(fd.get(i).equals("Delete"))
					{
						deleteFD="Y";
					}
					if(fd.get(i).equals("Verify2"))
					{
						verify2FD="Y";
					}
					if(fd.get(i).equals("Reports"))
					{
						reportsFD="Y";
					}
					
					if(fd.get(i).equals("Finger"))
					{
					finger1FD="Y";
					}
					if(fd.get(i).equals("Button"))
					{
					button1FD="Y";
					}


					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try
				{
					System.out.println("Enter in to neew permission: FD");
				//empDao.savePermissionDetails(userName, "FD", viewFD, saveFD, updateFD, deleteFD, verify1FD, verify2FD, reportsFD);
				  empDao.savePermissionDetails2(userName, "FD", viewFD, saveFD, updateFD, deleteFD, verify1FD, verify2FD, reportsFD,finger1FD,button1FD);

				
				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				String viewRD="N";
				String saveRD="N";
				String updateRD="N";
				String deleteRD="N";
				String verify1RD="N";
				String verify2RD="N";
				String reportsRD="N";
				
				String finger1RD="N";
				String button1RD="N";

					
				
				if(rd==null)
				{
					 viewRD="N";
					saveRD="N";
					 updateRD="N";
					 deleteRD="N";
					 verify1RD="N";
					 verify2RD="N";
					 reportsRD="N";
					 
						finger1RD="N";
						button1RD="N";

						
					
				}
				else if(rd.size()>=0)
				for(int i=0;i<rd.size();i++)
				{
					if(rd.get(i).equals("View"))
					{
						viewRD="Y";
					}
					
						
					if(rd.get(i).equals("Save"))
					{
						saveRD="Y";
					}
					if(rd.get(i).equals("Update"))
					{
						updateRD="Y";
					}
					if(rd.get(i).equals("Verify1"))
					{
						verify1RD="Y";
					}
					if(rd.get(i).equals("Delete"))
					{
						deleteRD="Y";
					}
					if(rd.get(i).equals("Verify2"))
					{
						verify2RD="Y";
					}
					if(rd.get(i).equals("Reports"))
					{
						reportsRD="Y";
					}
					if(rd.get(i).equals("Finger"))
					{
					finger1RD="Y";
					}
					if(rd.get(i).equals("Button"))
					{
					button1RD="Y";
					}


					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				try
				{
				//empDao.savePermissionDetails(userName, "RD", viewRD, saveRD, updateRD, deleteRD, verify1RD, verify2RD, reportsRD);
				empDao.savePermissionDetails2(userName, "RD", viewRD, saveRD, updateRD, deleteRD, verify1RD, verify2RD, reportsRD,finger1RD,button1RD);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				
				

				String viewJL="N";
				String saveJL="N";
				String updateJL="N";
				String deleteJL="N";
				String verify1JL="N";
				String verify2JL="N";
				String reportsJL="N";
				
				String finger1JL="N";
				String button1JL="N";

						
				if(jl==null)
				{
					viewJL="N";
					 saveJL="N";
					 updateJL="N";
					 deleteJL="N";
					 verify1JL="N";
					 verify2JL="N";
					 reportsJL="N";
					 
					 finger1JL="N";
						button1JL="N";

						
				}
				else if(jl.size()>=0)
				for(int i=0;i<jl.size();i++)
				{
					if(jl.get(i).equals("View"))
					{
						viewJL="Y";
					}
					
						
					if(jl.get(i).equals("Save"))
					{
						saveJL="Y";
					}
					if(jl.get(i).equals("Update"))
					{
						updateJL="Y";
					}
					if(jl.get(i).equals("Verify1"))
					{
						verify1JL="Y";
					}
					if(jl.get(i).equals("Delete"))
					{
						deleteJL="Y";
					}
					if(jl.get(i).equals("Verify2"))
					{
						verify2JL="Y";
					}
					if(jl.get(i).equals("Reports"))
					{
						reportsJL="Y";
					}
					
					if(jl.get(i).equals("Finger"))
					{
					finger1JL="Y";
					}
					if(jl.get(i).equals("Button"))
					{
					button1JL="Y";
					}


				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try
				{
				//empDao.savePermissionDetails(userName, "JL", viewJL, saveJL, updateJL, deleteJL, verify1JL, verify2JL, reportsJL);
				
				empDao.savePermissionDetails2(userName, "JL", viewJL, saveJL, updateJL, deleteJL, verify1JL, verify2JL, reportsJL,finger1JL,button1JL);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				String viewOL="N";
				String saveOL="N";
				String updateOL="N";
				String deleteOL="N";
				String verify1OL="N";
				String verify2OL="N";
				String reportsOL="N";
				
				String finger1OL="N";
				String button1OL="N";

						
				
				if(ol==null)
				{
					 viewOL="N";
					 saveOL="N";
					 updateOL="N";
					 deleteOL="N";
					 verify1OL="N";
					 verify2OL="N";
					 reportsOL="N";
					 
					 finger1OL="N";
						button1OL="N";

						
				}
				else if(ol.size()>=0)
				for(int i=0;i<ol.size();i++)
				{
					if(ol.get(i).equals("View"))
					{
						viewOL="Y";
					}
					
						
					if(ol.get(i).equals("Save"))
					{
						saveOL="Y";
					}
					if(ol.get(i).equals("Update"))
					{
						updateOL="Y";
					}
					if(ol.get(i).equals("Verify1"))
					{
						verify1OL="Y";
					}
					if(ol.get(i).equals("Delete"))
					{
						deleteOL="Y";
					}
					if(ol.get(i).equals("Verify2"))
					{
						verify2OL="Y";
					}
					if(ol.get(i).equals("Reports"))
					{
						reportsOL="Y";
					}
					if(ol.get(i).equals("Finger"))
					{
					finger1OL="Y";
					}
					if(ol.get(i).equals("Button"))
					{
					button1OL="Y";
					}


					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try
				{
				//empDao.savePermissionDetails(userName, "OL", viewOL, saveOL, updateOL, deleteOL, verify1OL, verify2OL, reportsOL);
				empDao.savePermissionDetails2(userName, "OL", viewOL, saveOL, updateOL, deleteOL, verify1OL, verify2OL, reportsOL,finger1OL,button1OL);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				//-------------------------------------------------------------------------------------------------------//
				
				

				String viewJO="N";
				String saveJO="N";
				String updateJO="N";
				String deleteJO="N";
				String verify1JO="N";
				String verify2JO="N";
				String reportsJO="N";
				
				String finger1JO="N";
				String button1JO="N";

				
				if(jo==null)
				{
					viewJO="N";
					saveJO="N";
					 updateJO="N";
					 deleteJO="N";
					 verify1JO="N";
					verify2JO="N";
					 reportsJO="N";
					 

						finger1JO="N";
						button1JO="N";

						
				}
				else if(jo.size()>=0)
				for(int i=0;i<jo.size();i++)
				{
					if(jo.get(i).equals("View"))
					{
						viewJO="Y";
					}
					
						
					if(jo.get(i).equals("Save"))
					{
						saveJO="Y";
					}
					if(jo.get(i).equals("Update"))
					{
						updateJO="Y";
					}
					if(jo.get(i).equals("Verify1"))
					{
						verify1JO="Y";
					}
					if(jo.get(i).equals("Delete"))
					{
						deleteJO="Y";
					}
					if(jo.get(i).equals("Verify2"))
					{
						verify2JO="Y";
					}
					if(jo.get(i).equals("Reports"))
					{
						reportsJO="Y";
					}
					
					if(jo.get(i).equals("Finger"))
					{
					finger1JO="Y";
					}
					if(jo.get(i).equals("Button"))
					{
					button1JO="Y";
					}

				
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try{
				
				//empDao.savePermissionDetails(userName, "JO", viewJO, saveJO, updateJO, deleteJO, verify1JO, verify2JO, reportsJO);
				empDao.savePermissionDetails2(userName, "JO", viewJO, saveJO, updateJO, deleteJO, verify1JO, verify2JO, reportsJO,finger1JO,button1JO);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				
				//--------------------------------------------------------------------------------------------------//
				
				String viewST="N";
				String saveST="N";
				String updateST="N";
				String deleteST="N";
				String verify1ST="N";
				String verify2ST="N";
				String reportsST="N";
				
				String finger1ST="N";
				String button1ST="N";

					
				
				
				if(st==null)
				{
					 viewST="N";
					saveST="N";
					 updateST="N";
					 deleteST="N";
					 verify1ST="N";
					verify2ST="N";
					 reportsST="N";
					 
						finger1ST="N";
						button1ST="N";

						
				}
				else if(st.size()>=0)
				for(int i=0;i<st.size();i++)
				{
					if(st.get(i).equals("View"))
					{
						viewST="Y";
					}
					
						
					if(st.get(i).equals("Save"))
					{
						saveST="Y";
					}
					if(st.get(i).equals("Update"))
					{
						updateST="Y";
					}
					if(st.get(i).equals("Verify1"))
					{
						verify1ST="Y";
					}
					if(st.get(i).equals("Delete"))
					{
						deleteST="Y";
					}
					if(st.get(i).equals("Verify2"))
					{
						verify2ST="Y";
					}
					if(st.get(i).equals("Reports"))
					{
						reportsST="Y";
					}
					
					if(st.get(i).equals("Finger"))
					{
					finger1ST="Y";
					}
					if(st.get(i).equals("Button"))
					{
					button1ST="Y";
					}


					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try
				{
				//empDao.savePermissionDetails(userName, "ST", viewST, saveST, updateST, deleteST, verify1ST, verify2ST, reportsST);
				
				//empDao.savePermissionDetails2(userName, "ST", viewST, saveST, updateST, deleteST, verify1ST, verify2ST, reportsST,finger1ST,button1ST);
				empDao.savePermissionDetails2(userName, "ST", viewST, saveST, updateST, deleteST, verify1ST, verify2ST, reportsST,finger,button);
				
				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				//--------------------------------------------------------------------------------------------------------//
				
				String viewTR="N";
				String saveTR="N";
				String updateTR="N";
				String deleteTR="N";
				String verify1TR="N";
				String verify2TR="N";
				String reportsTR="N";
				
				String finger1TR="N";
				String button1TR="N";

						
				
				
				if(tr==null)
				{
					 viewTR="N";
					 saveTR="N";
					 updateTR="N";
					 deleteTR="N";
					 verify1TR="N";
					 verify2TR="N";
					 reportsTR="N";
					 
					 finger1TR="N";
						button1TR="N";

						
				}
				else if(tr.size()>=0)
				for(int i=0;i<tr.size();i++)
				{
					if(tr.get(i).equals("View"))
					{
						viewTR="Y";
					}
					
						
					if(tr.get(i).equals("Save"))
					{
						saveTR="Y";
					}
					if(tr.get(i).equals("Update"))
					{
						updateTR="Y";
					}
					if(tr.get(i).equals("Verify1"))
					{
						verify1TR="Y";
					}
					if(tr.get(i).equals("Delete"))
					{
						deleteTR="Y";
					}
					if(tr.get(i).equals("Verify2"))
					{
						verify2TR="Y";
					}
					if(tr.get(i).equals("Reports"))
					{
						reportsTR="Y";
					}
					
					if(tr.get(i).equals("Finger"))
					{
					finger1TR="Y";
					}
					if(tr.get(i).equals("Button"))
					{
					button1TR="Y";
					}


					
					
				}
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				
				try
				{
				//empDao.savePermissionDetails(userName, "TR", viewTR, saveTR, updateTR, deleteTR, verify1TR, verify2TR, reportsTR);
				empDao.savePermissionDetails2(userName, "TR", viewTR, saveTR, updateTR, deleteTR, verify1TR, verify2TR, reportsTR,finger1TR,button1TR);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				
				//------------------------------------------------------------------------------------------//
				
				String viewIB="N"; 
				String saveIB="N";
				String updateIB="N";
				String deleteIB="N";
				String verify1IB="N";
				String verify2IB="N";
				String reportsIB="N";
				
				String finger1IB="N";
				String button1IB="N";

						
				if(ib==null)
				{
					 viewIB="N"; 
					 saveIB="N";
					 updateIB="N";
					 deleteIB="N";
					 verify1IB="N";
					 verify2IB="N";
					 reportsIB="N";
					 
					 finger1IB="N";
						button1IB="N";

						
					
				}
				else if(ib.size()>=0)
				for(int i=0;i<ib.size();i++)
				{
					if(ib.get(i).equals("View"))
					{
						viewIB="Y";
					}
					
						
					if(ib.get(i).equals("Save"))
					{
						saveIB="Y";
					}
					if(ib.get(i).equals("Update"))
					{
						updateIB="Y";
					}
					if(ib.get(i).equals("Verify1"))
					{
						verify1IB="Y";
					}
					if(ib.get(i).equals("Delete"))
					{
						deleteIB="Y";
					}
					if(ib.get(i).equals("Verify2"))
					{
						verify2IB="Y";
					}
					if(ib.get(i).equals("Reports"))
					{
						reportsIB="Y";
					}
					
					if(ib.get(i).equals("Finger"))
					{
					finger1IB="Y";
					}
					if(ib.get(i).equals("Button"))
					{
					button1IB="Y";
					}


				}
				
				
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				try{
				//empDao.savePermissionDetails(userName, "IB", viewIB, saveIB, updateIB, deleteIB, verify1IB, verify2IB, reportsIB);
				empDao.savePermissionDetails2(userName, "IB", viewIB, saveIB, updateIB, deleteIB, verify1IB, verify2IB, reportsIB,finger1IB,button1IB);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				
				
				
				
				
				
//------------------------------------------------------------------------------------------//
				
				String viewUP="N"; 
				String saveUP="N";
				String updateUP="N";
				String deleteUP="N";
				String verify1UP="N";
				String verify2UP="N";
				String reportsUP="N";
				
				String finger1UP="N";
				String button1UP="N";

						
				if(UP==null)
				{
					 viewUP="N"; 
					 saveUP="N";
					 updateUP="N";
					 deleteUP="N";
					 verify1UP="N";
					 verify2UP="N";
					 reportsUP="N";
					 
					 finger1UP="N";
						button1UP="N";

						
					
				}
				else if(UP.size()>=0)
				for(int i=0;i<UP.size();i++)
				{
					if(UP.get(i).equals("View"))
					{
						viewUP="Y";
					}
					
						
					if(UP.get(i).equals("Save"))
					{
						saveUP="Y";
					}
					if(UP.get(i).equals("Update"))
					{
						updateUP="Y";
					}
					if(UP.get(i).equals("Verify1"))
					{
						verify1UP="Y";
					}
					if(UP.get(i).equals("Delete"))
					{
						deleteUP="Y";
					}
					if(UP.get(i).equals("Verify2"))
					{
						verify2UP="Y";
					}
					if(UP.get(i).equals("Reports"))
					{
						reportsUP="Y";
					}
					
					if(UP.get(i).equals("Finger"))
					{
					finger1UP="Y";
					}
					if(UP.get(i).equals("Button"))
					{
					button1UP="Y";
					}


				}
				
				
				
				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
				try{
				//empDao.savePermissionDetails(userName, "IB", viewIB, saveIB, updateIB, deleteIB, verify1IB, verify2IB, reportsIB);
				empDao.savePermissionDetails2(userName, "UP", viewUP, saveUP, updateUP, deleteUP, verify1UP, verify2UP, reportsUP,finger1UP,button1UP);

				}catch(Exception e)
				{
					return new ModelAndView("error","e",e.getLocalizedMessage());
				}
				mp.addAttribute("message", "Saved");
				
				mp.addAttribute("list", "list");
				
				
				
				/*
				List <String> branch=new ArrayList<>();
				branch.add("Trichy");
				branch.add("Madurai");
				branch.add("kovai");
				*/
				
				
				
			
				List <Branch_Master> bList=empDao.getBranchMaster();
				List <String> branch1=new ArrayList<>();
				for(Branch_Master br:bList)
				{
					branch1.add(br.getBranch_Name());
					System.out.println(br.getBranch_Name());  
					 
				}
			
				
				
				List <String> pageType=new ArrayList<>();
				pageType.add("CT");
				pageType.add("JLT");
				pageType.add("SM");
				 
				
				
				
				//ArrayList<Cus> un1=(ArrayList<Cus>) dao.getCustomerName();
				//ArrayList<SimpleBranch> un1=(ArrayList<SimpleBranch>) dao.getCustomerName2();
			//	List<Cus> un=dao.getCustomerName();
				
				List <String> operationType=new ArrayList<>();
				operationType.add("View");
				operationType.add("Save");
				operationType.add("Update");
				operationType.add("Delete");
				operationType.add("Verify1");
				operationType.add("Verify2");
						operationType.add("Reports");
						//operationType.add("Finger");operationType.add("Button");
				
				List <Branch_Master> branchList=empDao.getBranch_Master();
				mp.addAttribute("BranchList1", branchList);
				
				//List <UserDetails> userName=dao.getUserDetails();
				//mp.addAttribute("UsernameList", userName);
				
				Permission per=new Permission();
				mp.put("BranchList", branch1);
				mp.put("PageTypeList", pageType);
				mp.put("OperationTypes", operationType);
				//model.put("UserIdList", un1);
				mp.put("Permission", per);
			
				
				
				List <Simple> uname1=empDao.getUserLogin();
				List<String> uname2=new ArrayList<>();
				for(Simple s:uname1)
				{
					uname2.add(s.getS2());
					System.out.println(s.getS2());  
					 
				}
				mp.put("Uname2", uname2);
			
				
				
				
				mp.put("Permission", permission);
				//return new ModelAndView("ViewPermission");
				//return new ModelAndView("SetPermission");
				//return new ModelAndView("redirect:/viewUserList/"); 
				///GetPermissionBranch/200001
				
			
				 
				   /* if(Btype.equalsIgnoreCase("200"))
				    {
				    	Btype="201";
				    }*/
				 
				  
			
				  // int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current,em.getCategory());
				 //  System.out.println("aaaaaaaaaaaaaaaa="+a+",level="+ em.getAttendance_Status());
			
			       dao20.UpdateDATA("update employee_master set permission_type='C' where user_name='"+userName+"'",201);

				}//Custom Permission
					
				
				
				return new ModelAndView("redirect:/GetPermissionBranch_Type2/"+userName); 
				}
				
				
				
				
	    		
			
			}
		  
		
		  
		  
			
			 
		
			  
			  @RequestMapping(value="/SavePermissionBranch",params = "Save",method=RequestMethod.POST)
  			public ModelAndView setPermission(@Valid @ModelAttribute("Permission")Permission permission,ModelMap mp,BindingResult result,RedirectAttributes attributes,HttpSession session)
  			{
				String user=(String) session.getAttribute("user");

  				if(result.hasErrors())
  				{
  					return new ModelAndView("SetPermission"); 
  				}
  				else
  				{
  					
  					
  					
  				mp.addAttribute("Permission", permission);
  				
  				ArrayList<String> ct=permission.getCT_Operation_Types();
  				List<String> sm=permission.getSM_Operation_Types();
  				List<String> sd=permission.getSD_Operation_Types();
  				List<String> fd=permission.getFD_Operation_Types();
  				List<String> rd=permission.getRD_Operation_Types();
  				List<String> jl=permission.getJL_Operation_Types();
  				List<String> ol=permission.getOL_Operation_Types();
  				List<String> jo=permission.getJO_Operation_Types();
  				List<String> st=permission.getST_Operation_Types();
  				List<String> tr=permission.getTR_Operation_Types();
  				List<String> ib=permission.getIB_Operation_Types();
  				//UP
  				List<String> UP=permission.getUP300_Operation_Types();
  				//List<String> branch=permission.getBranch_Code();
  				//01-03-2024
  				List<String> branch=permission.getBranch_Operation_Types();
  				
  				String userName=permission.getUser_name();
  				
  				
  				mp.addAttribute("sm",sm);
  				mp.addAttribute("sd",sd);
  				mp.addAttribute("fd",fd);
  				mp.addAttribute("rd",rd);
  				mp.addAttribute("jl",jl);
  				mp.addAttribute("ol",ol);
  				mp.addAttribute("jo",jo);
  				mp.addAttribute("st",st);
  				mp.addAttribute("tr",tr);
  				mp.addAttribute("ib",ib);
  				
  				
  				mp.addAttribute("branch", branch);
  				mp.addAttribute("Username", userName);
  				

  				//EMP EDIT-------------------------------------------------------------
  				String Emp_Id=null;
  				String Emp_Name=null;
  				String Gender=null;
  				String Dob=null;
  				String Father_Name=null;
  				String Marital_Status=null;
  				String Email_id=null;
  				String Mobile_number=null;
  				String Address=null;
  				String Edu_qualifi=null;
  				
  				String User_name=null;
  				String Password=null;
  				String Access_Level=null;
  				String Login_type=null;
  				String Status=null;
  				String Designation=null;
  				String User_Level=null;
  				String Muli_branch=null;
  				String Subakalyan=null;
  				String Transaction_Edit=null;
  				//String Branch_Code=null;
  				
  				
  				
  				
  				 Emp_Id=permission.getEmp_Id();
  				 Emp_Name=permission.getEmp_Name();
  				 Mobile_number=permission.getMobile_number();
  				 User_name=permission.getUser_name();
  				 Password=permission.getPassword();
  				 Access_Level=permission.getAccess_Level();
  				 Login_type=permission.getLogin_type();
  				Status=permission.getStatus();
  				 User_Level=permission.getUser_Level();
  				 Muli_branch=permission.getMuli_branch();
  				 Subakalyan=permission.getSubakalyan();
  				 Transaction_Edit=permission.getTransaction_Edit();
  				 String Btype=permission.getBranch_Type().substring(0, 3);
  					String Corp_Login=permission.getCorp_Login();
  					
  					//Transaction_Edit
						if(User_Level.equalsIgnoreCase("A"))
						{
							Transaction_Edit="Y";
						}
						else
							Transaction_Edit="N";
						
						String Corp_Transaction=null;
						String PermissionLevel=null;
						Corp_Transaction=permission.getCorpTransaction();
						PermissionLevel=permission.getPermissionLevel();
  				
  				/*//Login type Finger/Button
					String finger="N";
					String button="N";
					if(Login_type.contentEquals("A"))
					{
						 finger="Y";
						 button="Y";
					}
					else if(Login_type.contentEquals("F"))
					{
						finger="Y";
						 button="N";	
					}
					else if(Login_type.contentEquals("P"))
					{
						finger="N";
						 button="Y";	
					}
					
					String cfinger="N";
					String cbutton="N";
				
					if(permission.getCorp_Login().equalsIgnoreCase("A"))
					{
						 cfinger="Y";
						 cbutton="Y";
					}
					else if(permission.getCorp_Login().equalsIgnoreCase("F"))
					{
						 cfinger="Y";
						 cbutton="N";
					}
					else if(permission.getCorp_Login().equalsIgnoreCase("P"))
					{
						 cfinger="N";
						 cbutton="Y";
					}*/
					//Corp Transaction
					//Corp Transaction
				
					
					
  				
					/*if(Access_Level.equalsIgnoreCase("A"))
  				{
  					dao20.UpdateDATA("update Login_Details set Branch_Code='"+Btype+"',EMP_NAME='"+Emp_Name+"',LEVEL1='"+User_Level+"',STATUS='"+Status+"',MOBILE_NO='"+Mobile_number+"' where username='"+User_name+"'", 201);
						dao20.UpdateDATA("Update LoginDetails Set user_level='"+User_Level+"' Where  Username='"+User_name+"' ", 201);
						empDao.InsertUser_Permission_Type(userName, finger, button,PermissionLevel, 201);
						empDao.InsertCorpUser_Permission_Type(userName, cfinger, cbutton,PermissionLevel, 201);
						
  				}
					else if( Access_Level.equalsIgnoreCase("B"))
  				{
  					dao20.UpdateDATA("update Login_Details set Branch_Code='"+Btype+"',EMP_NAME='"+Emp_Name+"',LEVEL1='"+User_Level+"',STATUS='"+Status+"',MOBILE_NO='"+Mobile_number+"' where username='"+User_name+"'", 201);
  					empDao.InsertUser_Permission_Type(userName, finger, button,PermissionLevel, 201);
						
  				}
  				else if( Access_Level.equalsIgnoreCase("C"))
					{
						dao20.UpdateDATA("Update LoginDetails Set user_level='"+User_Level+"' Where  Username='"+User_name+"' ", 201);
						empDao.InsertCorpUser_Permission_Type(userName, cfinger, cbutton,PermissionLevel, 201);

					}*/
						/*if( !permission.getCurrent_Branch().substring(0, 3).equalsIgnoreCase("200"))		
						{
						//dao20.UpdateDATA("insert into user_branch(user_name,branch_code) values('"+User_name+"',"+bcode+")", 201);
						//dao20.UpdateDATA("insert into EMP_BRANCH_LOG(EMP_ID,Bcode) values('"+User_name+"',"+bcode+")", 201);
						empDao.Employee_Branch_Update(userName, permission.getCurrent_Branch().substring(0, 3),user);
						}
						else
						{
							empDao.Employee_Branch_Update(userName, "201",user);
						}*/
						
						
					
						
						int branchcount2=dao20.Get_ScalarINT("select nvl(count(*),0) from login_details where EMP_ID='"+Emp_Id+"'", 201);
						if(Access_Level.equalsIgnoreCase("A"))
						{
							 if(branchcount2==0){
				        	int b = empDao.saveBranch_Login(Btype, userName, "RuN4fvQVZU2JJSpQl9fUJg==", Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
							 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
							 }
							 else
							 {
								 dao20.UpdateDATA("update Login_Details set Branch_Code='"+Btype+"',EMP_NAME='"+Emp_Name+"',LEVEL1='"+User_Level+"',STATUS='"+Status+"',MOBILE_NO='"+Mobile_number+"' where username='"+userName+"'", 201);
									
							 }
				        
							 int corpcount=empDao.Check_Already_User_Corp(userName);
								
								if(corpcount==0)
								{
									empDao.saveCorp_Login(userName,"RuN4fvQVZU2JJSpQl9fUJg==", User_Level,Emp_Id);
									
									
								}
								else
								{
									dao20.UpdateDATA("Update LoginDetails Set user_level='"+User_Level+"' Where  Username='"+userName+"' ", 201);

								}
								
							            
						}
						else if(Access_Level.equalsIgnoreCase("B"))
						{
							 if(branchcount2==0){
				        	int b = empDao.saveBranch_Login(Btype, userName, "RuN4fvQVZU2JJSpQl9fUJg==", Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
							 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
							 }
							 else
							 {
								 dao20.UpdateDATA("update Login_Details set Branch_Code='"+Btype+"',EMP_NAME='"+Emp_Name+"',LEVEL1='"+User_Level+"',STATUS='"+Status+"',MOBILE_NO='"+Mobile_number+"' where username='"+userName+"'", 201);
									
							 }
						
							            
						}
						else if(Access_Level.equalsIgnoreCase("C"))
						{
							int corpcount=empDao.Check_Already_User_Corp(userName);
							
							if(corpcount==0)
							{
								empDao.saveCorp_Login(userName,"RuN4fvQVZU2JJSpQl9fUJg==", User_Level,Emp_Id);
							
							   
							}
							else
							{
								dao20.UpdateDATA("Update LoginDetails Set user_level='"+User_Level+"' Where  Username='"+userName+"' ", 201);

							}
					
											
						}			
						
						  
					       int Status_updation=0;
					       int Branch_Updation=0;
					       int Promotion_Updation=0;
					       String old_status=dao10.Get_ScalarFun("Select status from employee_master where empid='"+Emp_Id+"'", 201);
					       String old_current_branch=dao10.Get_ScalarFun("Select current_branch from employee_master where empid='"+Emp_Id+"'", 201);
					       String old_promotion=dao10.Get_ScalarFun("Select case when PROMOTION_DATE is null then 'NA' else to_char(PROMOTION_DATE,'dd/MM/yyyy') end   from employee_master where empid='"+Emp_Id+"'", 201);

					       if(!old_status.equalsIgnoreCase(Status))
				           {
				        	   Status_updation=1;
				           }
				           if(!old_current_branch.equalsIgnoreCase(permission.getCurrent_Branch().substring(0, 3)))
				           {
				        	   Branch_Updation=1;
				           }
				         
				           
				empDao.Employee_Branch_Update(userName, permission.getCurrent_Branch().substring(0, 3),user);
				empDao.InsertMis_PermissionType(User_name, Muli_branch, Subakalyan,Transaction_Edit, Corp_Transaction,User_Level,Access_Level,Status,Login_type,Corp_Login,Mobile_number,Btype);

				//--29-07-2024---------------------------------------------------------
				 SimpleDateFormat sd2=new SimpleDateFormat("dd/MM/yyyy");
			     		Date Current_Date=(Date) session.getAttribute("Current_Date");
			    	String Current=sd2.format(Current_Date);
				 if(Branch_Updation==1)
		         {
					 String old_current_branch_name="Corporate";
					 if(!old_current_branch.equalsIgnoreCase("200"))
				       old_current_branch_name=dao10.Get_ScalarFun("Select branch_name from Branch_Master where to_char(branch_code)='"+old_current_branch+"'", 201);
		                   String remarks=old_current_branch_name+" to "+permission.getCurrent_Branch().substring(4);
		      	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_BRANCH,NEW_BRANCH,NEW_STATUS,FROM_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_current_branch_name+"','"+permission.getCurrent_Branch().substring(4)+"','Transfered','"+Current+"','"+remarks+"')", 201);
		         }
				 //------------------------------------------------------------------------------------
  			/*	//13-06-2022-------------------------------------
  						if(Muli_branch.equalsIgnoreCase("Y"))
  						{
  							int countcheck=empDao.Check_Multiuser(User_name);
  							if(countcheck==0)
  							{ 
  							  int k=empDao.Add_in_Multibranch(User_name);
  							  System.out.println("Adding Multibranch---"+k);
  							}
  						}
  						else
  						{
  						int countcheck=empDao.Check_Multiuser(User_name);
  						   if(countcheck>0)
  							{
  							  int k=empDao.Delete_in_Multibranch(User_name);
  							  System.out.println("Deleting Multibranch---"+k);
  							}
  							
  						}
  						
  			
  						
  						//24-11-2023
  						//Subakalyan
  						if(Subakalyan.equalsIgnoreCase("Y"))
  						{
  							dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
  							dao20.UpdateDATA("insert into permission_3 values ('"+User_name+"')", 201);
  							
  						}
  						else
  						{
  							dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
  						}
  						
  						
  							
  						if(Transaction_Edit.equalsIgnoreCase("Y"))
  						{
  							dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
  							dao20.UpdateDATA("insert into permission_2 values ('"+User_name+"')", 201);
  							
  						}
  						else
  						{
  							dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
  						}
  						
  						
  								if(Corp_Transaction.equalsIgnoreCase("Y"))
  								{
  									dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
  									dao20.UpdateDATA("insert into Corp_Transaction_User values ('"+User_name+"')", 201);
  									
  								}
  								else
  								{
  									dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
  								}*/
  						
  								    						
  					/*	///Lock / Unlock Employee
  						if(!Status.equalsIgnoreCase("A"))
  						{
  								
  							dao20.UpdateDATA("Update Login_Details Set ENABLE='N' Where Username!='200001' and Username='"+User_name+"'", 201);
  							dao20.UpdateDATA("Update LoginDetails Set Value='B' Where Username not in ('200001') and Username='"+User_name+"' ", 201);

  							
  						}
  						else
  						{
  							dao20.UpdateDATA("Update Login_Details Set ENABLE='Y',level1='"+User_Level+"' Where Username!='200001' and Username='"+User_name+"'", 201);
  							dao20.UpdateDATA("Update LoginDetails Set Value='N',user_level='"+User_Level+"' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);

  						}
  							//String user=(String) session.getAttribute("user");
  									*/	
  							
  							
  							

	    				    String empsql="update Employee_master set MOBILE='"+Mobile_number+"',LEVEL1='"+User_Level+"',STATUS='"+Status+"',ACCESS_LEVEL='"+Access_Level+"',LOGIN_TYPE='"+Login_type+"',LEV1='"+Muli_branch+"',LEV2='"+Subakalyan+"',LEV3='"+Transaction_Edit+"',MODIFY_BY='"+user+"',MODIFIED_DATE=current_date,DBCODE='"+Btype+"' where EMPID='"+Emp_Id+"'";  
	    				    dao20.UpdateDATA(empsql,201);
  						dao20.UpdateDATA("update employee_master set CORP_TRANSACTION='"+Corp_Transaction+"',Permission_Type='"+PermissionLevel+"',Login_type='"+Login_type+"',SUPER_ADMIN='"+permission.getSuper_Admin()+"',CORP_LOGIN='"+permission.getCorp_Login()+"',CURRENT_BRANCH='"+permission.getCurrent_Branch().substring(0, 3)+"' where EMPID='"+Emp_Id+"'", 201);
                     //  attributes.addAttribute("message","User Details updated..");
                   	attributes.addFlashAttribute("message", "User Details updated..");
  				//-------------------------------------------------------------------
  				
  				
  				
  				
  				return new ModelAndView("redirect:/viewUserList/"); 
  				}
  			}
			  
			  
			  
			  @RequestMapping(value = "/GetPermissionBranch/{Username}", method=RequestMethod.GET)
			    public ModelAndView GetPermissionBranch(@PathVariable String Username,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
			   	 
				{   
  				
  				//-----------------------------------------------------GetPermission-------------------------------------

  						///Session-------------------------------------------------------------
  						 session=request.getSession();
  							String user=(String) session.getAttribute("user");
  							if(user==null)
  							return  new ModelAndView("Session");
  					   //--------------------------------------------------------------------
  						
  						
  						int DBCode=(int) session.getAttribute("Branch");
  						String[] cper1=perdao.GetPermission(user, "HR");
  						
  						 String View=null;
  						 String Save=null;
  						 String Update=null;
  						 String Delete=null;
  						 String Verify2=null;
  						 String Verify3=null;
  						 String Verify4=null;
  						 String Verify5=null;
  						 String Reports1=null;
  						 String Button=null;
  						 String Finger_Print=null;
  								
  						 
  						 
  						 View=cper1[0];
  						 Save=cper1[1];
  						 Update=cper1[2];
  						 Delete=cper1[3];
  						 Verify2=cper1[4];
  						 Verify3=cper1[5];
  						 Verify4=cper1[6];
  						 Verify5=cper1[7];
  						 Reports1=cper1[8];
  						 Button=cper1[9];
  						 Finger_Print=cper1[10];
  						
  						 int btn_Delete=1;
  						 int btn_Save=1;
  						 int btn_Update=1;
  						 
  						 System.out.println("View-------------------------"+View);
  						 System.out.println("Save-------------------------"+Save);
  						 System.out.println("Update-------------------------"+Update);
  						 System.out.println("Delete-------------------------"+Delete);
  						 System.out.println("Verify2-------------------------"+Verify2);
  						 System.out.println("Verify3-------------------------"+Verify3);
  						 System.out.println("Verify4-------------------------"+Verify4);
  						 System.out.println("Verify5-------------------------"+Verify5);
  						 System.out.println("Reports1-------------------------"+Reports1);
  						 System.out.println("Button-------------------------"+Button);
  						 System.out.println("Finger_Print-------------------------"+Finger_Print);
  						 
  						// if (View.equalsIgnoreCase("N"))
  							//	return new ModelAndView("/Authorization");
  						 
  						 String temp =  dao10.Get_ScalarFun("Select SUPER_ADMIN  from employee_Master where user_name='"+user+"'",201);
		    		       if (!temp.equalsIgnoreCase("Y"))
		   						return new ModelAndView("/Authorization");
	  					//17-03-2023-----------------------------------
		    		 

  						
  						 if (Delete.equalsIgnoreCase("N"))	
  							 btn_Delete = 2;
  						 
  						 if (Save.equalsIgnoreCase("N"))	
  							 btn_Save = 2;
  						 
  						 if (Update.equalsIgnoreCase("N"))	
  							 btn_Update = 2;
  						
  						 System.out.println("btn_Verify-------------"+btn_Delete);
  						  String DeleteFlag=null;
  						  String SaveFlag=null;
  						 if(btn_Delete==2)
  						    {
  							 DeleteFlag="Display:none;";
  							 System.out.println("1111111111111111111111");
  						    }
  						 
  						 if(btn_Save==2)
  						    {
  							 SaveFlag="Display:none;";
  							 System.out.println("1111111111111111111111");
  						    }
  						mp.put("SaveDisplay", SaveFlag);
  						mp.put("deletDisplay", DeleteFlag);
  						
  						
  						
  						
  						List <Simple> bList=empDao.getBranchName1();
  						List <String> branch=new ArrayList<>();
  						for(Simple s:bList)
  						{
  							branch.add(s.getS2());
  							System.out.println(s.getS2());  
  							 
  						}
  						
  						
  						
  						List <String> pageType=new ArrayList<>();
  						pageType.add("CT");
  						pageType.add("JLT");
  						pageType.add("SM");
  						 
  						
  						
  						
  						//ArrayList<Cus> un1=(ArrayList<Cus>) dao.getCustomerName();
  						//ArrayList<SimpleBranch> un1=(ArrayList<SimpleBranch>) dao.getCustomerName2();
  					//	List<Cus> un=dao.getCustomerName();
  						
  						List <String> operationType=new ArrayList<>();
  						operationType.add("View");
  						operationType.add("Save");
  						operationType.add("Update");
  						operationType.add("Delete");
  						operationType.add("Verify1");
  						operationType.add("Verify2");
  						operationType.add("Reports");
  						//operationType.add("Finger");operationType.add("Button");
  						
  						List <Branch_Master> branchList=empDao.getBranch_Master();
  						mp.addAttribute("BranchList1", branchList);
  						
  						//List <UserDetails> userName=dao.getUserDetails();
  						//mp.addAttribute("UsernameList", userName);
  						
  						Permission per1=new Permission();
  						mp.put("BranchList", branch);
  						mp.put("PageTypeList", pageType);
  						mp.put("OperationTypes", operationType);
  						//model.put("UserIdList", un1);
  						mp.put("Permission", per1);
  					
  					//	mp.addAttribute("UserIdList1",dao.getCustomerId());
  						
  						
  					
  						int f=1;
  						String User_Name=null;
  						/*
  						List <Simple> uname1=empDao.getUserLogin();
  						List<String> uname2=new ArrayList<>();
  						for(Simple s:uname1)
  						{
  							uname2.add(s.getS2());
  							
  							if(s.getS2().equalsIgnoreCase(Username))
  							{
  								User_Name=s.getS2();
  								
  							}
  							System.out.println(s.getS2());  
  							 
  						}*/
  						User_Name=Username;
  						//User_Name=dao10.Get_ScalarFun("select username from login_details where username='"+Username+"'", 201);
  					//	per1.setUsername(User_Name);
  						//mp.put("Uname2", uname2);
  						
  									    										//-----------------------------------------------------------------------------------------
  										
  													    										
  						//-------------------------------------------------------------------------------------				
  										
  										//----------Emp Details------------------------------------
  										String EmpId=null;
  										String Emp_Name=null;
  										String Gender=null;
  										String Dob=null;
  										String Father_Name=null;
  										String Marital_Status=null;
  										String Email_id=null;
  										String Mobile_number=null;
  										String Address=null;
  										String Edu_qualifi=null;
  										
  										String User_name=null;
  										String Password=null;
  										String Access_Level=null;
  										String Login_type=null;
  										String Status=null;
  										String Designation=null;
  										String User_Level=null;
  										String Muli_branch=null;
  										String Subakalyan=null;
  										String Transaction_Edit=null;
  										
  										String Joining_date=null;
  										String Attachmentfile=null;
  										
  										String bcode=null;
  										
  										String Attendance_Level=null;
  										String Attendance_Status=null;
  										String Category=null;
  										
  										String curCode="";
  										
  												String Emp_Id=dao10.Get_ScalarFun("select empid from Employee_Master where USER_NAME='"+User_Name+"' and rownum=1", 201);

  										
  										List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
  										for(SimpleBranch s:emplyee)
  										{
  										
  											 EmpId=s.getS3();
  											 Emp_Name=s.getS31();
  											 Gender=s.getS39();
  											 Dob=s.getS40();
  											 Father_Name=s.getS131();
  											 Marital_Status=s.getS132();
  											 Email_id=s.getS72();
  											 Mobile_number=s.getS32();
  											 Address=s.getS133();
  											 Edu_qualifi=s.getS134();
  											
  											 User_name=s.getS135();
  											 Access_Level=s.getS137();
  											 Login_type=s.getS76();
  											 Status=s.getS35();
  											 Designation=s.getS36();
  											 User_Level=s.getS34();
  											 Muli_branch=s.getS77();
  											 Subakalyan=s.getS78();
  											 Transaction_Edit=s.getS79();
  											 Category=s.getS138();
  											 Joining_date=s.getS73();
  											 Attachmentfile=s.getS74();
  											 System.out.println("Access_Level s.getS137()="+s.getS137()); 
  											 System.out.println("User_Level s.getS34()="+s.getS34()); 
  											 System.out.println("Login_type s.getS76()="+s.getS76()); 
  											 System.out.println("s.getS77()="+s.getS77()); 	
  											 System.out.println("s.getS78()="+s.getS78()); 	
  											 System.out.println("s.getS79()="+s.getS79()); 	
  											 System.out.println("Access_Level="+Access_Level); 
  											 
  											System.out.println("Corp Login="+s.getS117()); 	
  										 
  									 Attendance_Level=s.getS4();
  									Attendance_Status=s.getS111();
  												
  											System.out.println("Login_type="+Login_type); 
  											System.out.println("Subakalyan="+Subakalyan); 
  											System.out.println("Transaction_Edit="+Transaction_Edit); 
  											
  											 mp.put("Joining_date", Joining_date);
  											 mp.put("Attachmentfile", Attachmentfile);
  											
  										
  											 mp.put("Emp_Id", EmpId);
  											 mp.put("Emp_Name", Emp_Name);
  											 
  										
  											 
  											 //mp.put("Gender", Gender);
  											 
  											 mp.put("Dob", Dob);
  											 mp.put("Father_Name", Father_Name);
  											 
  											// em.setDob(Dob);
  											
  											// mp.put("Marital_Status", Marital_Status);
  											 
  											 mp.put("Email_id", Email_id);
  											 mp.put("Mobile_number", Mobile_number);
  											 //mp.put("Address", Address);
  											 mp.put("Edu_qualifi", Edu_qualifi);
  											 mp.put("User_name", User_name);
  											 
  											// mp.put("Access_Level", Access_Level);
  											 per1.setAccess_Level(Access_Level);
  											 
  											 //mp.put("Login_type", Login_type);
  											 per1.setLogin_type(Login_type);
  											 
  											 mp.put("Status", Status);
  											 per1.setStatus(Status);
  											 
  											 mp.put("Designation", Designation);
  											 per1.setDesignation(Designation);
  											 mp.put("User_Level", User_Level);
  											//07-12-2022
  											 per1.setUser_Level(User_Level);
  											 
  											 //mp.put("Muli_branch", Muli_branch);
  											 per1.setMuli_branch(Muli_branch);
  											 
  											// mp.put("Subakalyan", Subakalyan);
  											 System.out.println("Subakalyan---------------------"+Subakalyan);
  											per1.setSubakalyan(Subakalyan);
  											 
  											 mp.put("Transaction_Edit", Transaction_Edit);
  											 per1.setTransaction_Edit(Transaction_Edit);
  											 
  											 bcode=s.getS33();
  											 
  											 System.out.println("Attendance_Leve="+Attendance_Level);
  											 System.out.println("Attendance_Status="+Attendance_Status);

  											 mp.put("Attendance_Level", Attendance_Level);
  											 mp.put("Attendance_Status", Attendance_Status);
  											 per1.setAttendance_Level(Attendance_Level);
  											 per1.setAttendance_Status(Attendance_Status);
  											 
  											 
  											/* em.setResign_Date(s.getS9());
  											 em.setSus_From_Date(s.getS112());
  											 em.setSus_To_Date(s.getS75());
  											 */
  											 
  											 
  											//Corp Transaction
  												String Corp_Transaction=null;
  												Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
  												per1.setCorpTransaction(Corp_Transaction);
  										   //PermissionLevel
  												String PermissionLevel=null;
  												PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
  												per1.setPermissionLevel(PermissionLevel);
  												
  												//26-03-2023
	    											per1.setLast_Name(s.getS116());
	    											per1.setCorp_Login(s.getS117());
	    											per1.setSuper_Admin(s.getS118());
	    											curCode=s.getS119();
  										}
  										
  										List<Simple> list=empDao.getSimple(201);
  										List<String> desList=new ArrayList<>();
  										for(Simple s1:list)
  										{
  											String s3=s1.getS2();
  											desList.add(s3);
  											System.out.println(s3);  
  											 
  										}
  										mp.put("DesignationList", desList);
  										
  										String Branch_Type="";
  										String BranchName="";
  										System.out.println("bcode="+bcode);
  										if(bcode.equalsIgnoreCase("200"))
  										{
  											Branch_Type="200-General";
  										}
  										else
  										{
  											BranchName=dao10.getBranchName_bcode(bcode);
  											Branch_Type=bcode+"-"+BranchName;
  										}
  										System.out.println("Branch_Type=getbranch "+Branch_Type);
  										//}else
  										//BranchName=dao10.getBranchName_bcode(""+DBCode);

  										mp.put("BranchName2",BranchName);

  										
  										List <Simple> branchCode=dao10.getBranchCode();
  										System.out.println("Branch_Code=getbranch");
  										List<String> branchCodeList=new ArrayList<>();
  										for(Simple s1:branchCode)
  										{
  											String s3=s1.getS1()+"-"+s1.getS2();
  											branchCodeList.add(s3);
  											System.out.println(s3);  
  											 
  										}
  										mp.put("BranchCodeList", branchCodeList);
  										per1.setBranch_Type(Branch_Type);
  										
  										String CBranch_Type2=10;
  										String CBranch_Type3=20;
  										String CBranch_Type4=30;
  										
  										String CBranch_Type="";
  										String CBranchName="";
  										if(curCode.equalsIgnoreCase("200"))
  										{
  											CBranch_Type="200-General";
  										}
  										else
  										{
  											CBranchName=dao10.getBranchName_bcode(curCode);
  											CBranch_Type=curCode+"-"+CBranchName;
  										}
  										
  										mp.put("CBranchName2",CBranchName);
  										per1.setCurrent_Branch(CBranch_Type);
  										
  											per1.setEmp_Id(Emp_Id);
  											
  											
  										//------------------------------------------------------------
  				      return new ModelAndView("SetPermission");  
  				
  			 
				  
				}
			  
			  
			  @RequestMapping("/viewUserList")
 			 public ModelAndView viewUserDetailsList(Map<String,Object> model,ModelMap mp,HttpServletRequest request,HttpSession session)
 			{ 
				  
  				///Session-------------------------------------------------------------
  				 session=request.getSession();
  					String user=(String) session.getAttribute("user");
  					if(user==null)
  					return  new ModelAndView("Session");
  			   //--------------------------------------------------------------------
  					 String temp =  dao10.Get_ScalarFun("Select SUPER_ADMIN  from employee_Master where user_name='"+user+"'",201);
	    		       if (!temp.equalsIgnoreCase("Y"))
	   						return new ModelAndView("/Authorization");
  					//17-03-2023-----------------------------------
  		 			Search search = new Search();
  		 			mp.put("User_Status_Branch", search);
  		 				//mp.addAttribute("radio_all", jl.getradio_all());
  		 			mp.addAttribute("	", search);
  		 			
  		 			//-----------------------------------------------------GetPermission-------------------------------------

  		  			session=request.getSession();
  		  					
  		  			/*String per_corp;
  		  			per_corp = dao20.Get_Permission_Corp(user);
  		  					
  		  				 String ReportFlag2=null;
  		  			if (!per_corp.equalsIgnoreCase("A") )
  		  			{
  		  				ReportFlag2="Display:none;";
  		  				 System.out.println("1111111111111111111111");
  		  			}
  		  			 mp.put("ReportFlag", ReportFlag2);
  		  			 
  		  		
  		  			
  		  				if (!per_corp.equalsIgnoreCase("A") )
  		  				    return new ModelAndView("/Authorization");
  		  */		  //---------------------------------------------------------------------------------------------------
  					String Level="Normal";
  				List <SimpleBranch> list=empDao.getUserDetailsList_Branch();
  				for(SimpleBranch s:list)
  				{
  					if(s.getS10().equalsIgnoreCase("A"))
  					{
  						Level="Admin";
  					}
  					else if(s.getS10().equalsIgnoreCase("M"))
  					{
  						Level="Manager";
  					}
  					else if(s.getS10().equalsIgnoreCase("C"))
  					{
  						Level="Corporate";
  					}
  					else if(s.getS10().equalsIgnoreCase("E"))
  					{
  						Level="Month End";
  					}
  					else if(s.getS10().equalsIgnoreCase("GM"))
  					{
  						Level="General Manager";
  					}
  					else
  					{
  						Level="Normal";
  					}
  					s.setS10(Level);
  					
  				}
  				mp.put("list",list);
  				
  				int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from employee_master where status is not null", 201);
  				//	int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y'", 201);
  					int getActive =dao20.Get_ScalarINT("select count(*) from employee_master where status in ('A','M')", 201);
  					//int getBranchOnly =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')", 201);
  					int getBranchOnly =dao20.Get_ScalarINT("select count(*) from employee_master where user_name in (select username from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')) and Access_level ='B'", 201);

  					
  					int getBranchandCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username  in (select username from logindetails WHERE value !='B')", 201);

  					
  					int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B' and username  not in (select username from login_details WHERE enable='Y')", 201);
  					
  					mp.put("OverAll", getOverall);
  					mp.put("ActiveAll", getActive);
  					mp.put("Active", getBranchOnly);
  					mp.put("Corporate", getActive-getBranchOnly);
  					
  				return new ModelAndView("viewUserDetailsList");
  				
  			  
 			}
			  
			   //11-11-2022
   		   @RequestMapping(value = "Search_User_Id/{Id}")
   		   public String Search_Target_Id(@PathVariable String Id,ModelMap mp,HttpServletRequest request,HttpSession session ) throws SQLException
   		   { 
   		   	 int DBCode=(int) session.getAttribute("Branch");	
   		   	
   		   	String Search_Key=null; 
   		   	 if(Id.equalsIgnoreCase("1"))
   		   	 {
   		   		 Search_Key="";
   		   	 }
   		   	 else
   		   	 {
   		   		 Search_Key=Id;
   		   	 }
   		   	    List<SimpleBranch> list = null;
   		   		list=empDao.getUserDetails2(Search_Key);
   		   		mp.put("list",list);
   		   	
   		   	return  "Select_Target_Employee_Login";
   		   }
   	
	  
	  
	  	 
	  	 
	  	 
	  	 @RequestMapping("/Employee_Master")
		 public ModelAndView viewEmployeeMaster(Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception
		{  
	    	///Session-------------------------------------------------------------
			 session=request.getSession();
				String user=(String) session.getAttribute("user");
				if(user==null)
					 return new ModelAndView("Session");  
	    	//-----------------------------------------------------GetPermission-------------------------------------

			session=request.getSession();
			
			String[] per1=perdao.GetPermission(user, "HR");
			
			 String View=null;
			 String Save=null;
			 String Update=null;
			 String Delete=null;
			 String Verify2=null;
			 String Verify3=null;
			 String Verify4=null;
			 String Verify5=null;
			 String Reports1=null;
			 String Button=null;
			 String Finger_Print=null;
					
			 
			 
			 View=per1[0];
			 Save=per1[1];
			 Update=per1[2];
			 Delete=per1[3];
			 Verify2=per1[4];
			 Verify3=per1[5];
			 Verify4=per1[6];
			 Verify5=per1[7];
			 Reports1=per1[8];
			 Button=per1[9];
			 Finger_Print=per1[10];
			
			 int btn_Delete=1;
			 int btn_Save=1;
			 int btn_Update=1;
			 
			 System.out.println("View-------------------------"+View);
			 System.out.println("Save-------------------------"+Save);
			 System.out.println("Update-------------------------"+Update);
			 System.out.println("Delete-------------------------"+Delete);
			 System.out.println("Verify2-------------------------"+Verify2);
			 System.out.println("Verify3-------------------------"+Verify3);
			 System.out.println("Verify4-------------------------"+Verify4);
			 System.out.println("Verify5-------------------------"+Verify5);
			 System.out.println("Reports1-------------------------"+Reports1);
			 System.out.println("Button-------------------------"+Button);
			 System.out.println("Finger_Print-------------------------"+Finger_Print);
			 
			 if (View.equalsIgnoreCase("N"))
					return new ModelAndView("/Authorization");

			
			 if (Delete.equalsIgnoreCase("N"))	
				 btn_Delete = 2;
			 
			 if (Save.equalsIgnoreCase("N"))	
				 btn_Save = 2;
			 
			 if (Update.equalsIgnoreCase("N"))	
				 btn_Update = 2;
			
			 System.out.println("btn_Verify-------------"+btn_Delete);
			  String DeleteFlag=null;
			  String SaveFlag=null;
			  String UpdateFlag=null;
			 if(btn_Delete==2)
			    {
				 DeleteFlag="Display:none;";
				 System.out.println("1111111111111111111111");
			    }
			 
			 if(btn_Save==2)
			    {
				 SaveFlag="Display:none;";
				 System.out.println("1111111111111111111111");
			    }
			 
			 if(btn_Update==2)
			    {
				 UpdateFlag="Display:none;";
				 System.out.println("1111111111111111111111");
			    }
			mp.put("SaveDisplay", SaveFlag);
			mp.put("DeleteDisplay", DeleteFlag);
			mp.put("UpdateDisplay", UpdateFlag);
			
			 Employee em = new Employee();
			 mp.put("Employee2", em);
			 
			 
			 List <Simple> branchCode=dao10.getBranchCode();
				System.out.println("Branch_Code=getbranch");
				List<String> branchCodeList=new ArrayList<>();
				for(Simple s:branchCode)
				{
					String s3=s.getS1()+"-"+s.getS2();
					branchCodeList.add(s3);
					System.out.println(s3);  
					 
				}
				mp.put("BranchCodeList", branchCodeList);
				
				
				List<Simple> list=empDao.getSimple(201);
				List<String> desList=new ArrayList<>();
				for(Simple s1:list)
				{
					String s3=s1.getS2();
					desList.add(s3);
					System.out.println(s3);  
					 
				}
				mp.put("DesignationList", desList);
			
				List<Simple> list2=empDao.getCategory(201);
				List<String> desList2=new ArrayList<>();
				for(Simple s1:list2)
				{
					String s3=s1.getS2();
					desList2.add(s3);
					System.out.println(s3);  
					 
				}
				mp.put("Category", desList2);

				String emp_id=dao10.Get_ScalarFun("select GET_EmpCode('SNNL') from dual", 201);
				mp.put("EmpId", emp_id);	
			
			 String btn_update="display:none";
			 
			 mp.put("UpdateDisplay", btn_update);
			 
			 mp.put("empmasterflag", 2);
			 em.setEmpmasterflag(2);
			 
			 mp.put("cvView", "display:none");
				mp.put("joinView", "display:none");
				
				
				//03-04-2024
				List<SimpleBranch> Emp_Att_List=new ArrayList<>();
				 SimpleBranch Initial_list_Acc_List=new SimpleBranch();  
				 Emp_Att_List.add(Initial_list_Acc_List);
				 session.setAttribute("Emp_Att_List", Emp_Att_List);
				 mp.addAttribute("Emp_Att_List", Emp_Att_List);
				  mp.put("Emp_Att_List", Emp_Att_List);
			 
			
	     return new ModelAndView("Employee_Master");  
	 }  

 
    @RequestMapping(value="/saveEmployee_Master",  params = "Save",method = RequestMethod.POST)  
    public ModelAndView saveEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

   	    session=request.getSession();
		String user=(String) session.getAttribute("user");
		if(user==null)
			 return new ModelAndView("Session"); 
		
		 int DBCode=(int) session.getAttribute("Branch");
		 
		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
	    	
		 SimpleDateFormat sd2=new SimpleDateFormat("dd-MM-yyyy");	
	    	
	    	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    	String Current=sd.format(Current_Date);
	    	String Current2=sd2.format(Current_Date);
		
		String Emp_Id=null;
		String Emp_Name=null;
		String Gender=null;
		String Dob=null;
		String Father_Name=null;
		String Marital_Status=null;
		String Email_id=null;
		String Mobile_number=null;
		String Address=null;
		String Edu_qualifi=null;
		
		String User_name=null;
		String Password=null;
		String Access_Level=null;
		String Login_type=null;
		String Status=null;
		String Designation=null;
		String User_Level=null;
		String Muli_branch=null;
		String Subakalyan=null;
		String Transaction_Edit=null;
		
		String Communication_Address=null;
		String Father_Occu=null;
		String Mother_name=null;
		String Mother_Occ=null;
		String Place_birth=null;
		String Religion=null;
		String Caste=null;
		String Home_town=null;
		String Driving_licene=null;
		String Psport_no=null;
		String Cibil_score=null;
		String Cibil_date=null;
		
		
		 Emp_Id=em.getEmp_Id();
		 Emp_Name=em.getEmp_Name();
		 Gender=em.getGender();
		 Dob=em.getDob();
		 Father_Name=em.getFather_Name();
		 Marital_Status=em.getMarital_Status();
		 Email_id=em.getEmail_id();
		 Mobile_number=em.getMobile_number();
		 Address=em.getAddress();
		 Edu_qualifi=em.getEdu_qualifi();
		
		 User_name=em.getUser_name();
		 Password=em.getPassword();
		 Access_Level=em.getAccess_Level();
		 Login_type=em.getLogin_type();
		 Status=em.getStatus();
		 Designation=em.getDesignation();
		 User_Level=em.getUser_Level();
		 Muli_branch=em.getMuli_branch();
		 Subakalyan=em.getSubakalyan();
		 Transaction_Edit=em.getTransaction_Edit();
		 
		   EmployeeController td= new EmployeeController();
		  String encrypted_Password=td.encrypt("Empl2012");
		    
		  Communication_Address=em.getCommun_Address();
			Father_Occu=em.getFather_Occupation();
			Mother_name=em.getMother_Name();
			Mother_Occ=em.getMother_Occupation();
			Place_birth=em.getPlace_birth();
			Religion=em.getReligion();
			Caste=em.getCaste();
			Home_town=em.getHome_Town();
			Driving_licene=em.getDriving_Licence();
			Psport_no=em.getPassport_No();
			Cibil_score=em.getCibil_Score();
			Cibil_date=em.getCibil_Date();
			

			System.out.println("Communication_Address-----------------------"+Communication_Address);
					System.out.println("Father_Occu-----------------------"+Father_Occu);
					System.out.println("Mother_name-----------------------"+Mother_name);
					System.out.println("Mother_Occ-----------------------"+Mother_Occ);
					System.out.println("Place_birth-----------------------"+Place_birth);
					System.out.println("Religion-----------------------"+Religion);
					System.out.println("Caste-----------------------"+Caste);
					System.out.println("Home_town-----------------------"+Home_town);
					System.out.println("Driving_licene-----------------------"+Driving_licene);
					System.out.println("Psport_no-----------------------"+Psport_no);
					System.out.println("Cibil_score-----------------------"+Cibil_score);
					System.out.println("Cibil_date-----------------------"+Cibil_date);
		System.out.println("Emp_Id------------"+Emp_Id);
		System.out.println("Emp_Name----------------"+Emp_Name);
		System.out.println("Gender-------------"+Gender);
		System.out.println("Dob----------------"+Dob);
		System.out.println("Father_Name---------------------"+Father_Name);
		System.out.println("Marital_Status-------------"+Marital_Status);
		System.out.println("Email_id--------------------------"+Email_id);
		System.out.println("Mobile_number--------------------"+Mobile_number);
		System.out.println("Address-----------------"+Address);
		System.out.println("Edu_qualifi----------------------"+Edu_qualifi);
		
		System.out.println("User_name--------------"+User_name);
		System.out.println("Password---------------------------"+Password);
		System.out.println("Access_Level---------------"+Access_Level);
		System.out.println("Login_type------------------"+Login_type);
		System.out.println("Status-----------------"+Status);
		System.out.println("Designation-----------------------"+Designation);
		System.out.println("User_Level--------------------"+User_Level);
		System.out.println("Muli_branch-------------------"+Muli_branch);
		System.out.println("Subakalyan------------------"+Subakalyan);
		System.out.println("Transaction_Edit-----------"+Transaction_Edit);
		System.out.println("user-----------------------"+user);
		
		System.out.println("encrypted_Password-----------------------"+encrypted_Password);
		
		 //Part photo =  request.getPart("playerphoto");
        CommonsMultipartFile photo2 =  em.getFileData(); 
        System.out.println(photo2.getOriginalFilename());
        
       CommonsMultipartFile SignData=em.getSignData();
       System.out.println(SignData.getOriginalFilename());
       
     // String fileName1 =User_name+"_"+Current2+"_"+SignData.getOriginalFilename();
      // File imageFile1 = new File(File_Path2, fileName1);
       
       
       
       
       
       //30-03-2024
       if(User_Level.equalsIgnoreCase("A"))
        	   Transaction_Edit="Y";
       else
    	   Transaction_Edit="N";

       CommonsMultipartFile Resume =  em.getFileData1(); 
       System.out.println(Resume.getOriginalFilename());

       
       
    //   int a = empDao.saveEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,encrypted_Password,em.getBranch_Type().substring(0,3),user,Current,photo2,em.getJoining_Date(),em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks(),Communication_Address,Father_Occu,Mother_name,Mother_Occ,Place_birth,Religion,Caste,Home_town,Driving_licene,Psport_no,Cibil_score,Cibil_date);
       int a = empDao.saveEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,encrypted_Password,em.getBranch_Type().substring(0,3),user,Current,photo2,em.getJoining_Date(),em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks(),Communication_Address,Father_Occu,Mother_name,Mother_Occ,Place_birth,Religion,Caste,Home_town,Driving_licene,Psport_no,Cibil_score,Cibil_date);
       
       
       if(Resume != null)
   	{
   	   System.out.println("1111111111");
	try
			 {
		
   			String fileName1 ="Resume_"+em.getEmp_Id()+"-"+Resume.getOriginalFilename();
   			  System.out.println("fileName1-"+fileName1);
				 File imageFile1 = new File(File_Path2, fileName1);

				 Resume.transferTo(imageFile1);
   			
            dao20.UpdateDATA("Update Employee_master Set Resume='"+fileName1+"' where EmpId='"+Emp_Id+"'", 201);
            System.out.println("22222222222-");
   		} catch (IOException e)
   		{
   			e.printStackTrace();
   			 System.out.println("e---------"+e.getLocalizedMessage());
   		}
   	}
       
       // String a1=empDao.getCahier_details(em.getBranch_Type().substring(0,3), 201);
       int b1=empDao.getCahier_detailscount(em.getBranch_Type().substring(0,3), 201);
       
  	 if(b1>0){    		 
  		  dao20.UpdateDATA("update employee_master set CASHIER='N' where DBCODE='"+em.getBranch_Type().substring(0,3)+"'",201);    		       		 
  	 }




       
       
       String str = em.getLast_Name();  
		String s1 = str.substring(0, 1).toUpperCase();  
		String s2 = str.substring(1);
		String res = str.substring(0, 1).toUpperCase() + str.substring(1); 
		em.setLast_Name(res);
       
       dao20.UpdateDATA("update employee_master set lock_status='N',Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"',Current_Branch='"+em.getBranch_Type().substring(0,3)+"',Promotion_Date='"+em.getPromotion_Date()+"',Promotion_Details='"+em.getPromotion_Details()+"',WORKING_STATUS='"+em.getWorking_Status()+"',WORKING_DETAILS='"+em.getWorking_Details()+"',ADDITIONAL_MOBILE='"+em.getAdditional_Mobile()+"',AADHAR_NO='"+em.getAadhar_No()+"',PAN_NO='"+em.getPan_No()+"',BANK_ACC_NO='"+em.getBank_Acc_No()+"',BANK_ACC_NAME='"+em.getBank_Acc_Name()+"',IFSC_CODE='"+em.getIFSC_Code()+"',BANK_NAME='"+em.getBank_Name()+"' where EMPID='"+Emp_Id+"'",201);
       
       System.out.println("aaaaaaaaaaaaaaaa---"+a);
	  
	   //22/12/2021
	/*   empDao.Update_Attendance_Details(em.getAttendance_Status(),em.getAttendance_Level(), Emp_Id, 201);
        if(a==1 && em.getAttendance_Status().equalsIgnoreCase("N"))
        {
        	 String Branch_Type=em.getBranch_Type();
		   	  String bcode2=Branch_Type.substring(0, 3);
		            System.out.println(bcode2);
		            int bcode=Integer.parseInt(bcode2);
		    if(bcode==200)
		    {
		    	bcode=201;
		    }
             //insert staff attendance
		try {
			attDao.Insert_Staff_Attendance_Single(Current, bcode,Emp_Id);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}

        }
	   */
	   
	   if(a==1)
	   {
       /* if(SignData != null)
     	{
     		try
     		{
     			String fileName1 ="Joining _"+em.getEmp_Id()+"_1-"+SignData.getOriginalFilename();
					File imageFile1 = new File(File_Path2, fileName1);

	     			SignData.transferTo(imageFile1);
	     			
                 dao20.UpdateDATA("insert into EMP_ATTACHEMENTS(EMP_ID,EMP_NAME,FILE_NAME,TYPE,CREATED_BY,Status,Particulars) values('"+em.getEmp_Id()+"','"+em.getEmp_Name()+"','"+fileName1+"','Attachments1','"+user+"','"+Status+"','"+em.getJoining_Date()+"')", 201);

     		
     		} catch (IOException e)
     		{
     			e.printStackTrace();
     		}
     	}*/
        CommonsMultipartFile ResumeData=em.getResumeData();
        if(ResumeData != null)
     	{
        	 String RfileName1 ="Resume_"+em.getEmp_Id()+"_"+Current2+"_"+ResumeData.getOriginalFilename();
             File RimageFile1 = new File(File_Path2, RfileName1);
            
     		try
     		{
     			ResumeData.transferTo(RimageFile1);
	     			
                 dao20.UpdateDATA("insert into EMP_ATTACHEMENTS(EMP_ID,EMP_NAME,FILE_NAME,TYPE,CREATED_BY,Status,Particulars) values('"+em.getEmp_Id()+"','"+em.getEmp_Name()+"','"+RfileName1+"','Attachments_Resume','"+user+"','Resume','Resume Details')", 201);

     		} catch (IOException e)
     		{
     			e.printStackTrace();
     		}
     	}
       
        System.out.println(SignData.getOriginalFilename());
       
        
        
        }
        
	   	String Btype=em.getBranch_Type().substring(0, 3);
	   	int bcode=Integer.parseInt(Btype);
	   	
	   	
		
	String finger="N";
		String button="N";
		if(Login_type.contentEquals("A"))
		{
			 finger="Y";
			 button="Y";
		}
		else if(Login_type.contentEquals("F"))
		{
			finger="Y";
			 button="N";	
		}
		else if(Login_type.contentEquals("P"))
		{
			finger="N";
			 button="Y";	
		}
		
		String cfinger="N";
		String cbutton="N";
		if(em.getCorp_Login().equalsIgnoreCase("A"))
		{
			 cfinger="Y";
			 cbutton="Y";
		}
		else if(em.getCorp_Login().equalsIgnoreCase("F"))
		{
			 cfinger="Y";
			 cbutton="N";
		}
		else if(em.getCorp_Login().equalsIgnoreCase("P"))
		{
			 cfinger="N";
			 cbutton="Y";
		}
		 System.out.println("Access_Level---"+Access_Level);  
		if(Access_Level.equalsIgnoreCase("A"))
		{
			 System.out.println("Access_Level---"+Access_Level);  
			int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 
			 empDao.saveCorp_Login(User_name,encrypted_Password, User_Level,Emp_Id);
			
			 empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
				empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);
				empDao.Employee_Branch_Update(User_name, ""+bcode,user);
					/*if(bcode !=200)		
					{
					//dao20.UpdateDATA("insert into user_branch(user_name,branch_code) values('"+User_name+"',"+bcode+")", 201);
					//dao20.UpdateDATA("insert into EMP_BRANCH_LOG(EMP_ID,Bcode) values('"+User_name+"',"+bcode+")", 201);
					empDao.Employee_Branch_Update(User_name, ""+bcode,user);
					}
					else
					{
						empDao.Employee_Branch_Update(User_name, "201",user);
					}*/
					
				

		}
		else if(Access_Level.equalsIgnoreCase("B"))
		{
			 System.out.println("Access_Level---"+Access_Level);  
			int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);   
			 empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
			 empDao.Employee_Branch_Update(User_name, ""+bcode,user);
			 /*if(bcode !=200)
			 {
					//dao20.UpdateDATA("insert into EMP_BRANCH_LOG(EMP_ID,Bcode) values('"+User_name+"',"+bcode+")", 201);
					//dao20.UpdateDATA("insert into user_branch(user_name,branch_code) values('"+User_name+"',"+bcode+")", 201);
					empDao.Employee_Branch_Update(User_name, ""+bcode,user);
			 }
			 else
			 {
				 empDao.Employee_Branch_Update(User_name, "201",user);
			 }*/


		}
		else if(Access_Level.equalsIgnoreCase("C"))
		{
			 System.out.println("Access_Level---"+Access_Level);  
			empDao.saveCorp_Login(User_name,encrypted_Password, User_Level,Emp_Id);
			
			empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);
			
			int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
			 empDao.Employee_Branch_Update(User_name, ""+bcode,user);

		}
		
	/*	   
		if((Access_Level.equalsIgnoreCase("A")||Access_Level.equalsIgnoreCase("B")))
		{
			//int branchcount=empDao.Check_Already_User_Branch(User_name);
			//int branchcount2=dao20.Get_ScalarINT("select nvl(count(*),0) from login_details where EMP_ID='"+Emp_Id+"'", 201);

        if(branchcount2==1)
        {
        	int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b); 
        }
        else
        {
        	int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
        //}
        
    	empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
		
			            
		}
		else if((Access_Level.equalsIgnoreCase("A")||Access_Level.equalsIgnoreCase("C")))
		{
			int corpcount=empDao.Check_Already_User_Corp(User_name);
			if(corpcount==1)
	        {
			   	dao20.UpdateDATA("update logindetails set PWD='"+Password+"',USER_LEVEL='"+User_Level+"',MTYPE='A' ,Emp_id='"+Emp_Id+"' where USERNAME='"+User_name+"'", 201);
	        }
			else
			{
				empDao.saveCorp_Login(User_name,encrypted_Password, User_Level);
			//}
			
			empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);
			
		}
		*/
		
		//13-06-2022-------------------------------------
		if(Muli_branch.equalsIgnoreCase("Y"))
		{
			int countcheck=empDao.Check_Multiuser(User_name);
			if(countcheck==0)
			{
			  empDao.Add_in_Multibranch(User_name);
			}
		}
		else
		{
		int countcheck=empDao.Check_Multiuser(User_name);
		   if(countcheck>0)
			{
			  empDao.Delete_in_Multibranch(User_name);
			}
			
		}
		
		//Subakalyan
		if(Subakalyan.equalsIgnoreCase("Y"))
		{
			dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
			dao20.UpdateDATA("insert into permission_3 values ('"+User_name+"')", 201);
			
		}
		else
		{
			dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
		}
		
		//Transaction_Edit
		if(Transaction_Edit.equalsIgnoreCase("Y"))
		{
			dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
			dao20.UpdateDATA("insert into permission_2 values ('"+User_name+"')", 201);
			
		}
		else
		{
			dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
		}
		
		//Corp Transaction
				String Corp_Transaction=null;
				String PermissionLevel=null;
				Corp_Transaction=em.getCorpTransaction();
				PermissionLevel=em.getPermissionLevel();
				dao20.UpdateDATA("update employee_master set CORP_TRANSACTION='"+Corp_Transaction+"',Permission_Type='"+PermissionLevel+"' where EMPID='"+Emp_Id+"'", 201);
						if(Corp_Transaction.equalsIgnoreCase("Y"))
						{
							dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
							dao20.UpdateDATA("insert into Corp_Transaction_User values ('"+User_name+"')", 201);
							
						}
						else
						{
							dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
						}
				

		
		/*int tc=dao20.Get_ScalarINT("select count(*) from permission where USERNAME='"+User_name+"' and PAGE='ST'",201);
		if(tc>0)
		{
		if(Login_type.contentEquals("A"))
					dao20.UpdateDATA("update permission set FINGER='Y' , BUTTON='Y' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
		else if (Login_type.contentEquals("F"))	
			dao20.UpdateDATA("update permission set FINGER='Y' , BUTTON='N' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
		else
			dao20.UpdateDATA("update permission set FINGER='N' , BUTTON='Y' where  USERNAME='"+User_name+"' and PAGE='ST'", 201);
		}
		else
		{
			empDao.InsertUser_Permission(User_Level, finger, button, 201);
		}*/
		//22-02-2024
				
		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master','"+user+"'TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'UPDATION')", 201);

		//-------------------------------------------------------------   
		  return new ModelAndView("redirect:/Employee_List");  

    }
    
    
    @RequestMapping("/Employee_List")
	 public ModelAndView viewEmployeeList(Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception
	{  
   	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		
		String[] per1=perdao.GetPermission(user, "HR");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String SaveFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 
		 if(btn_Save==2)
		    {
			 SaveFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("SaveDisplay", SaveFlag);
		mp.put("deletDisplay", DeleteFlag);
		
		 Employee em = new Employee();
		 mp.put("Employee2", em);
		 mp.addAttribute("Employee2", em);	
		 
		 String Emp_Id="SNNL";
		 
		 List<SimpleBranch> list=empDao.getEmployee_List(Emp_Id, 201);
	    	
		 System.out.println("size-----------------------"+list.size());
	    	if(list.size()!=0)
	    	{
	    		mp.put("NoOfRecords", list.size());
	    		System.out.println("size22222222-----------------------"+list.size());
	    	}
	    	else
	    	{
	    		mp.put("NoOfRecords", 0);
	    		System.out.println("size1111111111-----------------------");
	    	}
	    	
	 		model.put("list",list);
	 		
	 		 		
	 		int page=1;
			
			
	 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
	        pagedListHolder.setPageSize(10);
	        mp.put("maxPages", pagedListHolder.getPageCount());
	        int n= pagedListHolder.getPageCount();
	        
	        if(page <= pagedListHolder.getPageCount()) {
	            pagedListHolder.setPage(page-1);
	            mp.put("list", pagedListHolder.getPageList());
	        }
			 
	        int minPages=1;
	 		int maxPages=n;
	 		
	 		
	 		
	 		minPages=page/10;
	 		if(minPages==0)
	 		{
	 			minPages=1;
	 			int i=minPages+20;
	 			if(i>n)
	 			maxPages=n;
	 			else
	 				maxPages=i;
	 		}
	 		else
	 		{
	 			minPages=minPages*10;
	 			int i=minPages+20;
	 			if(i>n)
	 			maxPages=n;
	 			else
	 				maxPages=i;
	 		}
	        System.out.println("NoOfPages="+n);
	        
	        mp.put("minPages",minPages);
	        mp.put("maxPages",maxPages);
			
			mp.put("page", page);
			
			int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from employee_master where status is not null", 201);
		//	int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y'", 201);
			int getActive =dao20.Get_ScalarINT("select count(*) from employee_master where status in ('A','M')", 201);
			//int getBranchOnly =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')", 201);
			int getBranchOnly =dao20.Get_ScalarINT("select count(*) from employee_master where user_name in (select username from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')) and Access_level ='B'", 201);

			
			int getBranchandCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username  in (select username from logindetails WHERE value !='B')", 201);

			
			int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B' and username  not in (select username from login_details WHERE enable='Y')", 201);
			
			mp.put("OverAll", getOverall);
			mp.put("ActiveAll", getActive);
			mp.put("Active", getBranchOnly);
			mp.put("Corporate", getActive-getBranchOnly);
			
			em.setEmp_Id("SNNL");
			em.setCurrent_Status("600");
			
			
			//Search Info
			 session.setAttribute("Search_EmpInfo",em);
		            	mp.addAttribute("Search_EmpInfo",em);
	 				
    return new ModelAndView("Employee_List");  
}  

    
    @RequestMapping(value = "/editEmployeeMaster/{Emp_Id}", method=RequestMethod.GET)
    public ModelAndView saveEmployee_Master(@ModelAttribute("Employee2")Employee em,@PathVariable("Emp_Id") String Emp_Id,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
    {  

    	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		System.out.println("user="+user);
		String[] per1=perdao.GetPermission(user, "HR");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String updateFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 
		 if(btn_Update==2)
		    {
			 updateFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("UpdateDisplay", updateFlag);
		mp.put("DeleteDisplay", DeleteFlag);
		
		
		 mp.put("Employee2", em);
		
		  String save1="display:none";
		 
		 mp.put("SaveDisplay", save1);

		 
			String EmpId=null;
			String Emp_Name=null;
			String Gender=null;
			String Dob=null;
			String Father_Name=null;
			String Marital_Status=null;
			String Email_id=null;
			String Mobile_number=null;
			String Address=null;
			String Edu_qualifi=null;
			
			String User_name=null;
			String Password=null;
			String Access_Level=null;
			String Login_type=null;
			String Status=null;
			String Designation=null;
			String User_Level=null;
			String Muli_branch=null;
			String Subakalyan=null;
			String Transaction_Edit=null;
			
			String Joining_date=null;
			String Attachmentfile=null;
			
			String bcode=null;
			
			String Attendance_Level=null;
			String Attendance_Status=null;
			String Category=null;
			
			String Communication_Address=null;
			String Father_Occu=null;
			String Mother_name=null;
			String Mother_Occ=null;
			String Place_birth=null;
			String Religion=null;
			String Caste=null;
			String Home_town=null;
			String Driving_licene=null;
			String Psport_no=null;
			String Cibil_score=null;
			String Cibil_date=null;
			
			
			
			
			
			List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
			for(SimpleBranch s:emplyee)
			{
			
				 EmpId=s.getS3();
				 Emp_Name=s.getS31();
				 Gender=s.getS39();
				 Dob=s.getS40();
				 Father_Name=s.getS131();
				 Marital_Status=s.getS132();
				 Email_id=s.getS72();
				 Mobile_number=s.getS32();
				 Address=s.getS133();
				 Edu_qualifi=s.getS134();
				
				 User_name=s.getS135();
				 Access_Level=s.getS137();
				 Login_type=s.getS76();
				 Status=s.getS35();
				 Designation=s.getS36();
				 User_Level=s.getS34();
				 Muli_branch=s.getS77();
				 Subakalyan=s.getS78();
				 Transaction_Edit=s.getS79();
				 Category=s.getS138();
				 Joining_date=s.getS73();
				 Attachmentfile=s.getS74();
				 System.out.println("s.getS137()="+s.getS137()); 
				 System.out.println("s.getS76()="+s.getS76()); 
				 System.out.println("s.getS77()="+s.getS77()); 	
				 System.out.println("s.getS78()="+s.getS78()); 	
				 System.out.println("s.getS79()="+s.getS79()); 	
				 System.out.println("Access_Level="+Access_Level);
				 

				 Communication_Address=s.getS245();
				 Father_Occu=s.getS246();
				 Mother_name=s.getS247();
				 Mother_Occ=s.getS248();
				 Place_birth=s.getS249();
				 Religion=s.getS250();
				 Caste=s.getS251();
				 Home_town=s.getS252();
				 Driving_licene=s.getS253();
				 Psport_no=s.getS254();
				 Cibil_score=s.getS255();
				 Cibil_date=s.getS256();
				 
		 Attendance_Level=s.getS4();
		Attendance_Status=s.getS111();
					
				System.out.println("Login_type="+Login_type); 
				System.out.println("Subakalyan="+Subakalyan); 
				System.out.println("Transaction_Edit="+Transaction_Edit); 
				
				 mp.put("Joining_date", Joining_date);
				 mp.put("Attachmentfile", Attachmentfile);
				 
				 em.setEmp_Id(EmpId);
				 em.setEmp_Name(Emp_Name);
			
				 mp.put("Emp_Id", EmpId);
				 mp.put("Emp_Name", Emp_Name);
				 
				 em.setGender(Gender);
				 
				 //mp.put("Gender", Gender);
				 
				 em.setCommun_Address(Communication_Address);
				 mp.put("Father_Occupation", Father_Occu);
				 mp.put("Mother_Name", Mother_name);
				 mp.put("Mother_Occupation", Mother_Occ);
				 mp.put("Place_birth", Place_birth);
				 mp.put("Religion", Religion);
				
				// mp.put("Caste", Caste);
				 em.setCaste(Caste);
				 mp.put("Home_Town", Home_town);
				 mp.put("Driving_Licence", Driving_licene);
				 mp.put("Passport_No", Psport_no);
				 mp.put("Cibil_Score", Cibil_score);
				 mp.put("Cibil_Date", Cibil_date);

				 
				 List<SimpleBranch> list9 = empDao.getResumeDetail(EmpId);
					mp.put("list9", list9);
				   
				 

				 
				 mp.put("Dob", Dob);
				 mp.put("Father_Name", Father_Name);
				 em.setFather_Name(Father_Name);
				 em.setDob(Dob);
				
				 em.setMarital_Status(Marital_Status);
				// mp.put("Marital_Status", Marital_Status);
				 
				 mp.put("Email_id", Email_id);
				 mp.put("Mobile_number", Mobile_number);
				 //mp.put("Address", Address);
				 em.setAddress(Address);
				 mp.put("Edu_qualifi", Edu_qualifi);
				 mp.put("User_name", User_name);
				 
				 em.setUser_name(User_name);
				 em.setEdu_qualifi(Edu_qualifi);
				 em.setMobile_number(Mobile_number);
				 em.setEmail_id(Email_id);
				 
				// mp.put("Access_Level", Access_Level);
				 em.setAccess_Level(Access_Level);
				 
				 //mp.put("Login_type", Login_type);
				 em.setLogin_type(Login_type);
				 
				// mp.put("Status", Status);
				 em.setStatus(Status);
				 
				 mp.put("Designation", Designation);
				 mp.put("User_Level", User_Level);
				 em.setUser_Level(User_Level);
				 em.setDesignation(Designation);
				//07-12-2022
				 em.setUser_Level(User_Level);
				 
				 //mp.put("Muli_branch", Muli_branch);
				 em.setMuli_branch(Muli_branch);
				 
				// mp.put("Subakalyan", Subakalyan);
				 System.out.println("Subakalyan---------------------"+Subakalyan);
				 em.setSubakalyan(Subakalyan);
				 
				 mp.put("Transaction_Edit", Transaction_Edit);
				 em.setTransaction_Edit(Transaction_Edit);
				 
				 bcode=s.getS33();
				 
				 System.out.println("Attendance_Leve="+Attendance_Level);
				 System.out.println("Attendance_Status="+Attendance_Status);

				 mp.put("Attendance_Level", Attendance_Level);
				 mp.put("Attendance_Status", Attendance_Status);
				 em.setAttendance_Level(Attendance_Level);
				 em.setAttendance_Status(Attendance_Status);
				 
				 
				 em.setResign_Date(s.getS9());
				 em.setSus_From_Date(s.getS112());
				 em.setSus_To_Date(s.getS75());
				 
				 //04-03-2024
				 em.setMaternity_From_Date(s.getS113());
				 em.setMaternity_To_Date(s.getS114());
				 em.setRemarks(s.getS115());
				 
				 
				 
				//Corp Transaction
					String Corp_Transaction=null;
					Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
					em.setCorpTransaction(Corp_Transaction);
			   //PermissionLevel
					String PermissionLevel=null;
					PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
					em.setPermissionLevel(PermissionLevel);

			
			
			String Branch_Type="";
			String BranchName="";
			if(bcode.equalsIgnoreCase("200"))
			{
				Branch_Type="200-Corporate";
			}
			else
			{
				BranchName=dao10.getBranchName_bcode(bcode);
				Branch_Type=bcode+"-"+BranchName;
			}
			System.out.println("Branch_Type=getbranch "+Branch_Type);
			//}else
			//BranchName=dao10.getBranchName_bcode(""+DBCode);

			mp.put("BranchName2",BranchName);

			
			List <Simple> branchCode=dao10.getBranchCode();
			System.out.println("Branch_Code=getbranch");
			List<String> branchCodeList=new ArrayList<>();
			for(Simple s1:branchCode)
			{
				String s3=s1.getS1()+"-"+s1.getS2();
				branchCodeList.add(s3);
				//System.out.println(s3);  
				 
			}
			mp.put("BranchCodeList", branchCodeList);
			em.setBranch_Type(Branch_Type);
			
			
			String cbcode=s.getS119();
			String CBranch_Type="";
			String CBranchName="";
			if(cbcode.equalsIgnoreCase("200"))
			{
				CBranch_Type="200-Corporate";
			}
			else
			{
				CBranchName=dao10.getBranchName_bcode(cbcode);
				CBranch_Type=cbcode+"-"+CBranchName;
			}
			em.setCurrent_Branch(CBranch_Type);
			System.out.println("CBranch_Type=getbranch "+CBranch_Type);
			
				em.setEmp_Id(Emp_Id);
				
				
				List<Simple> list=empDao.getSimple(201);
				List<String> desList=new ArrayList<>();
				for(Simple s1:list)
				{
					String s3=s1.getS2();
					desList.add(s3);
					//System.out.println(s3);  
					 
				}
				mp.put("DesignationList", desList);
				em.setDesignation(Designation);
			
				List<Simple> list2=empDao.getCategory(201);
				List<String> desList2=new ArrayList<>();
				for(Simple s1:list2)
				{
					String s3=s1.getS2();
					desList2.add(s3);
					//System.out.println(s3);  
					 
				}
				mp.put("Category", desList2);
				System.out.println("Category--------------------"+Category);
				em.setCategory(Category);
				
				em.setLast_Name(s.getS116());
				em.setCorp_Login(s.getS117());
				em.setSuper_Admin(s.getS118());
				
				//em.setCurrent_Branch(s.getS119());
				//em.setBranch_Type(s.getS33());
				
				String resignView="",suspentionView="",maternityView="";
				if(s.getS231() == null)
					resignView="display:none";
				if(s.getS232() == null)
					suspentionView="display:none";
				if(s.getS232() == null)
					maternityView="display:none";
				mp.put("resignView", resignView);
				mp.put("suspentionView", suspentionView);
				mp.put("maternityView", maternityView);
				
			em.setPromotion_Date(s.getS236());
			em.setPromotion_Details(s.getS237());
			
			em.setWorking_Status(s.getS234());
			em.setWorking_Details(s.getS235());
			 mp.put("empmasterflag", 3);
			 em.setEmpmasterflag(3);	
			 
			 em.setAdditional_Mobile(s.getS238());
			 em.setAadhar_No(s.getS239());
			 em.setPan_No(s.getS240());
			 em.setBank_Acc_No(s.getS241());
			 em.setBank_Acc_Name(s.getS242());
			 em.setIFSC_Code(s.getS243());
			 em.setBank_Name(s.getS244());
			 
		//---------Filling Pages----------------------------------------------------------------------------
				// Date loading on Page
		
				 session=request.getSession();  
			       List<SimpleBranch> list8 = empDao.getEMP_Attachement(em.getEmp_Id());
					mp.put("list8", list8);
			
				
					List<SimpleBranch> Emp_Att_List=new ArrayList<>();
									
					if(session!=null)
					{
							Emp_Att_List = (List<SimpleBranch>)session.getAttribute("Emp_Att_List");
									
					}
					mp.put("Employee2", em);
			 session.setAttribute("Emp_Att_List", list8);
			 mp.addAttribute("Emp_Att_List", list8);
			 session.setAttribute("Emp_Info",em);
		       	mp.addAttribute("Emp_Info",em);
				
			//---------------------------------------------------------------------------------------
				  //---------filling Pages-----------------------------------------------------------------------------
	        
	         
	        
			
			  
			  session.setAttribute("Emp_Info",em);
		       	mp.addAttribute("Emp_Info",em);
		       	
		       	
				
				String password= dao10.Get_ScalarFun("select password from login_details where username='"+User_name+"'", 201);
				System.out.println("password:"+password); 
				mp.put("Password", password);
			
				
				mp.put("readonly", "true");
				 
				 
				 
			}
			
			
			return new ModelAndView ("Employee_Master");
    	//return new ModelAndView ("Employee_Master");
    } 
    
    
    
    @RequestMapping(value="/saveEmployee_Master",  params = "Update",method = RequestMethod.POST)  
    public ModelAndView updateEmployee_Master(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

   	    session=request.getSession();
		String user=(String) session.getAttribute("user");
		if(user==null)
			 return new ModelAndView("Session"); 
		
		 int DBCode=(int) session.getAttribute("Branch");
		 
		 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
	    	
	    	
	    	
	    	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    	String Current=sd.format(Current_Date);
	    	
	    	if((em.getCurrent_Branch().equalsIgnoreCase(null) && em.getCurrent_Branch().isEmpty()) || em.getCurrent_Branch().equalsIgnoreCase("Select"))
	    	{
	    		em.setCurrent_Branch("200-Corporate");
	    	}
	    	if((em.getBranch_Type().equalsIgnoreCase(null) && em.getBranch_Type().isEmpty()) || em.getBranch_Type().equalsIgnoreCase("Select"))
	    	{
	    		em.setBranch_Type("200-Corporate");
	    	}
	    	if(em.getAccess_Level().equalsIgnoreCase(null) && em.getAccess_Level().isEmpty())
	    	{
	    		em.setAccess_Level("B");
	    	}
	    	if(em.getLogin_type().equalsIgnoreCase(null) && em.getLogin_type().isEmpty())
	    	{
	    		em.setLogin_type("F");
	    	}
	    	if(em.getUser_Level().equalsIgnoreCase(null) && em.getUser_Level().isEmpty())
	    	{
	    		em.setUser_Level("N");
	    	}
	    	if(em.getCorp_Login().equalsIgnoreCase(null) && em.getCorp_Login().isEmpty())
	    	{
	    		em.setCorp_Login("F");
	    	}
	    	if(em.getSubakalyan().equalsIgnoreCase(null) && em.getSubakalyan().isEmpty())
	    	{
	    		em.setSubakalyan("N");
	    	}
	    	if(em.getCorpTransaction().equalsIgnoreCase(null) && em.getCorpTransaction().isEmpty())
	    	{
	    		em.setCorpTransaction("N");
	    	}
	    	if(em.getMuli_branch().equalsIgnoreCase(null) && em.getMuli_branch().isEmpty())
	    	{
	    		em.setMuli_branch("N");
	    	}
	    	if(em.getSuper_Admin().equalsIgnoreCase(null) && em.getSuper_Admin().isEmpty())
	    	{
	    		em.setSuper_Admin("N");
	    	}
		
		String Emp_Id=null;
		String Emp_Name=null;
		String Gender=null;
		String Dob=null;
		String Father_Name=null;
		String Marital_Status=null;
		String Email_id=null;
		String Mobile_number=null;
		String Address=null;
		String Edu_qualifi=null;
		
		String User_name=null;
		String Password=null;
		String Access_Level=null;
		String Login_type=null;
		String Status=null;
		String Designation=null;
		String User_Level=null;
		String Muli_branch=null;
		String Subakalyan=null;
		String Transaction_Edit=null;
		//String Branch_Code=null;
		
		

		 String Communication_Address=null;
			String Father_Occu=null;
			String Mother_name=null;
			String Mother_Occ=null;
			String Place_birth=null;
			String Religion=null;
			String Caste=null;
			String Home_town=null;
			String Driving_licene=null;
			String Psport_no=null;
			String Cibil_score=null;
			String Cibil_date=null;
			
			Communication_Address=em.getCommun_Address();
			Father_Occu=em.getFather_Occupation();
			Mother_name=em.getMother_Name();
			Mother_Occ=em.getMother_Occupation();
			Place_birth=em.getPlace_birth();
			Religion=em.getReligion();
			Caste=em.getCaste();
			Home_town=em.getHome_Town();
			Driving_licene=em.getDriving_Licence();
			Psport_no=em.getPassport_No();
			Cibil_score=em.getCibil_Score();
			Cibil_date=em.getCibil_Date();
		
		 Emp_Id=em.getEmp_Id();
		 Emp_Name=em.getEmp_Name();
		 Gender=em.getGender();
		 Dob=em.getDob();
		 Father_Name=em.getFather_Name();
		 Marital_Status=em.getMarital_Status();
		 Email_id=em.getEmail_id();
		 Mobile_number=em.getMobile_number();
		 Address=em.getAddress();
		 Edu_qualifi=em.getEdu_qualifi();
		
		 User_name=em.getUser_name();
		// Password=em.getPassword();
		 Access_Level=em.getAccess_Level();
		 Login_type=em.getLogin_type();
		 Status=em.getStatus();
		 Designation=em.getDesignation();
		 User_Level=em.getUser_Level();
		 Muli_branch=em.getMuli_branch();
		 Subakalyan=em.getSubakalyan();
		 Transaction_Edit=em.getTransaction_Edit();
		 String Btype=em.getBranch_Type().substring(0, 3);
		 
		  //30-03-2024
	       if(User_Level.equalsIgnoreCase("A"))
	        	   Transaction_Edit="Y";
	       else
	    	   Transaction_Edit="N";
	       
	       int Status_updation=0;
	       int Branch_Updation=0;
	       int Promotion_Updation=0;
	       String old_status=dao10.Get_ScalarFun("Select status from employee_master where empid='"+Emp_Id+"'", 201);
	       String old_current_branch=dao10.Get_ScalarFun("Select current_branch from employee_master where empid='"+Emp_Id+"'", 201);
	       String old_promotion=dao10.Get_ScalarFun("Select case when PROMOTION_DATE is null then 'NA' else to_char(PROMOTION_DATE,'dd/MM/yyyy') end   from employee_master where empid='"+Emp_Id+"'", 201);

	       if(!old_status.equalsIgnoreCase(Status))
           {
        	   Status_updation=1;
           }
           if(!old_current_branch.equalsIgnoreCase(em.getCurrent_Branch().substring(0, 3)))
           {
        	   Branch_Updation=1;
           }
          /* if(old_promotion.equalsIgnoreCase("NA") && !em.getPromotion_Date().equalsIgnoreCase(null) && !em.getPromotion_Details().equalsIgnoreCase(null))
           {
        	   Promotion_Updation=1;
           }*/
           else  if(!old_promotion.equalsIgnoreCase("NA") && !old_promotion.equalsIgnoreCase(em.getPromotion_Date()))
           {
        	   Promotion_Updation=1;
           }
           
          
           
		   /* if(Btype.equalsIgnoreCase("200"))
		    {
		    	Btype="201";
		    }*/
		 
		   EmployeeController td= new EmployeeController();
		 String encrypted_Password=td.encrypt("Empl2012");
		    
		 //  String encrypted_Password="";
		
		System.out.println("Branch_Code--------"+Btype);   
		System.out.println("Emp_Id------------"+Emp_Id);
		System.out.println("Emp_Name----------------"+Emp_Name);
		System.out.println("Gender-------------"+Gender);
		System.out.println("Dob----------------"+Dob);
		System.out.println("Father_Name---------------------"+Father_Name);
		System.out.println("Marital_Status-------------"+Marital_Status);
		System.out.println("Email_id--------------------------"+Email_id);
		System.out.println("Mobile_number--------------------"+Mobile_number);
		System.out.println("Address-----------------"+Address);
		System.out.println("Edu_qualifi----------------------"+Edu_qualifi);
		
		System.out.println("User_name--------------"+User_name);
		System.out.println("Password---------------------------"+Password);
		System.out.println("Access_Level---------------"+Access_Level);
		System.out.println("Login_type------------------"+Login_type);
		System.out.println("Status-----------------"+Status);
		System.out.println("Designation-----------------------"+Designation);
		System.out.println("User_Level--------------------"+User_Level);
		System.out.println("Muli_branch-------------------"+Muli_branch);
		System.out.println("Subakalyan------------------"+Subakalyan);
		System.out.println("Transaction_Edit-----------"+Transaction_Edit);
		System.out.println("user-----------------------"+user);
		
		
		/*String oldEncPass= dao10.Get_ScalarFun("select password from login_details where username='"+User_name+"'", 201);
		String newEncPass="";
		if(em.getPassword() != null && !em.getPassword().isEmpty())
		if(!em.getPassword().equalsIgnoreCase(oldEncPass))
		{
			newEncPass=td.encrypt(em.getPassword());
			dao20.UpdateDATA("update login_Details set password='"+newEncPass+"' where username='"+User_name+"'", 201);
		}*/
		/*String oldUser= dao10.Get_ScalarFun("select user_name from employee_master where empid='"+Emp_Id+"'", 201);
		System.out.println("olduser="+User_name+",new="+em.getUser_name());
		if(!oldUser.equalsIgnoreCase(User_name))
		{
			System.out.println("old---------------------------");
			empDao.Update_User(oldUser, em.getUser_name(), 201);
		  
		}*/
		System.out.println("em.getUser_name()="+em.getUser_name()+",em.getCurrent_Branch().substring(0, 3)="+em.getCurrent_Branch().substring(0, 3)+","+user);
		empDao.Employee_Branch_Update(em.getUser_name(), em.getCurrent_Branch().substring(0, 3),user);

		System.out.println("old----------11111111111----------------");
		
		/*if( !em.getCurrent_Branch().substring(0, 3).equalsIgnoreCase("200"))		
		{
		//dao20.UpdateDATA("insert into user_branch(user_name,branch_code) values('"+User_name+"',"+bcode+")", 201);
		//dao20.UpdateDATA("insert into EMP_BRANCH_LOG(EMP_ID,Bcode) values('"+User_name+"',"+bcode+")", 201);
		
			System.out.println("em.getUser_name()="+em.getUser_name()+",em.getCurrent_Branch().substring(0, 3)="+em.getCurrent_Branch().substring(0, 3)+","+user);
			empDao.Employee_Branch_Update(em.getUser_name(), em.getCurrent_Branch().substring(0, 3),user);
		}
		else
		{
			System.out.println("em.getUser_name()="+em.getUser_name()+",201");

			empDao.Employee_Branch_Update(em.getUser_name(), "201",user);
		}
		*/
		
		
		
		 CommonsMultipartFile Resume =  em.getFileData1(); 
         System.out.println(Resume.getOriginalFilename());
         
         
         if(Resume != null)
      	{
 	try
 			 {
 		
      			String fileName1 ="Resume_"+em.getEmp_Id()+"-"+Resume.getOriginalFilename();
 				 File imageFile1 = new File(File_Path2, fileName1);

 				Resume.transferTo(imageFile1);
      			
               dao20.UpdateDATA("Update Employee_master Set Resume='"+fileName1+"' where EmpId='"+Emp_Id+"'", 201);
      		} catch (IOException e)
      		{
      			e.printStackTrace();
      		}
      	}
		

         // String a1=empDao.getCahier_details(em.getBranch_Type().substring(0,3), 201);
         int b1=empDao.getCahier_detailscount(em.getBranch_Type().substring(0,3), 201);
         
    	 if(b1>0){    		 
    		  dao20.UpdateDATA("update employee_master set CASHIER='N' where DBCODE='"+em.getBranch_Type().substring(0,3)+"'",201);    		       		 
    	 }


		
		   //int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current,em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks());
		   int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current,em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks(),Communication_Address,Father_Occu,Mother_name,Mother_Occ,Place_birth,Religion,Caste,Home_town,Driving_licene,Psport_no,Cibil_score,Cibil_date);
		      
		dao20.UpdateDATA("update employee_master set lock_status='N',Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"',Promotion_Date='"+em.getPromotion_Date()+"',Promotion_Details='"+em.getPromotion_Details()+"',WORKING_STATUS='"+em.getWorking_Status()+"',WORKING_DETAILS='"+em.getWorking_Details()+"',ADDITIONAL_MOBILE='"+em.getAdditional_Mobile()+"',AADHAR_NO='"+em.getAadhar_No()+"',PAN_NO='"+em.getPan_No()+"',BANK_ACC_NO='"+em.getBank_Acc_No()+"',BANK_ACC_NAME='"+em.getBank_Acc_Name()+"',IFSC_CODE='"+em.getIFSC_Code()+"',BANK_NAME='"+em.getBank_Name()+"',CURRENT_BRANCH='"+em.getCurrent_Branch().substring(0, 3)+"' where EMPID='"+Emp_Id+"'",201);
  
		System.out.println("aaaaaaaaaaaaaaaa="+a+",level="+ em.getAttendance_Status());
		/*empDao.Update_Attendance_Details(em.getAttendance_Status(), em.getAttendance_Level(), Emp_Id, 201);
		  if(a==1 && em.getAttendance_Status().equalsIgnoreCase("N") && Status.equalsIgnoreCase("A"))
	        {
	        	 String Branch_Type=em.getBranch_Type();
			   	  String bcode2=Branch_Type.substring(0, 3);
			            System.out.println(bcode2);
			            int bcode=Integer.parseInt(bcode2);
			    if(bcode==200)
			    {
			    	bcode=201;
			    }
	             //insert staff attendance
			try {
				 System.out.println("before insertion---"+bcode+",emp="+Emp_Id);
				attDao.Insert_Staff_Attendance_Single(Current, bcode,Emp_Id);
				 System.out.println("after insertion---"+bcode+",emp="+Emp_Id);
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
			}

	        }
		  
		  if(a==1 && (em.getAttendance_Status().equalsIgnoreCase("Y") || !Status.equalsIgnoreCase("A") ))
	        {
	        	       //insert staff attendance
			try {
				attDao.Delete_Staff_Attendance_Single(Current,Emp_Id);
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
			}

	        }*/


		   
		if(Status.equalsIgnoreCase("R"))
		{
			empDao.Update_Resigned_Details(em.getResign_Date(),Emp_Id);

			 if(Status_updation==1)
	           {
	        	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_STATUS,NEW_STATUS,FROM_DATE,TO_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_status+"','Resigned','"+em.getResign_Date()+"','','"+em.getRemarks()+"')", 201);
	           }
	           
		}
		else if(Status.equalsIgnoreCase("S"))
			{
				empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),Emp_Id);
				 if(Status_updation==1)
		           {
		        	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_STATUS,NEW_STATUS,FROM_DATE,TO_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_status+"','Suspended','"+em.getSus_From_Date()+"','"+em.getSus_To_Date()+"','"+em.getRemarks()+"')", 201);
		           }
			}
		
		else if(Status.equalsIgnoreCase("M"))
		{
			//empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),Emp_Id);
		       dao20.UpdateDATA("update employee_master set Maternity_From='"+em.getMaternity_From_Date()+"',Maternity_To='"+em.getMaternity_To_Date()+"' where EMPID='"+Emp_Id+"'",201);
		       if(Status_updation==1)
	           {
	        	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_STATUS,NEW_STATUS,FROM_DATE,TO_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_status+"','Maternity Leave','"+em.getMaternity_From_Date()+"','"+em.getMaternity_To_Date()+"','"+em.getRemarks()+"')", 201);
	           }
		}
		else if(Status.equalsIgnoreCase("A"))
		{
		 if(Promotion_Updation==1)
         {
      	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_STATUS,NEW_STATUS,FROM_DATE,TO_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_status+"','Promoted','"+em.getPromotion_Date()+"','','"+em.getPromotion_Details()+"')", 201);
         }
		 else  if(Status_updation==1)
	      	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_STATUS,NEW_STATUS,FROM_DATE,TO_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_status+"','Active','"+Current+"','','"+em.getPromotion_Details()+"')", 201);

			 
		}
		else if(Status.equalsIgnoreCase("C"))
		{
			   if(Status_updation==1)
	           {
	        	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_STATUS,NEW_STATUS,FROM_DATE,TO_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_status+"','Inactive','"+Current+"','','"+em.getRemarks()+"')", 201);
	           }
		}
		
		 if(Branch_Updation==1)
         {
			 String old_current_branch_name="Corporate";
			 if(!old_current_branch.equalsIgnoreCase("200"))
		       old_current_branch_name=dao10.Get_ScalarFun("Select branch_name from Branch_Master where to_char(branch_code)='"+old_current_branch+"'", 201);
                   String remarks=old_current_branch_name+" to "+em.getCurrent_Branch().substring(4);
      	   dao20.UpdateDATA("insert into EMP_EDIT_LOG(EMP_ID,EMP_NAME,OLD_BRANCH,NEW_BRANCH,NEW_STATUS,FROM_DATE,REMARKS) values('"+Emp_Id+"','"+Emp_Name+"','"+old_current_branch_name+"','"+em.getCurrent_Branch().substring(4)+"','Transfered','"+Current+"','"+remarks+"')", 201);
         }
		 System.out.println("--------------------------------------------------Access_Level---"+Access_Level+":------------------------------------------------------"); 
		//int branchcount=empDao.Check_Already_User_Branch(User_name);
		int branchcount2=dao20.Get_ScalarINT("select nvl(count(*),0) from login_details where EMP_ID='"+Emp_Id+"'", 201);

		if(Access_Level.equalsIgnoreCase("B"))
		{
			 if(branchcount2==1)
			 {
        	int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b); 
			 
			 }
			 else
			 {
        	int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
			 }
        
		
			            
		}
		else if((Access_Level.equalsIgnoreCase("A")))
		{
			 System.out.println("Corporate update---------------------");       
			int corpcount=empDao.Check_Already_User_Corp(User_name);
			 System.out.println("Corporate Count-------------------: "+corpcount);       
			if(corpcount==1)
	        {
			   	dao20.UpdateDATA("update logindetails set USER_LEVEL='"+User_Level+"',MTYPE='A' ,Emp_id='"+Emp_Id+"' where USERNAME='"+User_name+"'", 201);
	        }
			else
			{
				empDao.saveCorp_Login(User_name,encrypted_Password, User_Level,Emp_Id);
				
				
			}
			
			
			 if(branchcount2==1)
			 {
        	int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b); 
			 
			 }
			 else
			 {
        	int b = empDao.saveBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);       
			 }
			
			
		}
		
		else if((Access_Level.equalsIgnoreCase("C")))
		{
			 System.out.println("Corporate update---------------------");       
			int corpcount=empDao.Check_Already_User_Corp(User_name);
			 System.out.println("Corporate Count-------------------: "+corpcount);       
			if(corpcount==1)
	        {
			   	dao20.UpdateDATA("update logindetails set USER_LEVEL='"+User_Level+"',MTYPE='A' ,Emp_id='"+Emp_Id+"' where USERNAME='"+User_name+"'", 201);
	        }
			else
			{
				empDao.saveCorp_Login(User_name,encrypted_Password, User_Level,Emp_Id);
				
				 
			}
			
			
		}
	
	
		/*if(Access_Level.equalsIgnoreCase("B"))
		{
			
			int b = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
			 System.out.println("bbbbbbbbbbbbbbbbb---"+b);                   
		}
		else if(Access_Level.equalsIgnoreCase("A"))
		{
			int d = empDao.updateBranch_Login(Btype, User_name, encrypted_Password, Emp_Id, Emp_Name, Designation, User_Level,Status, Mobile_number);
		
			 System.out.println("ddddddddddddddd---"+d);
			 
		}
		if( Access_Level.equalsIgnoreCase("B") || Access_Level.equalsIgnoreCase("A"))
			dao20.UpdateDATA("update login_Details set branch_code='"+Btype+"' where username='"+User_name+"'", 201);
		*/
		
		//27-04-2023
//-------------------------------------------------------------   
			try{
				 CommonsMultipartFile photo2 =  em.getFileData(); 
		         ServletContext servContext=session.getServletContext();
		           // String fileName = photo2.getOriginalFilename();
		          	//String  Emp_Id=em.getEmp_Id();
		             empDao.Edit_Emp_Image(Emp_Id,photo2);
     		}catch(Exception e)
				{
					mp.put("e", e);
					System.out.println("Error---------"+e);
					return new ModelAndView("forward:/error");  
					
				}
			 SimpleDateFormat sd2=new SimpleDateFormat("dd-MM-yyyy");	
		    		 	String Current2=sd2.format(Current_Date);
			
		    		 	//Corp Transaction
						//Corp Transaction
						String Corp_Transaction=null;
						String PermissionLevel=null;
						Corp_Transaction=em.getCorpTransaction();
						PermissionLevel=User_Level;
		/*//13-06-2022-------------------------------------
				if(Muli_branch.equalsIgnoreCase("Y"))
				{
					int countcheck=empDao.Check_Multiuser(User_name);
					if(countcheck==0)
					{ 
					  int k=empDao.Add_in_Multibranch(User_name);
					  System.out.println("Adding Multibranch---"+k);
					}
				}
				else
				{
				int countcheck=empDao.Check_Multiuser(User_name);
				   if(countcheck>0)
					{
					  int k=empDao.Delete_in_Multibranch(User_name);
					  System.out.println("Deleting Multibranch---"+k);
					}
					
				}
				*/
	
				//24-11-2023
				//Subakalyan
			/*	if(Subakalyan.equalsIgnoreCase("Y"))
				{
					dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
					dao20.UpdateDATA("insert into permission_3 values ('"+User_name+"')", 201);
					
				}
				else
				{
					dao20.UpdateDATA("delete from permission_3 where USERNAME='"+User_name+"'", 201);
				}
				
				//Transaction_Edit
				if(Transaction_Edit.equalsIgnoreCase("Y"))
				{
					dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
					dao20.UpdateDATA("insert into permission_2 values ('"+User_name+"')", 201);
					
				}
				else
				{
					dao20.UpdateDATA("delete from permission_2 where USERNAME='"+User_name+"'", 201);
				}*/
				
					/*	if(Corp_Transaction.equalsIgnoreCase("Y"))
						{
							dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
							dao20.UpdateDATA("insert into Corp_Transaction_User values ('"+User_name+"')", 201);
							
						}
						else
						{
							dao20.UpdateDATA("delete from Corp_Transaction_User where USERNAME='"+User_name+"'", 201);
						}*/
				
				//Login type Finger/Button
				/*String finger="N";
				String button="N";
				if(Login_type.contentEquals("A"))
				{
					 finger="Y";
					 button="Y";
				}
				else if(Login_type.contentEquals("F"))
				{
					finger="Y";
					 button="N";	
				}
				else if(Login_type.contentEquals("P"))
				{
					finger="N";
					 button="Y";	
				}
				
				System.out.println("em.getCorp_Login()="+em.getCorp_Login());
				String cfinger="N";
				String cbutton="N";
				System.out.println("cfinger="+cfinger+",cbutton="+cbutton);
				if(em.getCorp_Login().equalsIgnoreCase("A"))
				{
					System.out.println("1");
					 cfinger="Y";
					 cbutton="Y";
				}
				else if(em.getCorp_Login().equalsIgnoreCase("F"))
				{
					System.out.println("2");
					 cfinger="Y";
					 cbutton="N";
				}
				else if(em.getCorp_Login().equalsIgnoreCase("P"))
				{
					System.out.println("3");
					 cfinger="N";
					 cbutton="Y";
				}*/
				//22-02-2024 -
			       dao20.UpdateDATA("update employee_master set Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"' where EMPID='"+Emp_Id+"'",201);
			   	 dao20.UpdateDATA("update employee_master set CORP_TRANSACTION='"+Corp_Transaction+"',Permission_Type='"+PermissionLevel+"' where EMPID='"+Emp_Id+"'", 201);
				
				
				
			/*	
				//Lock / Unlock Employee
				if(!Status.equalsIgnoreCase("A"))
				{
					
					dao20.UpdateDATA("Update Login_Details Set ENABLE='N' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
					dao20.UpdateDATA("Update LoginDetails Set Value='B' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);

				

				}
				else
				{
					
					System.out.println("cfinger="+cfinger+",cbutton="+cbutton);
					
					
					if( Access_Level.equalsIgnoreCase("A"))
					{	
						dao20.UpdateDATA("Update Login_Details Set ENABLE='Y' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
						dao20.UpdateDATA("Update LoginDetails Set Value='N' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);
						empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);
						empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);

					}
					else if( Access_Level.equalsIgnoreCase("B"))
					{
						dao20.UpdateDATA("Update Login_Details Set ENABLE='Y' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
						empDao.InsertUser_Permission_Type(User_name, finger, button,User_Level, 201);

					}
					else if( Access_Level.equalsIgnoreCase("C"))
					{
						dao20.UpdateDATA("Update LoginDetails Set Value='N' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);
						empDao.InsertCorpUser_Permission_Type(User_name, cfinger, cbutton,User_Level, 201);

					}
					dao20.UpdateDATA("Update Login_Details Set ENABLE='Y' Where Username!='200001' and EMP_ID='"+Emp_Id+"'", 201);
					dao20.UpdateDATA("Update LoginDetails Set Value='N' Where Username not in ('200001','pisquare') and Username='"+User_name+"' ", 201);
					empDao.InsertUser_Permission_Type(User_Level, finger, button,PermissionLevel, 201);
					empDao.InsertCorpUser_Permission_Type(User_Level, cfinger, cbutton,PermissionLevel, 201);

				}*/
				empDao.InsertMis_PermissionType(User_name, Muli_branch, Subakalyan,Transaction_Edit, Corp_Transaction,User_Level,Access_Level,Status,Login_type,em.getCorp_Login(),Mobile_number,Btype);

				dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Master ','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'UPDATION :"+em.getEmp_Id()+"')", 201);

		   
		  return new ModelAndView("redirect:/Employee_List");  

    }

    
    
    @RequestMapping(value = "/deleteEmployeeMaster/{Emp_Id}/{User_Name}", method=RequestMethod.GET)
    public ModelAndView deleteEmployee_Master(@ModelAttribute("Employee2")Employee em,@PathVariable String Emp_Id,@PathVariable String User_Name,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
    {  

    	///Session-------------------------------------------------------------
		 session=request.getSession();
			String user=(String) session.getAttribute("user");
			if(user==null)
				 return new ModelAndView("Session");  
   	//-----------------------------------------------------GetPermission-------------------------------------

		session=request.getSession();
		
		String[] per1=perdao.GetPermission(user, "MS");
		
		 String View=null;
		 String Save=null;
		 String Update=null;
		 String Delete=null;
		 String Verify2=null;
		 String Verify3=null;
		 String Verify4=null;
		 String Verify5=null;
		 String Reports1=null;
		 String Button=null;
		 String Finger_Print=null;
				
		 
		 
		 View=per1[0];
		 Save=per1[1];
		 Update=per1[2];
		 Delete=per1[3];
		 Verify2=per1[4];
		 Verify3=per1[5];
		 Verify4=per1[6];
		 Verify5=per1[7];
		 Reports1=per1[8];
		 Button=per1[9];
		 Finger_Print=per1[10];
		
		 int btn_Delete=1;
		 int btn_Save=1;
		 int btn_Update=1;
		 
		 System.out.println("View-------------------------"+View);
		 System.out.println("Save-------------------------"+Save);
		 System.out.println("Update-------------------------"+Update);
		 System.out.println("Delete-------------------------"+Delete);
		 System.out.println("Verify2-------------------------"+Verify2);
		 System.out.println("Verify3-------------------------"+Verify3);
		 System.out.println("Verify4-------------------------"+Verify4);
		 System.out.println("Verify5-------------------------"+Verify5);
		 System.out.println("Reports1-------------------------"+Reports1);
		 System.out.println("Button-------------------------"+Button);
		 System.out.println("Finger_Print-------------------------"+Finger_Print);
		 
		 if (View.equalsIgnoreCase("N"))
				return new ModelAndView("/Authorization");

		
		 if (Delete.equalsIgnoreCase("N"))	
			 btn_Delete = 2;
		 
		 if (Save.equalsIgnoreCase("N"))	
			 btn_Save = 2;
		 
		 if (Update.equalsIgnoreCase("N"))	
			 btn_Update = 2;
		
		 System.out.println("btn_Verify-------------"+btn_Delete);
		  String DeleteFlag=null;
		  String updateFlag=null;
		  String saveFlag=null;
		 if(btn_Delete==2)
		    {
			 DeleteFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 mp.put("deleteDisplay", DeleteFlag);
		 
		 if(btn_Update==2)
		    {
			 updateFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		 if(btn_Save==2)
		    {
			 saveFlag="Display:none;";
			 System.out.println("1111111111111111111111");
		    }
		mp.put("UpdateDisplay", updateFlag);
		
		
		 mp.put("Employee2", em);
		
		  //String save1="display:none";
		 
		 mp.put("SaveDisplay", saveFlag);


		int  a= empDao.deleteEmployee_Master(Emp_Id,201); 
		System.out.println("aaaaaaaaaaaaaaaaaaaaa----------"+a);
		System.out.println("Emp_Id-----------------"+Emp_Id);
		
		if(a==1)
		{
			int b=empDao.deleteBranch_LoginDetails(Emp_Id,201);
			System.out.println("bbbbbbbbbbbbbbbbbbbbbbbb----------"+b);
			int c=empDao.deleteCorp_LoginDetails(User_Name,201);
			System.out.println("ccccccccccccccccccccc----------"+c);
			System.out.println("User_Name-----------------"+User_Name);
		}	 
		  return new ModelAndView("redirect:/Employee_List");  
    }





			    											 @RequestMapping(value = "/GetPermissionCorp/{Username}", method=RequestMethod.GET)
			    								  			    public ModelAndView GetPermissionCorp(@PathVariable String Username,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
			    								  			  	{ 
			    												 
			    													
			    													
			    												    
			    													session=request.getSession();
			    													String user=(String) session.getAttribute("user");
			    													if(user==null)
			    													return  new ModelAndView("Session");
			    													System.out.println("inside structure-------------------------");
			    													String[] per=perdao.GetPermission(user, "HR");
			    													
			    													
			    													 String View=null;
			    													 String Save=null;
			    													 String Update=null;
			    													 String Delete=null;
			    													 String Verify2=null;
			    													 String Verify3=null;
			    													 String Verify4=null;
			    													 String Verify5=null;
			    													 String Reports1=null;
			    													 String Button=null;
			    													 String Finger_Print=null;
			    															
			    													 
			    													 
			    													 View=per[0];
			    													 Save=per[1];
			    													 Update=per[2];
			    													 Delete=per[3];
			    													 Verify2=per[4];
			    													 Verify3=per[5];
			    													 Verify4=per[6];
			    													 Verify5=per[7];
			    													 Reports1=per[8];
			    													 Button=per[9];
			    													 Finger_Print=per[10];
			    													
			    													 
			    													 System.out.println("View-------------------------"+View);
			    													 System.out.println("Save-------------------------"+Save);
			    													 System.out.println("Update-------------------------"+Update);
			    													 System.out.println("Delete-------------------------"+Delete);
			    													 System.out.println("Verify2-------------------------"+Verify2);
			    													 System.out.println("Verify3-------------------------"+Verify3);
			    													 System.out.println("Verify4-------------------------"+Verify4);
			    													 System.out.println("Verify5-------------------------"+Verify5);
			    													 System.out.println("Reports1-------------------------"+Reports1);
			    													 System.out.println("Button-------------------------"+Button);
			    													 System.out.println("Finger_Print-------------------------"+Finger_Print);
			    													 
			    													 
			    													
			    													
			    													int btn_Verify=1;
			    													int btn_Save=1;
			    													int btn_Delete=1;
			    													
			    													//if (View.equalsIgnoreCase("N"))
			    													//	return new ModelAndView("/Authorization");
			    													
			    													
			    													 String temp =  dao10.Get_ScalarFun("Select SUPER_ADMIN  from employee_Master where user_name='"+user+"'",201);
		    										    		       if (!temp.equalsIgnoreCase("Y"))
		    										   						return new ModelAndView("/Authorization");
		    									  					//17-03-2023-----------------------------------
		    										    		 
			    													System.out.println("0000000000000000000000");
			    												    if (Verify2.equalsIgnoreCase("N"))	
			    												       btn_Verify = 2;
			    												    System.out.println("111111111111");
			    												    if (Save.equalsIgnoreCase("N"))
			    												        btn_Save= 2;
			    												    System.out.println("222222222222222222222222");
			    												    if (Update.equalsIgnoreCase("N"))
			    												        btn_Save=2;
			    												    System.out.println("33333333333333333333");
			    												    if (Delete.equalsIgnoreCase("N"))
			    													       btn_Delete = 2;
			    												    System.out.println("444444444444444444444444444");
			    												    System.out.println("Save="+btn_Save);
			    												    mp.put("SaveFlag", btn_Save);
			    												    mp.put("DeleteFlag", btn_Delete);
			    												    
			    												    
			    												    
			    													List <String> operationType=new ArrayList<>();
			    													operationType.add("View");
			    													operationType.add("Save");
			    													operationType.add("Update");
			    													operationType.add("Delete");
			    													operationType.add("Verify2");
			    													operationType.add("Verify3");
			    													operationType.add("Verify4");
			    													operationType.add("Report");
			    													/*operationType.add("Verify5");
			    													operationType.add("Report");
			    													operationType.add("Button");
			    													operationType.add("Finger_Print");*/
			    													
			    													
			    												   Permission per1=new Permission();
			    													
			    													
			    													mp.put("OperationTypes", operationType);
			    													mp.put("Permission", per1);
			    													
			    													mp.put("OperationTypes", operationType);

			    													
			    													String User_Name=null;
			    													
			    													List <Simple> uname1=perdao.getUserLogin();
			    													List<String> uname2=new ArrayList<>();
			    													for(Simple s:uname1)
			    													{
			    														uname2.add(s.getS2());
			    														
			    														if(s.getS2().equalsIgnoreCase(Username))
			    														{
			    															User_Name=s.getS2();
			    															System.out.println("user name-----------------"+User_Name);
			    															
			    														}
			    														System.out.println(s.getS2());  
			    														 
			    													}
			    													per1.setUsername(User_Name);
			    													mp.put("Uname2", uname2);


			    												

			    											// master start---------------------------------------------	
			    												
			    												String View_MS=null;
			    												String Save_Ms=null;
			    												String Update_Ms=null;
			    												String Delete_MS=null;
			    												String Verify2_MS=null;
			    												String Verify3_MS=null;
			    												String Verify4_MS=null;
			    												String Verify5_MS=null;
			    												String Report_MS=null;
			    												String Button_MS=null;
			    												String Finger_Print_MS=null;
			    												
			    												 ArrayList<String> ct2=new ArrayList<>();
			    												List<SimpleBranch> ct1=perdao.getPermission(User_Name, "Admin");
			    												if(ct1!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ct1);
			    													for(SimpleBranch s:ct1)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_MS=s.getS31();
			    														System.out.println("View_MS"+View_MS);
			    														Save_Ms=s.getS32();
			    														System.out.println("Save_Ms"+Save_Ms);
			    														Update_Ms=s.getS33();
			    														System.out.println("Update_Ms"+Update_Ms);
			    														Delete_MS=s.getS34();
			    														System.out.println("Delete_MS"+Delete_MS);
			    														Verify2_MS=s.getS35();
			    														System.out.println("Verify2_MS"+Verify2_MS);
			    														Verify3_MS=s.getS36();
			    														System.out.println("Verify3_MS"+Verify3_MS);
			    														Verify4_MS=s.getS37();
			    														System.out.println("Verify4_MS"+Verify4_MS);
			    														Verify5_MS=s.getS38();
			    														System.out.println("Verify5_MS"+Verify5_MS);
			    														Report_MS=s.getS39();
			    														System.out.println("Report_MS"+Report_MS);
			    														Button_MS=s.getS40();
			    														Finger_Print_MS=s.getS134();
			    														
			    													   if(View_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("View");
			    													   }
			    													   if(Save_Ms.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Save");
			    													   }
			    													   if(Update_Ms.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Update");
			    													   }
			    													   if(Delete_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Delete");
			    													   }
			    													  if(Verify2_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Verify2");
			    													   }
			    													   if(Verify3_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Verify3");
			    													   }
			    													   if(Verify4_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Verify4");
			    													   }
			    													   if(Verify5_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Verify5");
			    													   }if(Report_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Report");
			    													   }
			    													   if(Button_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Button");
			    													   }
			    													   if(Finger_Print_MS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct2.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("mas", ct2);
			    												per1.setMaster_Operation_Types(ct2);
			    												
			    												
			    												}
			    											// master end----------------------------------------------------------
			    												
			    												// customer list start-------------------------------------------------
			    												
			    												String View_CS=null;
			    												String Save_CS=null;
			    												String Update_CS=null;
			    												String Delete_CS=null;
			    												String Verify2_CS=null;
			    												String Verify3_CS=null;
			    												String Verify4_CS=null;
			    												String Verify5_CS=null;
			    												String Report_CS=null;
			    												String Button_CS=null;
			    												String Finger_Print_CS=null;
			    														
			    												
			    												 ArrayList<String> ct21=new ArrayList<>();
			    												List<SimpleBranch> ct11=perdao.getPermission(User_Name, "Business");
			    												if(ct11!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ct11);
			    													for(SimpleBranch s:ct11)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_CS=s.getS31();
			    														System.out.println("View_CS"+View_CS);
			    														Save_CS=s.getS32();
			    														System.out.println("Save_Cs"+Save_CS);
			    														Update_CS=s.getS33();
			    														System.out.println("Update_Cs"+Update_CS);
			    														Delete_CS=s.getS34();
			    														System.out.println("Delete_CS"+Delete_CS);
			    														Verify2_CS=s.getS35();
			    														System.out.println("Verify2_CS"+Verify2_CS);
			    														Verify3_CS=s.getS36();
			    														System.out.println("Verify3_CS"+Verify3_CS);
			    														Verify4_CS=s.getS37();
			    														System.out.println("Verify4_CS"+Verify4_CS);
			    														Verify5_CS=s.getS38();
			    														System.out.println("Verify5_CS"+Verify5_CS);
			    														Report_CS=s.getS39();
			    														System.out.println("Report_CS"+Report_CS);
			    														Button_CS=s.getS40();
			    														Finger_Print_CS=s.getS134();
			    														
			    													   if(View_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("View");
			    													   }
			    													   if(Save_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Save");
			    													   }
			    													   if(Update_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Update");
			    													   }
			    													   if(Delete_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Delete");
			    													   }
			    													  if(Verify2_CS.equalsIgnoreCase("Y"))
			    													   {
			    														  ct21.add("Verify2");
			    													   }
			    													   if(Verify3_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Verify3");
			    													   }
			    													   if(Verify4_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Verify4");
			    													   }
			    													   if(Verify5_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Verify5");
			    													   }if(Report_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Report");
			    													   }
			    													   if(Button_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Button");
			    													   }
			    													   if(Finger_Print_CS.equalsIgnoreCase("Y"))
			    													   {
			    														   ct21.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("cus", ct21);
			    												per1.setCustomerList_Operation_Types(ct21);
			    												
			    												
			    												}
			    												// customer list end--------------------------------------------
			    												
			    												
			    												
			    										// trans start-----------------------------------------
			    												String View_TN=null;
			    												String Save_TN=null;
			    												String Update_TN=null;
			    												String Delete_TN=null;
			    												String Verify2_TN=null;
			    												String Verify3_TN=null;
			    												String Verify4_TN=null;
			    												String Verify5_TN=null;
			    												String Report_TN=null;
			    												String Button_TN=null;
			    												String Finger_Print_TN=null;
			    												
			    												 ArrayList<String> tn21=new ArrayList<>();
			    												List<SimpleBranch> tn11=perdao.getPermission(User_Name, "Recovery");
			    												if(tn11!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+tn11);
			    													for(SimpleBranch s:tn11)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_TN=s.getS31();
			    														System.out.println("View_TN"+View_TN);
			    														Save_TN=s.getS32();
			    														System.out.println("Save_TN"+Save_TN);
			    														Update_TN=s.getS33();
			    														System.out.println("Update_TN"+Update_TN);
			    														Delete_TN=s.getS34();
			    														System.out.println("Delete_TN"+Delete_TN);
			    														Verify2_TN=s.getS35();
			    														System.out.println("Verify2_TN"+Verify2_TN);
			    														Verify3_TN=s.getS36();
			    														System.out.println("Verify3_TN"+Verify3_TN);
			    														Verify4_TN=s.getS37();
			    														System.out.println("Verify4_TN"+Verify4_TN);
			    														Verify5_TN=s.getS38();
			    														System.out.println("Verify5_TN"+Verify5_TN);
			    														Report_TN=s.getS39();
			    														System.out.println("Report_TN"+Report_TN);
			    														Button_TN=s.getS40();
			    														Finger_Print_TN=s.getS134();
			    														
			    													   if(View_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("View");
			    													   }
			    													   if(Save_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Save");
			    													   }
			    													   if(Update_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Update");
			    													   }
			    													   if(Delete_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Delete");
			    													   }
			    													  if(Verify2_TN.equalsIgnoreCase("Y"))
			    													   {
			    														  tn21.add("Verify2");
			    													   }
			    													   if(Verify3_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Verify3");
			    													   }
			    													   if(Verify4_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Verify4");
			    													   }
			    													   if(Verify5_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Verify5");
			    													   }if(Report_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Report");
			    													   }
			    													   if(Button_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Button");
			    													   }
			    													   if(Finger_Print_TN.equalsIgnoreCase("Y"))
			    													   {
			    														   tn21.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("trans", tn21);
			    												per1.setViewTrans_Operation_Types(tn21);
			    												
			    												
			    												}
			    											// trans end----------------------------------------
			    												
			    												//cer start----------------------------------------
			    												
			    												String View_Cer=null;
			    												String Save_Cer=null;
			    												String Update_Cer=null;
			    												String Delete_Cer=null;
			    												String Verify2_Cer=null;
			    												String Verify3_Cer=null;
			    												String Verify4_Cer=null;
			    												String Verify5_Cer=null;
			    												String Report_Cer=null;
			    												String Button_Cer=null;
			    												String Finger_Print_Cer=null;
			    												
			    												 ArrayList<String> cer2=new ArrayList<>();
			    												List<SimpleBranch> cer1=perdao.getPermission(User_Name, "Accounts");
			    												if(cer1!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+cer1);
			    													for(SimpleBranch s:cer1)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_Cer=s.getS31();
			    														System.out.println("View_Cer"+View_Cer);
			    														Save_Cer=s.getS32();
			    														System.out.println("Save_Cer"+Save_Cer);
			    														Update_Cer=s.getS33();
			    														System.out.println("Update_Cer"+Update_Cer);
			    														Delete_Cer=s.getS34();
			    														System.out.println("Delete_Cer"+Delete_Cer);
			    														Verify2_Cer=s.getS35();
			    														System.out.println("Verify2_Cer"+Verify2_Cer);
			    														Verify3_Cer=s.getS36();
			    														System.out.println("Verify3_Cer"+Verify3_Cer);
			    														Verify4_Cer=s.getS37();
			    														System.out.println("Verify4_Cer"+Verify4_Cer);
			    														Verify5_Cer=s.getS38();
			    														System.out.println("Verify5_Cer"+Verify5_Cer);
			    														Report_Cer=s.getS39();
			    														System.out.println("Report_Cer"+Report_Cer);
			    														Button_Cer=s.getS40();
			    														Finger_Print_Cer=s.getS134();
			    														
			    													   if(View_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("View");
			    													   }
			    													   if(Save_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Save");
			    													   }
			    													   if(Update_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Update");
			    													   }
			    													   if(Delete_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Delete");
			    													   }
			    													  if(Verify2_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Verify2");
			    													   }
			    													   if(Verify3_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Verify3");
			    													   }
			    													   if(Verify4_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Verify4");
			    													   }
			    													   if(Verify5_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Verify5");
			    													   }if(Report_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Report");
			    													   }
			    													   if(Button_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Button");
			    													   }
			    													   if(Finger_Print_Cer.equalsIgnoreCase("Y"))
			    													   {
			    														   cer2.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("cer", cer2);
			    												per1.setCertificates_Operation_Types(cer2);
			    												
			    												
			    												}
			    												
			    												// cer send------------------------------------------------------
			    												
			    												//  loan Start---------------------------------------------
			    												
			    												String View_LN=null;
			    												String Save_LN=null;
			    												String Update_LN=null;
			    												String Delete_LN=null;
			    												String Verify2_LN=null;
			    												String Verify3_LN=null;
			    												String Verify4_LN=null;
			    												String Verify5_LN=null;
			    												String Report_LN=null;
			    												String Button_LN=null;
			    												String Finger_Print_LN=null;
			    												
			    												 ArrayList<String> ln2=new ArrayList<>();
			    												List<SimpleBranch> ln1=perdao.getPermission(User_Name, "Branch");
			    												if(ln1!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ln1);
			    													for(SimpleBranch s:ln1)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_LN=s.getS31();
			    														System.out.println("View_LN"+View_LN);
			    														Save_LN=s.getS32();
			    														System.out.println("Save_LN"+Save_LN);
			    														Update_LN=s.getS33();
			    														System.out.println("Update_LN"+Update_LN);
			    														Delete_LN=s.getS34();
			    														System.out.println("Delete_LN"+Delete_LN);
			    														Verify2_LN=s.getS35();
			    														System.out.println("Verify2_LN"+Verify2_LN);
			    														Verify3_LN=s.getS36();
			    														System.out.println("Verify3_LN"+Verify3_LN);
			    														Verify4_LN=s.getS37();
			    														System.out.println("Verify4_LN"+Verify4_LN);
			    														Verify5_LN=s.getS38();
			    														System.out.println("Verify5_LN"+Verify5_LN);
			    														Report_LN=s.getS39();
			    														System.out.println("Report_LN"+Report_LN);
			    														Button_LN=s.getS40();
			    														Finger_Print_LN=s.getS134();
			    														
			    													   if(View_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("View");
			    													   }
			    													   if(Save_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Save");
			    													   }
			    													   if(Update_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Update");
			    													   }
			    													   if(Delete_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Delete");
			    													   }
			    													  if(Verify2_LN.equalsIgnoreCase("Y"))
			    													   {
			    														  ln2.add("Verify2");
			    													   }
			    													   if(Verify3_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Verify3");
			    													   }
			    													   if(Verify4_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Verify4");
			    													   }
			    													   if(Verify5_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Verify5");
			    													   }if(Report_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Report");
			    													   }
			    													   if(Button_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Button");
			    													   }
			    													   if(Finger_Print_LN.equalsIgnoreCase("Y"))
			    													   {
			    														   ln2.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("loan", ln2);
			    												per1.setLoanApproval_Operation_Types(ln2);
			    												
			    												
			    												}
			    										// loan end--------------------------------------------------
			    												
			    												
			    												// app start---------------------------------------
			    												
			    												
			    												
			    												String View_APP=null;
			    												String Save_APP=null;
			    												String Update_APP=null;
			    												String Delete_APP=null;
			    												String Verify2_APP=null;
			    												String Verify3_APP=null;
			    												String Verify4_APP=null;
			    												String Verify5_APP=null;
			    												String Report_APP=null;
			    												String Button_APP=null;
			    												String Finger_Print_APP=null;
			    												
			    												 ArrayList<String> app2=new ArrayList<>();
			    												List<SimpleBranch> app1=perdao.getPermission(User_Name, "Operations");
			    												if(app1!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+app1);
			    													for(SimpleBranch s:app1)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_APP=s.getS31();
			    														System.out.println("View_APP"+View_APP);
			    														Save_APP=s.getS32();
			    														System.out.println("Save_APP"+Save_APP);
			    														Update_APP=s.getS33();
			    														System.out.println("Update_APP"+Update_APP);
			    														Delete_APP=s.getS34();
			    														System.out.println("Delete_APP"+Delete_APP);
			    														Verify2_APP=s.getS35();
			    														System.out.println("Verify2_APP"+Verify2_APP);
			    														Verify3_APP=s.getS36();
			    														System.out.println("Verify3_APP"+Verify3_APP);
			    														Verify4_APP=s.getS37();
			    														System.out.println("Verify4_APP"+Verify4_APP);
			    														Verify5_APP=s.getS38();
			    														System.out.println("Verify5_APP"+Verify5_APP);
			    														Report_APP=s.getS39();
			    														System.out.println("Report_APP"+Report_APP);
			    														Button_APP=s.getS40();
			    														Finger_Print_APP=s.getS134();
			    														
			    													   if(View_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("View");
			    													   }
			    													   if(Save_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Save");
			    													   }
			    													   if(Update_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Update");
			    													   }
			    													   if(Delete_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Delete");
			    													   }
			    													  if(Verify2_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Verify2");
			    													   }
			    													   if(Verify3_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Verify3");
			    													   }
			    													   if(Verify4_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Verify4");
			    													   }
			    													   if(Verify5_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Verify5");
			    													   }if(Report_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Report");
			    													   }
			    													   if(Button_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Button");
			    													   }
			    													   if(Finger_Print_APP.equalsIgnoreCase("Y"))
			    													   {
			    														   app2.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    													mp.addAttribute("approval", app2);
			    												per1.setApprovalList_Operation_Types(app2);
			    												
			    												
			    												}
			    												// app end---------------------------

			    												// tds start-----------------------------
			    												
			    												String View_TDS=null;
			    												String Save_TDS=null;
			    												String Update_TDS=null;
			    												String Delete_TDS=null;
			    												String Verify2_TDS=null;
			    												String Verify3_TDS=null;
			    												String Verify4_TDS=null;
			    												String Verify5_TDS=null;
			    												String Report_TDS=null;
			    												String Button_TDS=null;
			    												String Finger_Print_TDS=null;
			    												
			    												 ArrayList<String> tds2=new ArrayList<>();
			    												List<SimpleBranch> tds1=perdao.getPermission(User_Name, "Planning");
			    												if(tds1!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+tds1);
			    													for(SimpleBranch s:tds1)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_TDS=s.getS31();
			    														System.out.println("View_TDS"+View_TDS);
			    														Save_TDS=s.getS32();
			    														System.out.println("Save_TDS"+Save_TDS);
			    														Update_TDS=s.getS33();
			    														System.out.println("Update_TDS"+Update_TDS);
			    														Delete_TDS=s.getS34();
			    														System.out.println("Delete_TDS"+Delete_TDS);
			    														Verify2_TDS=s.getS35();
			    														System.out.println("Verify2_TDS"+Verify2_TDS);
			    														Verify3_TDS=s.getS36();
			    														System.out.println("Verify3_TDS"+Verify3_TDS);
			    														Verify4_TDS=s.getS37();
			    														System.out.println("Verify4_TDS"+Verify4_TDS);
			    														Verify5_TDS=s.getS38();
			    														System.out.println("Verify5_TDS"+Verify5_TDS);
			    														Report_TDS=s.getS39();
			    														System.out.println("Report_TDS"+Report_TDS);
			    														Button_TDS=s.getS40();
			    														Finger_Print_TDS=s.getS134();
			    														
			    													   if(View_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("View");
			    													   }
			    													   if(Save_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Save");
			    													   }
			    													   if(Update_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Update");
			    													   }
			    													   if(Delete_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Delete");
			    													   }
			    													  if(Verify2_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Verify2");
			    													   }
			    													   if(Verify3_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Verify3");
			    													   }
			    													   if(Verify4_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Verify4");
			    													   }
			    													   if(Verify5_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Verify5");
			    													   }if(Report_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Report");
			    													   }
			    													   if(Button_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Button");
			    													   }
			    													   if(Finger_Print_TDS.equalsIgnoreCase("Y"))
			    													   {
			    														   tds2.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("tds", tds2);
			    												per1.setTDSReport_Operation_Types(tds2);
			    												
			    												
			    												}

			    												
			    												
			    												
			    												// tds end--------------------------
			    												
			    												// Audit Statr----------------------------------
			    												String View_AUD=null;
			    												String Save_AUD=null;
			    												String Update_AUD=null;
			    												String Delete_AUD=null;
			    												String Verify2_AUD=null;
			    												String Verify3_AUD=null;
			    												String Verify4_AUD=null;
			    												String Verify5_AUD=null;
			    												String Report_AUD=null;
			    												String Button_AUD=null;
			    												String Finger_Print_AUD=null;
			    												
			    												 ArrayList<String> aud2=new ArrayList<>();
			    												List<SimpleBranch> aud1=perdao.getPermission(User_Name, "HR");
			    												if(aud1!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+aud1);
			    													for(SimpleBranch s:aud1)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_AUD=s.getS31();
			    														System.out.println("View_AUD"+View_AUD);
			    														Save_AUD=s.getS32();
			    														System.out.println("Save_AUD"+Save_AUD);
			    														Update_AUD=s.getS33();
			    														System.out.println("Update_AUD"+Update_AUD);
			    														Delete_AUD=s.getS34();
			    														System.out.println("Delete_AUD"+Delete_AUD);
			    														Verify2_AUD=s.getS35();
			    														System.out.println("Verify2_AUD"+Verify2_AUD);
			    														Verify3_AUD=s.getS36();
			    														System.out.println("Verify3_AUD"+Verify3_AUD);
			    														Verify4_AUD=s.getS37();
			    														System.out.println("Verify4_AUD"+Verify4_AUD);
			    														Verify5_AUD=s.getS38();
			    														System.out.println("Verify5_AUD"+Verify5_AUD);
			    														Report_AUD=s.getS39();
			    														System.out.println("Report_AUD"+Report_AUD);
			    														Button_AUD=s.getS40();
			    														Finger_Print_AUD=s.getS134();
			    														
			    													   if(View_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("View");
			    													   }
			    													   if(Save_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Save");
			    													   }
			    													   if(Update_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Update");
			    													   }
			    													   if(Delete_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Delete");
			    													   }
			    													  if(Verify2_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Verify2");
			    													   }
			    													   if(Verify3_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Verify3");
			    													   }
			    													   if(Verify4_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Verify4");
			    													   }
			    													   if(Verify5_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Verify5");
			    													   }if(Report_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Report");
			    													   }
			    													   if(Button_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Button");
			    													   }
			    													   if(Finger_Print_AUD.equalsIgnoreCase("Y"))
			    													   {
			    														   aud2.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("audit", aud2);
			    												per1.setAuditReport_Operation_Types(aud2);
			    												
			    												
			    												}
			    												// Audit end---------------------------------------
			    												
			    												
			    												// KYC Start------------------------
			    												
			    												String View_kyc=null;
			    												String Save_kyc=null;
			    												String Update_kyc=null;
			    												String Delete_kyc=null;
			    												String Verify2_kyc=null;
			    												String Verify3_kyc=null;
			    												String Verify4_kyc=null;
			    												String Verify5_kyc=null;
			    												String Report_kyc=null;
			    												String Button_kyc=null;
			    												String Finger_Print_kyc=null;
			    												
			    												 ArrayList<String> ct3=new ArrayList<>();
			    												List<SimpleBranch> ct4=perdao.getPermission(User_Name, "Kyc");
			    												if(ct4!=null)
			    												{
			    													System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ct4);
			    													for(SimpleBranch s:ct4)
			    													{
			    														System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    														View_kyc=s.getS31();
			    														System.out.println("View_Kyc"+View_kyc);
			    														Save_kyc=s.getS32();
			    														System.out.println("Save_kyc"+Save_kyc);
			    														Update_kyc=s.getS33();
			    														System.out.println("Update_kyc"+Update_kyc);
			    														Delete_kyc=s.getS34();
			    														System.out.println("Delete_kyc"+Delete_kyc);
			    														Verify2_kyc=s.getS35();
			    														System.out.println("Verify2_kyc"+Verify2_kyc);
			    														Verify3_kyc=s.getS36();
			    														System.out.println("Verify3_kyc"+Verify3_kyc);
			    														Verify4_kyc=s.getS37();
			    														System.out.println("Verify4_kyc"+Verify4_kyc);
			    														Verify5_kyc=s.getS38();
			    														System.out.println("Verify5_kyc"+Verify5_kyc);
			    														Report_kyc=s.getS39();
			    														System.out.println("Report_kyc"+Report_kyc);
			    														Button_kyc=s.getS40();
			    														Finger_Print_kyc=s.getS134();
			    														
			    													   if(View_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("View");
			    													   }
			    													   if(Save_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Save");
			    													   }
			    													   if(Update_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Update");
			    													   }
			    													   if(Delete_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Delete");
			    													   }
			    													  if(Verify2_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														  ct3.add("Verify2");
			    													   }
			    													   if(Verify3_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Verify3");
			    													   }
			    													   if(Verify4_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Verify4");
			    													   }
			    													   if(Verify5_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Verify5");
			    													   }if(Report_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Report");
			    													   }
			    													   if(Button_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Button");
			    													   }
			    													   if(Finger_Print_kyc.equalsIgnoreCase("Y"))
			    													   {
			    														   ct3.add("Finger_Print");
			    													   }
			    													  		  
			    													
			    													}
			    												mp.addAttribute("kyc", ct3);
			    												per1.setKYC_Operation_Types(ct3);
			    												
			    												
			    												}
			    												
			    												// KYC End------------------------------
			    											
			    												// Tranaction------------------------
			    												
			    														String View_trans_app=null;
			    														String Save_trans_app=null;
			    														String Update_trans_app=null;
			    														String Delete_trans_app=null;
			    														String Verify2_trans_app=null;
			    														String Verify3_trans_app=null;
			    														String Verify4_trans_app=null;
			    														String Verify5_trans_app=null;
			    														String Report_trans_app=null;
			    														String Button_trans_app=null;
			    														String Finger_Print_trans_app=null;
			    														
			    														 ArrayList<String> ct5=new ArrayList<>();
			    														List<SimpleBranch> ct6=perdao.getPermission(User_Name, "Transaction");
			    														if(ct6!=null)
			    														{
			    															System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ct6);
			    															for(SimpleBranch s:ct6)
			    															{
			    																System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    																View_trans_app=s.getS31();
			    																System.out.println("View_trans_app"+View_trans_app);
			    																Save_trans_app=s.getS32();
			    																System.out.println("Save_trans_app"+Save_trans_app);
			    																Update_trans_app=s.getS33();
			    																System.out.println("Update_trans_app"+Update_trans_app);
			    																Delete_trans_app=s.getS34();
			    																System.out.println("Delete_trans_app"+Delete_trans_app);
			    																Verify2_trans_app=s.getS35();
			    																System.out.println("Verify2_trans_app"+Verify2_trans_app);
			    																Verify3_trans_app=s.getS36();
			    																System.out.println("Verify3_trans_app"+Verify3_trans_app);
			    																Verify4_trans_app=s.getS37();
			    																System.out.println("Verify4_trans_app"+Verify4_trans_app);
			    																Verify5_trans_app=s.getS38();
			    																System.out.println("Verify5_trans_app"+Verify5_trans_app);
			    																Report_trans_app=s.getS39();
			    																System.out.println("Report_trans_app"+Report_trans_app);
			    																Button_trans_app=s.getS40();
			    																Finger_Print_trans_app=s.getS134();
			    																
			    															   if(View_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("View");
			    															   }
			    															   if(Save_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Save");
			    															   }
			    															   if(Update_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Update");
			    															   }
			    															   if(Delete_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Delete");
			    															   }
			    															  if(Verify2_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																  ct5.add("Verify2");
			    															   }
			    															   if(Verify3_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Verify3");
			    															   }
			    															   if(Verify4_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Verify4");
			    															   }
			    															   if(Verify5_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Verify5");
			    															   }if(Report_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Report");
			    															   }
			    															   if(Button_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Button");
			    															   }
			    															   if(Finger_Print_trans_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct5.add("Finger_Print");
			    															   }
			    															  		  
			    															
			    															}
			    														mp.addAttribute("trans_app", ct5);
			    														per1.setTrans_App_Operation_Types(ct5);
			    														
			    														
			    														}
			    														
			    														// trans End------------------------------

			    														// loan_app Start------------------------
			    														
			    														String View_loan_app=null;
			    														String Save_loan_app=null;
			    														String Update_loan_app=null;
			    														String Delete_loan_app=null;
			    														String Verify2_loan_app=null;
			    														String Verify3_loan_app=null;
			    														String Verify4_loan_app=null;
			    														String Verify5_loan_app=null;
			    														String Report_loan_app=null;
			    														String Button_loan_app=null;
			    														String Finger_Print_loan_app=null;
			    														
			    														 ArrayList<String> ct7=new ArrayList<>();
			    														List<SimpleBranch> ct8=perdao.getPermission(User_Name, "Loan");
			    														if(ct8!=null)
			    														{
			    															System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ct8);
			    															for(SimpleBranch s:ct8)
			    															{
			    																System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    																View_loan_app=s.getS31();
			    																System.out.println("View_loan_app"+View_loan_app);
			    																Save_loan_app=s.getS32();
			    																System.out.println("Save_loan_app"+Save_loan_app);
			    																Update_loan_app=s.getS33();
			    																System.out.println("Update_loan_app"+Update_loan_app);
			    																Delete_loan_app=s.getS34();
			    																System.out.println("Delete_loan_app"+Delete_loan_app);
			    																Verify2_loan_app=s.getS35();
			    																System.out.println("Verify2_loan_app"+Verify2_loan_app);
			    																Verify3_loan_app=s.getS36();
			    																System.out.println("Verify3_loan_app"+Verify3_loan_app);
			    																Verify4_loan_app=s.getS37();
			    																System.out.println("Verify4_loan_app"+Verify4_loan_app);
			    																Verify5_loan_app=s.getS38();
			    																System.out.println("Verify5_loan_app"+Verify5_loan_app);
			    																Report_loan_app=s.getS39();
			    																System.out.println("Report_loan_app"+Report_loan_app);
			    																Button_loan_app=s.getS40();
			    																Finger_Print_loan_app=s.getS134();
			    																
			    															   if(View_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("View");
			    															   }
			    															   if(Save_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Save");
			    															   }
			    															   if(Update_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Update");
			    															   }
			    															   if(Delete_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Delete");
			    															   }
			    															  if(Verify2_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																  ct7.add("Verify2");
			    															   }
			    															   if(Verify3_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Verify3");
			    															   }
			    															   if(Verify4_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Verify4");
			    															   }
			    															   if(Verify5_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Verify5");
			    															   }if(Report_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Report");
			    															   }
			    															   if(Button_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Button");
			    															   }
			    															   if(Finger_Print_loan_app.equalsIgnoreCase("Y"))
			    															   {
			    																   ct7.add("Finger_Print");
			    															   }
			    															  		  
			    															
			    															}
			    														mp.addAttribute("loan_app", ct7);
			    														per1.setLoan_App_Operation_Types(ct7);
			    														
			    														
			    														}
			    														
			    														// loan_app End------------------------------

			    												
			    														// KYC Start------------------------
			    														
			    														String View_day_end=null;
			    														String Save_day_end=null;
			    														String Update_day_end=null;
			    														String Delete_day_end=null;
			    														String Verify2_day_end=null;
			    														String Verify3_day_end=null;
			    														String Verify4_day_end=null;
			    														String Verify5_day_end=null;
			    														String Report_day_end=null;
			    														String Button_day_end=null;
			    														String Finger_Print_day_end=null;
			    														
			    														 ArrayList<String> ct10=new ArrayList<>();
			    														List<SimpleBranch> ct9=perdao.getPermission(User_Name, "Day_End");
			    														if(ct9!=null)
			    														{
			    															System.out.println("aaaaaaaaaaaaaaaaaaaaaa"+ct9);
			    															for(SimpleBranch s:ct9)
			    															{
			    																System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    																View_day_end=s.getS31();
			    																System.out.println("View_day_end"+View_day_end);
			    																Save_day_end=s.getS32();
			    																System.out.println("Save_day_end"+Save_day_end);
			    																Update_day_end=s.getS33();
			    																System.out.println("Update_day_end"+Update_day_end);
			    																Delete_day_end=s.getS34();
			    																System.out.println("Delete_day_end"+Delete_day_end);
			    																Verify2_day_end=s.getS35();
			    																System.out.println("Verify2_day_end"+Verify2_day_end);
			    																Verify3_day_end=s.getS36();
			    																System.out.println("Verify3_day_end"+Verify3_day_end);
			    																Verify4_day_end=s.getS37();
			    																System.out.println("Verify4_day_end"+Verify4_day_end);
			    																Verify5_day_end=s.getS38();
			    																System.out.println("Verify5_day_end"+Verify5_day_end);
			    																Report_day_end=s.getS39();
			    																System.out.println("Report_day_end"+Report_day_end);
			    																Button_day_end=s.getS40();
			    																Finger_Print_day_end=s.getS134();
			    																
			    															   if(View_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("View");
			    															   }
			    															   if(Save_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Save");
			    															   }
			    															   if(Update_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Update");
			    															   }
			    															   if(Delete_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Delete");
			    															   }
			    															  if(Verify2_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																  ct10.add("Verify2");
			    															   }
			    															   if(Verify3_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Verify3");
			    															   }
			    															   if(Verify4_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Verify4");
			    															   }
			    															   if(Verify5_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Verify5");
			    															   }if(Report_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Report");
			    															   }
			    															   if(Button_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Button");
			    															   }
			    															   if(Finger_Print_day_end.equalsIgnoreCase("Y"))
			    															   {
			    																   ct10.add("Finger_Print");
			    															   }
			    															  		  
			    															
			    															}
			    														mp.addAttribute("day_end", ct10);
			    														per1.setDay_End_Operation_Types(ct10);
			    														
			    														
			    														}
			    														
			    														// Day End------------------------------
			    														
			    														
			    														// Attendance Statr----------------------------------
			    														String View_Attendance=null;
			    														String Save_Attendance=null;
			    														String Update_Attendance=null;
			    														String Delete_Attendance=null;
			    														String Verify2_Attendance=null;
			    														String Verify3_Attendance=null;
			    														String Verify4_Attendance=null;
			    														String Verify5_Attendance=null;
			    														String Report_Attendance=null;
			    														String Button_Attendance=null;
			    														String Finger_Print_Attendance=null;
			    														
			    														 ArrayList<String> att2=new ArrayList<>();
			    														List<SimpleBranch> att1=perdao.getPermission(User_Name, "UP");
			    														if(att1!=null)
			    														{
			    															System.out.println("aaaaaaaaaaaaaaaaaaaaaa="+att1);
			    															for(SimpleBranch s:att1)
			    															{
			    																System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    																View_Attendance=s.getS31();
			    																System.out.println("View_AUD"+View_AUD);
			    																Save_Attendance=s.getS32();
			    																System.out.println("Save_AUD"+Save_AUD);
			    																Update_Attendance=s.getS33();
			    																System.out.println("Update_AUD"+Update_AUD);
			    																Delete_Attendance=s.getS34();
			    																System.out.println("Delete_AUD"+Delete_AUD);
			    																Verify2_Attendance=s.getS35();
			    																System.out.println("Verify2_AUD"+Verify2_AUD);
			    																Verify3_Attendance=s.getS36();
			    																System.out.println("Verify3_AUD"+Verify3_AUD);
			    																Verify4_Attendance=s.getS37();
			    																System.out.println("Verify4_AUD"+Verify4_AUD);
			    																Verify5_Attendance=s.getS38();
			    																System.out.println("Verify5_AUD"+Verify5_AUD);
			    																Report_Attendance=s.getS39();
			    																System.out.println("Report_AUD"+Report_AUD);
			    																Button_Attendance=s.getS40();
			    																Finger_Print_Attendance=s.getS134();
			    																
			    															   if(View_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("View");
			    															   }
			    															   if(Save_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Save");
			    															   }
			    															   if(Update_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Update");
			    															   }
			    															   if(Delete_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Delete");
			    															   }
			    															  if(Verify2_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Verify2");
			    															   }
			    															   if(Verify3_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Verify3");
			    															   }
			    															   if(Verify4_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Verify4");
			    															   }
			    															   if(Verify5_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Verify5");
			    															   }if(Report_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Report");
			    															   }
			    															   if(Button_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Button");
			    															   }
			    															   if(Finger_Print_Attendance.equalsIgnoreCase("Y"))
			    															   {
			    																   att2.add("Finger_Print");
			    															   }
			    															  		  
			    															
			    															}
			    														mp.addAttribute("attendance", att2);
			    														per1.setAuditReport_Operation_Types(aud2);
			    														per1.setStaff_Attendance_Operation_Types(att2);

			    														
			    														
			    														}
			    														// Attendance end---------------------------------------
			    														
			    														
			    														// Cash TransApproval----------------------------------
			    														String View_Cash_Trans=null;
			    														String Save_Cash_Trans=null;
			    														String Update_Cash_Trans=null;
			    														String Delete_Cash_Trans=null;
			    														String Verify2_Cash_Trans=null;
			    														String Verify3_Cash_Trans=null;
			    														String Verify4_Cash_Trans=null;
			    														String Verify5_Cash_Trans=null;
			    														String Report_Cash_Trans=null;
			    														String Button_Cash_Trans=null;
			    														String Finger_Print_Cash_Trans=null;
			    														
			    														 ArrayList<String> casht2=new ArrayList<>();
			    														List<SimpleBranch> cashT=perdao.getPermission(User_Name, "CashTrans");
			    														if(cashT!=null)
			    														{
			    															System.out.println("aaaaaaaaaaaaaaaaaaaaaa="+cashT);
			    															for(SimpleBranch s:cashT)
			    															{
			    																System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    																View_Cash_Trans=s.getS31();
			    																System.out.println("View_Cash_Trans"+View_Cash_Trans);
			    																Save_Cash_Trans=s.getS32();
			    																System.out.println("Save_Cash_Trans"+Save_Cash_Trans);
			    																Update_Cash_Trans=s.getS33();
			    																System.out.println("Update_Cash_Trans"+Update_Cash_Trans);
			    																Delete_Cash_Trans=s.getS34();
			    																System.out.println("Delete_Cash_Trans"+Delete_Cash_Trans);
			    																Verify2_Cash_Trans=s.getS35();
			    																System.out.println("Verify2_Cash_Trans"+Verify2_Cash_Trans);
			    																Verify3_Cash_Trans=s.getS36();
			    																System.out.println("Verify3_Cash_Trans"+Verify3_Cash_Trans);
			    																Verify4_Cash_Trans=s.getS37();
			    																System.out.println("Verify4_Cash_Trans"+Verify4_Cash_Trans);
			    																Verify5_Cash_Trans=s.getS38();
			    																System.out.println("Verify5_Cash_Trans"+Verify5_Cash_Trans);
			    																Report_Cash_Trans=s.getS39();
			    																System.out.println("Report_Cash_Trans"+Report_Cash_Trans);
			    																Button_Cash_Trans=s.getS40();
			    																Finger_Print_Cash_Trans=s.getS134();
			    																
			    															   if(View_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("View");
			    															   }
			    															   if(Save_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Save");
			    															   }
			    															   if(Update_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Update");
			    															   }
			    															   if(Delete_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Delete");
			    															   }
			    															  if(Verify2_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																  casht2.add("Verify2");
			    															   }
			    															   if(Verify3_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Verify3");
			    															   }
			    															   if(Verify4_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Verify4");
			    															   }
			    															   if(Verify5_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Verify5");
			    															   }if(Report_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Report");
			    															   }
			    															   if(Button_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Button");
			    															   }
			    															   if(Finger_Print_Cash_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   casht2.add("Finger_Print");
			    															   }
			    															  		  
			    															
			    															}
			    														mp.addAttribute("CashTrans", casht2);
			    														per1.setCash_Transaction_Operation_Types(casht2);

			    														
			    														
			    														}
			    														// Cash TransApproval end---------------------------------------
			    														
			    													
			    														// Expenses TransApproval----------------------------------
			    														String View_Expenses_Trans=null;
			    														String Save_Expenses_Trans=null;
			    														String Update_Expenses_Trans=null;
			    														String Delete_Expenses_Trans=null;
			    														String Verify2_Expenses_Trans=null;
			    														String Verify3_Expenses_Trans=null;
			    														String Verify4_Expenses_Trans=null;
			    														String Verify5_Expenses_Trans=null;
			    														String Report_Expenses_Trans=null;
			    														String Button_Expenses_Trans=null;
			    														String Finger_Print_Expenses_Trans=null;
			    														
			    														 ArrayList<String> Expenses2=new ArrayList<>();
			    														List<SimpleBranch> ExpensesT=perdao.getPermission(User_Name, "ExpensesTrans");
			    														if(ExpensesT!=null)
			    														{
			    															System.out.println("aaaaaaaaaaaaaaaaaaaaaa="+ExpensesT);
			    															for(SimpleBranch s:ExpensesT)
			    															{
			    																System.out.println("bbbbbbbbbbbbbbbbbbbb");
			    																View_Expenses_Trans=s.getS31();
			    																System.out.println("View_Cash_Trans"+View_Cash_Trans);
			    																Save_Expenses_Trans=s.getS32();
			    																System.out.println("Save_Cash_Trans"+Save_Cash_Trans);
			    																Update_Expenses_Trans=s.getS33();
			    																System.out.println("Update_Cash_Trans"+Update_Cash_Trans);
			    																Delete_Expenses_Trans=s.getS34();
			    																System.out.println("Delete_Cash_Trans"+Delete_Cash_Trans);
			    																Verify2_Expenses_Trans=s.getS35();
			    																System.out.println("Verify2_Cash_Trans"+Verify2_Cash_Trans);
			    																Verify3_Expenses_Trans=s.getS36();
			    																System.out.println("Verify3_Cash_Trans"+Verify3_Cash_Trans);
			    																Verify4_Expenses_Trans=s.getS37();
			    																System.out.println("Verify4_Cash_Trans"+Verify4_Cash_Trans);
			    																Verify5_Expenses_Trans=s.getS38();
			    																System.out.println("Verify5_Cash_Trans"+Verify5_Cash_Trans);
			    																Report_Expenses_Trans=s.getS39();
			    																System.out.println("Report_Cash_Trans"+Report_Cash_Trans);
			    																Button_Expenses_Trans=s.getS40();
			    																Finger_Print_Expenses_Trans=s.getS134();
			    																
			    															   if(View_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("View");
			    															   }
			    															   if(Save_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Save");
			    															   }
			    															   if(Update_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Update");
			    															   }
			    															   if(Delete_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Delete");
			    															   }
			    															  if(Verify2_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																  Expenses2.add("Verify2");
			    															   }
			    															   if(Verify3_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Verify3");
			    															   }
			    															   if(Verify4_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Verify4");
			    															   }
			    															   if(Verify5_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Verify5");
			    															   }if(Report_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Report");
			    															   }
			    															   if(Button_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Button");
			    															   }
			    															   if(Finger_Print_Expenses_Trans.equalsIgnoreCase("Y"))
			    															   {
			    																   Expenses2.add("Finger_Print");
			    															   }
			    															  		  
			    															
			    															}
			    														mp.addAttribute("ExpensesTrans", Expenses2);
			    														per1.setExpenses_Transaction_Operation_Types(Expenses2);

			    														
			    														
			    														}
			    														// Expenses TransApproval end---------------------------------------
			    														
			    														

			    												// Permission setting end-----------------------

			    												 return new ModelAndView("Permission");  

			    											}
			    											 
			    											 
			    											 @RequestMapping(value = "/GetPermissionBranch_Type2/{Username}", method=RequestMethod.GET)
			    								  			    public ModelAndView GetPermissionBranch_Type2(@PathVariable String Username,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
			    								  			   	 
			    								  				{ 
			    												  
			    								    				
			    								    				//-----------------------------------------------------GetPermission-------------------------------------

			    								    						///Session-------------------------------------------------------------
			    								    						 session=request.getSession();
			    								    							String user=(String) session.getAttribute("user");
			    								    							if(user==null)
			    								    							return  new ModelAndView("Session");
			    								    					   //--------------------------------------------------------------------
			    								    						
			    								    						
			    								    						int DBCode=(int) session.getAttribute("Branch");
			    								    						String[] cper1=perdao.GetPermission(user, "HR");
				    														
				    														 String View=null;
				    														 String Save=null;
				    														 String Update=null;
				    														 String Delete=null;
				    														 String Verify2=null;
				    														 String Verify3=null;
				    														 String Verify4=null;
				    														 String Verify5=null;
				    														 String Reports1=null;
				    														 String Button=null;
				    														 String Finger_Print=null;
				    																
				    														 
				    														 
				    														 View=cper1[0];
				    														 Save=cper1[1];
				    														 Update=cper1[2];
				    														 Delete=cper1[3];
				    														 Verify2=cper1[4];
				    														 Verify3=cper1[5];
				    														 Verify4=cper1[6];
				    														 Verify5=cper1[7];
				    														 Reports1=cper1[8];
				    														 Button=cper1[9];
				    														 Finger_Print=cper1[10];
				    														
				    														 int btn_Delete=1;
				    														 int btn_Save=1;
				    														 int btn_Update=1;
				    														 
				    														 System.out.println("View-------------------------"+View);
				    														 System.out.println("Save-------------------------"+Save);
				    														 System.out.println("Update-------------------------"+Update);
				    														 System.out.println("Delete-------------------------"+Delete);
				    														 System.out.println("Verify2-------------------------"+Verify2);
				    														 System.out.println("Verify3-------------------------"+Verify3);
				    														 System.out.println("Verify4-------------------------"+Verify4);
				    														 System.out.println("Verify5-------------------------"+Verify5);
				    														 System.out.println("Reports1-------------------------"+Reports1);
				    														 System.out.println("Button-------------------------"+Button);
				    														 System.out.println("Finger_Print-------------------------"+Finger_Print);
				    														 
				    														 //if (View.equalsIgnoreCase("N"))
				    															//	return new ModelAndView("/Authorization");

				    														 String temp =  dao10.Get_ScalarFun("Select SUPER_ADMIN  from employee_Master where user_name='"+user+"'",201);
				    										    		       if (!temp.equalsIgnoreCase("Y"))
				    										   						return new ModelAndView("/Authorization");
				    									  					//17-03-2023-----------------------------------
				    										    		       
				    														 if (Delete.equalsIgnoreCase("N"))	
				    															 btn_Delete = 2;
				    														 
				    														 if (Save.equalsIgnoreCase("N"))	
				    															 btn_Save = 2;
				    														 
				    														 if (Update.equalsIgnoreCase("N"))	
				    															 btn_Update = 2;
				    														
				    														 System.out.println("btn_Verify-------------"+btn_Delete);
				    														  String DeleteFlag=null;
				    														  String SaveFlag=null;
				    														 if(btn_Delete==2)
				    														    {
				    															 DeleteFlag="Display:none;";
				    															 System.out.println("1111111111111111111111");
				    														    }
				    														 
				    														 if(btn_Save==2)
				    														    {
				    															 SaveFlag="Display:none;";
				    															 System.out.println("1111111111111111111111");
				    														    }
				    														mp.put("SaveDisplay", SaveFlag);
				    														mp.put("deletDisplay", DeleteFlag);
				    														//-------------------------------------
			    								    						/*
			    								    						List <String> branch=new ArrayList<>();
			    								    						branch.add("Trichy");
			    								    						branch.add("Madurai");
			    								    						branch.add("kovai");
			    								    						*/
			    								    						
			    								    						
			    								    						List <Simple> bList=empDao.getBranchName1();
			    								    						List <String> branch=new ArrayList<>();
			    								    						for(Simple s:bList)
			    								    						{
			    								    							branch.add(s.getS2());
			    								    							System.out.println(s.getS2());  
			    								    							 
			    								    						}
			    								    						
			    								    						/*
			    								    						List <Branch_Master> bList=empDao.getBranchMaster();
			    								    						List <String> branch=new ArrayList<>();
			    								    						for(Branch_Master br:bList)
			    								    						{
			    								    							branch.add(br.getBranch_Name());
			    								    							System.out.println(br.getBranch_Name());  
			    								    							 
			    								    						}
			    								    						*/
			    								    						
			    								    						
			    								    						List <String> pageType=new ArrayList<>();
			    								    						pageType.add("CT");
			    								    						pageType.add("JLT");
			    								    						pageType.add("SM");
			    								    						 
			    								    						
			    								    						
			    								    						
			    								    						//ArrayList<Cus> un1=(ArrayList<Cus>) dao.getCustomerName();
			    								    						//ArrayList<SimpleBranch> un1=(ArrayList<SimpleBranch>) dao.getCustomerName2();
			    								    					//	List<Cus> un=dao.getCustomerName();
			    								    						
			    								    						List <String> operationType=new ArrayList<>();
			    								    						operationType.add("View");
			    								    						operationType.add("Save");
			    								    						operationType.add("Update");
			    								    						operationType.add("Delete");
			    								    						operationType.add("Verify1");
			    								    						operationType.add("Verify2");
			    								    						operationType.add("Reports");
			    								    						//operationType.add("Finger");operationType.add("Button");
			    								    						
			    								    						List <Branch_Master> branchList=empDao.getBranch_Master();
			    								    						mp.addAttribute("BranchList1", branchList);
			    								    						
			    								    						//List <UserDetails> userName=dao.getUserDetails();
			    								    						//mp.addAttribute("UsernameList", userName);
			    								    						
			    								    						Permission per1=new Permission();
			    								    						mp.put("BranchList", branch);
			    								    						mp.put("PageTypeList", pageType);
			    								    						mp.put("OperationTypes", operationType);
			    								    						//model.put("UserIdList", un1);
			    								    						mp.put("Permission", per1);
			    								    					
			    								    					//	mp.addAttribute("UserIdList1",dao.getCustomerId());
			    								    						
			    								    						
			    								    					//	for(SimpleBranch c:un1){  
			    								    						//     System.out.println(c.getCname());  
			    								    						//   }  
			    								    						  
			    								    						
			    								    					//	List<String> uname=new ArrayList<>();
			    								    					//	for(UserDetails u:userName)
			    								    					//	{
			    								    					//		uname.add(u.getUsername());
			    								    					//		System.out.println(u.getUsername());  
			    								    							 
			    								    					//	}
			    								    					//	model.put("Uname", uname);
			    								    						
			    								    						int f=1;
			    								    						String User_Name=null;
			    								    						
			    								    						List <Simple> uname1=empDao.getUserLogin();
			    								    						List<String> uname2=new ArrayList<>();
			    								    						for(Simple s:uname1)
			    								    						{
			    								    							uname2.add(s.getS2());
			    								    							
			    								    							if(s.getS2().equalsIgnoreCase(Username))
			    								    							{
			    								    								User_Name=s.getS2();
			    								    								
			    								    							}
			    								    							System.out.println(s.getS2());  
			    								    							 
			    								    						}
			    								    						per1.setUsername(User_Name);
			    								    						mp.put("Uname2", uname2);
			    								    						
			    								    						//--------------------------Customer--------------------------------------------
			    								    								String ViewCT=null;
			    								    								String SaveCT=null;
			    								    								String DeleteCT=null;
			    								    								String UpdateCT=null;
			    								    								String Verify1CT=null;
			    								    								String Verify2CT=null;
			    								    								String ReportCT=null;
			    								    								String Finger1CT=null;
			    								    								String Button1CT=null;
			    								    								
			    								    								   ArrayList<String> ct2=new ArrayList<>();
			    								    								List<SimpleBranch> ct1=empDao.getPermission(User_Name, "CT");
			    								    								if(ct1!=null)
			    								    								{
			    								    									for(SimpleBranch s:ct1)
			    								    									{
			    								    									    ViewCT=s.getS31();
			    								    									   SaveCT=s.getS32();
			    								    									   DeleteCT=s.getS33();
			    								    									   UpdateCT=s.getS34();
			    								    									   Verify1CT=s.getS35();
			    								    									   Verify2CT=s.getS36();
			    								    									   ReportCT=s.getS37();
			    								    									   
			    								    									   Finger1CT=s.getS38();
			    								    									   Button1CT=s.getS39();
			    								    									   
			    								    									   if(ViewCT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("View");
			    								    									   }
			    								    									   if(SaveCT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Save");
			    								    									   }
			    								    									   if(DeleteCT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Delete");
			    								    									   }
			    								    									   if(UpdateCT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Update");
			    								    									   }if(Verify1CT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Verify1");
			    								    									   }
			    								    									   if(Verify2CT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Verify2");
			    								    									   }if(ReportCT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Reports");
			    								    									   }
			    								    									 
			    								    									   
			    								    									   if(Finger1CT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Finger");
			    								    									   }if(Button1CT.equalsIgnoreCase("Y"))
			    								    									   {
			    								    										   ct2.add("Button");
			    								    									   }
			    								    									  		  
			    								    									
			    								    									}
			    								    							
			    								    								
			    								    							
			    								    								
			    								    								//mp.addAttribute("Permission", per);
			    								    								mp.addAttribute("cus", ct2);
			    								    								per1.setCT_Operation_Types(ct2);
			    								    								}
			    								    								//-----------------------------------------------------------------------------------------
			    								    								//--------------------------Customer--------------------------------------------
			    								    										String ViewSM=null;
			    								    										String SaveSM=null;
			    								    										String DeleteSM=null;
			    								    										String UpdateSM=null;
			    								    										String Verify1SM=null;
			    								    										String Verify2SM=null;
			    								    										String ReportSM=null;
			    								    										
			    								    										String Finger1SM=null;
			    								    										String Button1SM=null;

			    								    										
			    								    										   ArrayList<String> SM2=new ArrayList<>();
			    								    										List<SimpleBranch> SM1=empDao.getPermission(User_Name, "SM");
			    								    										if(SM1!=null)
			    								    										{
			    								    											for(SimpleBranch s:SM1)
			    								    											{
			    								    											    ViewSM=s.getS31();
			    								    											   SaveSM=s.getS32();
			    								    											   DeleteSM=s.getS33();
			    								    											   UpdateSM=s.getS34();
			    								    											   Verify1SM=s.getS35();
			    								    											   Verify2SM=s.getS36();
			    								    											   ReportSM=s.getS37();
			    								    											   
			    								    											   Finger1SM=s.getS38();
			    								    											   Button1SM=s.getS39();
			    								    											   
			    								    											   if(ViewSM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("View");
			    								    											   }
			    								    											   if(SaveSM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("Save");
			    								    											   }
			    								    											   if(DeleteSM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("Delete");
			    								    											   }
			    								    											   if(UpdateSM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("Update");
			    								    											   }if(Verify1SM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2SM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("Verify2");
			    								    											   }if(ReportSM.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SM2.add("Reports");
			    								    											   }
			    								    											   
			    								    											   
			    								    											   if(Finger1SM.equalsIgnoreCase("Y"))
			    								    											   {   SM2.add("Finger");
			    								    												}
			    								    											if(Button1SM.equalsIgnoreCase("Y"))
			    								    											   {   SM2.add("Button");
			    								    												}
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("sm", SM2);
			    								    										per1.setSM_Operation_Types(SM2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewSD=null;
			    								    										String SaveSD=null;
			    								    										String DeleteSD=null;
			    								    										String UpdateSD=null;
			    								    										String Verify1SD=null;
			    								    										String Verify2SD=null;
			    								    										String ReportSD=null;
			    								    										
			    								    										

			    								    										String Finger1SD=null;
			    								    										String Button1SD=null;

			    								    										
			    								    										
			    								    										
			    								    										   ArrayList<String> SD2=new ArrayList<>();
			    								    										List<SimpleBranch> SD1=empDao.getPermission(User_Name, "SD");
			    								    										if(SD1!=null)
			    								    										{
			    								    											for(SimpleBranch s:SD1)
			    								    											{
			    								    											    ViewSD=s.getS31();
			    								    											   SaveSD=s.getS32();
			    								    											   DeleteSD=s.getS33();
			    								    											   UpdateSD=s.getS34();
			    								    											   Verify1SD=s.getS35();
			    								    											   Verify2SD=s.getS36();
			    								    											   ReportSD=s.getS37(); 
			    								    											   
			    								    											   Finger1SD=s.getS38();
			    								    												 Button1SD=s.getS39();
			    								    											   
			    								    											   
			    								    											   
			    								    											   
			    								    											   if(ViewSD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("View");
			    								    											   }
			    								    											   if(SaveSD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("Save");
			    								    											   }
			    								    											   if(DeleteSD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("Delete");
			    								    											   }
			    								    											   if(UpdateSD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("Update");
			    								    											   }if(Verify1SD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2SD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("Verify2");
			    								    											   }if(ReportSD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   SD2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											   
			    								    											   if(Finger1SD.equalsIgnoreCase("Y"))
			    								    											   {   SD2.add("Finger");
			    								    												}
			    								    											if(Button1SD.equalsIgnoreCase("Y"))
			    								    											   {   SD2.add("Button");
			    								    												}
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("sd", SD2);
			    								    										per1.setSD_Operation_Types(SD2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewFD=null;
			    								    										String SaveFD=null;
			    								    										String DeleteFD=null;
			    								    										String UpdateFD=null;
			    								    										String Verify1FD=null;
			    								    										String Verify2FD=null;
			    								    										String ReportFD=null;
			    								    										
			    								    										String Finger1FD=null;
			    								    										String Button1FD=null;
			    								    										
			    								    										   ArrayList<String> FD2=new ArrayList<>();
			    								    										List<SimpleBranch> FD1=empDao.getPermission(User_Name, "FD");
			    								    										if(FD1!=null)
			    								    										{
			    								    											for(SimpleBranch s:FD1)
			    								    											{
			    								    											    ViewFD=s.getS31();
			    								    											   SaveFD=s.getS32();
			    								    											   DeleteFD=s.getS33();
			    								    											   UpdateFD=s.getS34();
			    								    											   Verify1FD=s.getS35();
			    								    											   Verify2FD=s.getS36();
			    								    											   ReportFD=s.getS37();
			    								    											   
			    								    											   
			    								    											   Finger1FD=s.getS38();
			    								    											   Button1FD=s.getS39();
			    								    											   
			    								    											   if(ViewFD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("View");
			    								    											   }
			    								    											   if(SaveFD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("Save");
			    								    											   }
			    								    											   if(DeleteFD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("Delete");
			    								    											   }
			    								    											   if(UpdateFD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("Update");
			    								    											   }if(Verify1FD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2FD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("Verify2");
			    								    											   }if(ReportFD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   FD2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											   if(Finger1FD.equalsIgnoreCase("Y"))
			    								    											   {   FD2.add("Finger");
			    								    												}
			    								    											if(Button1FD.equalsIgnoreCase("Y"))
			    								    											   {   FD2.add("Button");
			    								    												}
			    								    											}
			    								    									
			    								    											//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("fd", FD2);
			    								    										per1.setFD_Operation_Types(FD2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewRD=null;
			    								    										String SaveRD=null;
			    								    										String DeleteRD=null;
			    								    										String UpdateRD=null;
			    								    										String Verify1RD=null;
			    								    										String Verify2RD=null;
			    								    										String ReportRD=null;
			    								    										
			    								    										String Finger1RD=null;
			    								    										String Button1RD=null;
			    								    										 
			    								    										
			    								    										   ArrayList<String> RD2=new ArrayList<>();
			    								    										List<SimpleBranch> RD1=empDao.getPermission(User_Name, "RD");
			    								    										if(RD1!=null)
			    								    										{
			    								    											for(SimpleBranch s:RD1)
			    								    											{
			    								    											    ViewRD=s.getS31();
			    								    											   SaveRD=s.getS32();
			    								    											   DeleteRD=s.getS33();
			    								    											   UpdateRD=s.getS34();
			    								    											   Verify1RD=s.getS35();
			    								    											   Verify2RD=s.getS36();
			    								    											   ReportRD=s.getS37();
			    								    											   
			    								    											  

			    								    											 Finger1RD=s.getS38();
			    								    											 Button1RD=s.getS39();
			    								    											   
			    								    											   if(ViewRD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("View");
			    								    											   }
			    								    											   if(SaveRD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("Save");
			    								    											   }
			    								    											   if(DeleteRD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("Delete");
			    								    											   }
			    								    											   if(UpdateRD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("Update");
			    								    											   }if(Verify1RD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2RD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("Verify2");
			    								    											   }if(ReportRD.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   RD2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											   if(Finger1RD.equalsIgnoreCase("Y"))
			    								    											   {   RD2.add("Finger");
			    								    												}
			    								    											if(Button1RD.equalsIgnoreCase("Y"))
			    								    											   {   RD2.add("Button");
			    								    												}

			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("rd", RD2);
			    								    										per1.setRD_Operation_Types(RD2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewJL=null;
			    								    										String SaveJL=null;
			    								    										String DeleteJL=null;
			    								    										String UpdateJL=null;
			    								    										String Verify1JL=null;
			    								    										String Verify2JL=null;
			    								    										String ReportJL=null;
			    								    										
			    								    										String Finger1JL=null;
			    								    										String Button1JL=null;

			    								    										
			    								    										
			    								    										   ArrayList<String> JL2=new ArrayList<>();
			    								    										List<SimpleBranch> JL1=empDao.getPermission(User_Name, "JL");
			    								    										if(JL1!=null)
			    								    										{
			    								    											for(SimpleBranch s:JL1)
			    								    											{
			    								    											    ViewJL=s.getS31();
			    								    											   SaveJL=s.getS32();
			    								    											   DeleteJL=s.getS33();
			    								    											   UpdateJL=s.getS34();
			    								    											   Verify1JL=s.getS35();
			    								    											   Verify2JL=s.getS36();
			    								    											   ReportJL=s.getS37();
			    								    											   Finger1JL=s.getS38();
			    								    												 Button1JL=s.getS39();

			    								    												if(Finger1JL.equalsIgnoreCase("Y"))
			    								    												   {   JL2.add("Finger");
			    								    													}
			    								    												if(Button1JL.equalsIgnoreCase("Y"))
			    								    												   {   JL2.add("Button");
			    								    													}
			    								    											   
			    								    											   if(ViewJL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("View");
			    								    											   }
			    								    											   if(SaveJL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("Save");
			    								    											   }
			    								    											   if(DeleteJL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("Delete");
			    								    											   }
			    								    											   if(UpdateJL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("Update");
			    								    											   }if(Verify1JL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2JL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("Verify2");
			    								    											   }if(ReportJL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JL2.add("Reports");
			    								    											   }
			    								    											   if(Finger1JL.equalsIgnoreCase("Y"))
			    								    											   {   JL2.add("Finger");
			    								    												}
			    								    											if(Button1JL.equalsIgnoreCase("Y"))
			    								    											   {   JL2.add("Button");
			    								    												}
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("jl", JL2);
			    								    										per1.setJL_Operation_Types(JL2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewOL=null;
			    								    										String SaveOL=null;
			    								    										String DeleteOL=null;
			    								    										String UpdateOL=null;
			    								    										String Verify1OL=null;
			    								    										String Verify2OL=null;
			    								    										String ReportOL=null;
			    								    										
			    								    										String Finger1OL=null;
			    								    										String Button1OL=null;

			    								    										
			    								    										
			    								    										   ArrayList<String> OL2=new ArrayList<>();
			    								    										List<SimpleBranch> OL1=empDao.getPermission(User_Name, "OL");
			    								    										if(OL1!=null)
			    								    										{
			    								    											for(SimpleBranch s:OL1)
			    								    											{
			    								    											    ViewOL=s.getS31();
			    								    											   SaveOL=s.getS32();
			    								    											   DeleteOL=s.getS33();
			    								    											   UpdateOL=s.getS34();
			    								    											   Verify1OL=s.getS35();
			    								    											   Verify2OL=s.getS36();
			    								    											   ReportOL=s.getS37();
			    								    											   
			    								    											   Finger1OL=s.getS38();
			    								    												 Button1OL=s.getS39();

			    								    												if(Finger1OL.equalsIgnoreCase("Y"))
			    								    												   {   OL2.add("Finger");
			    								    													}
			    								    												if(Button1OL.equalsIgnoreCase("Y"))
			    								    												   {   OL2.add("Button");
			    								    													}
			    								    											   
			    								    											   if(ViewOL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("View");
			    								    											   }
			    								    											   if(SaveOL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("Save");
			    								    											   }
			    								    											   if(DeleteOL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("Delete");
			    								    											   }
			    								    											   if(UpdateOL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("Update");
			    								    											   }if(Verify1OL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2OL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("Verify2");
			    								    											   }if(ReportOL.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   OL2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("ol", OL2);
			    								    										per1.setOL_Operation_Types(OL2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewJO=null;
			    								    										String SaveJO=null;
			    								    										String DeleteJO=null;
			    								    										String UpdateJO=null;
			    								    										String Verify1JO=null;
			    								    										String Verify2JO=null;
			    								    										String ReportJO=null;
			    								    										
			    								    										String Finger1JO=null;
			    								    										String Button1JO=null;

			    								    										
			    								    										
			    								    										   ArrayList<String> JO2=new ArrayList<>();
			    								    										List<SimpleBranch> JO1=empDao.getPermission(User_Name, "JO");
			    								    										if(JO1!=null)
			    								    										{
			    								    											for(SimpleBranch s:JO1)
			    								    											{
			    								    											    ViewJO=s.getS31();
			    								    											   SaveJO=s.getS32();
			    								    											   DeleteJO=s.getS33();
			    								    											   UpdateJO=s.getS34();
			    								    											   Verify1JO=s.getS35();
			    								    											   Verify2JO=s.getS36();
			    								    											   ReportJO=s.getS37();
			    								    											   
			    								    											   Finger1JO=s.getS38();
			    								    												 Button1JO=s.getS39();

			    								    												if(Finger1JO.equalsIgnoreCase("Y"))
			    								    												   {   JO2.add("Finger");
			    								    													}
			    								    												if(Button1JO.equalsIgnoreCase("Y"))
			    								    												   {  JO2.add("Button");
			    								    													}
			    								    											   
			    								    											   if(ViewJO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("View");
			    								    											   }
			    								    											   if(SaveJO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("Save");
			    								    											   }
			    								    											   if(DeleteJO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("Delete");
			    								    											   }
			    								    											   if(UpdateJO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("Update");
			    								    											   }if(Verify1JO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2JO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("Verify2");
			    								    											   }if(ReportJO.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   JO2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("jo", JO2);
			    								    										per1.setJO_Operation_Types(JO2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewST=null;
			    								    										String SaveST=null;
			    								    										String DeleteST=null;
			    								    										String UpdateST=null;
			    								    										String Verify1ST=null;
			    								    										String Verify2ST=null;
			    								    										String ReportST=null;
			    								    										String Finger1ST=null;
			    								    										String Button1ST=null;
			    								    										
			    								    										 
			    								    										
			    								    										   ArrayList<String> ST2=new ArrayList<>();
			    								    										List<SimpleBranch> ST1=empDao.getPermission(User_Name, "ST");
			    								    										if(ST1!=null)
			    								    										{
			    								    											for(SimpleBranch s:ST1)
			    								    											{
			    								    											    ViewST=s.getS31();
			    								    											   SaveST=s.getS32();
			    								    											   DeleteST=s.getS33();
			    								    											   UpdateST=s.getS34();
			    								    											   Verify1ST=s.getS35();
			    								    											   Verify2ST=s.getS36();
			    								    											   ReportST=s.getS37();
			    								    											   
			    								    											   Finger1ST=s.getS38();
			    								    												 Button1ST=s.getS39();

			    								    												if(Finger1ST.equalsIgnoreCase("Y"))
			    								    												   {   ST2.add("Finger");
			    								    													}
			    								    												if(Button1ST.equalsIgnoreCase("Y"))
			    								    												   {   ST2.add("Button");
			    								    													}
			    								    											   
			    								    											   if(ViewST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("View");
			    								    											   }
			    								    											   if(SaveST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("Save");
			    								    											   }
			    								    											   if(DeleteST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("Delete");
			    								    											   }
			    								    											   if(UpdateST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("Update");
			    								    											   }if(Verify1ST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2ST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("Verify2");
			    								    											   }if(ReportST.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   ST2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("st", ST2);
			    								    										per1.setST_Operation_Types(ST2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewTR=null;
			    								    										String SaveTR=null;
			    								    										String DeleteTR=null;
			    								    										String UpdateTR=null;
			    								    										String Verify1TR=null;
			    								    										String Verify2TR=null;
			    								    										String ReportTR=null;
			    								    										
			    								    										String Finger1TR=null;
			    								    										String Button1TR=null;

			    								    										
			    								    										   ArrayList<String> TR2=new ArrayList<>();
			    								    										List<SimpleBranch> TR1=empDao.getPermission(User_Name, "TR");
			    								    										if(TR1!=null)
			    								    										{
			    								    											for(SimpleBranch s:TR1)
			    								    											{
			    								    											    ViewTR=s.getS31();
			    								    											   SaveTR=s.getS32();
			    								    											   DeleteTR=s.getS33();
			    								    											   UpdateTR=s.getS34();
			    								    											   Verify1TR=s.getS35();
			    								    											   Verify2TR=s.getS36();
			    								    											   ReportTR=s.getS37();
			    								    											   
			    								    											   Finger1TR=s.getS38();
			    								    												 Button1TR=s.getS39();

			    								    												if(Finger1TR.equalsIgnoreCase("Y"))
			    								    												   {   TR2.add("Finger");
			    								    													}
			    								    												if(Button1TR.equalsIgnoreCase("Y"))
			    								    												   {   TR2.add("Button");
			    								    													}
			    								    												
			    								    											   
			    								    											   if(ViewTR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("View");
			    								    											   }
			    								    											   if(SaveTR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("Save");
			    								    											   }
			    								    											   if(DeleteTR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("Delete");
			    								    											   }
			    								    											   if(UpdateTR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("Update");
			    								    											   }if(Verify1TR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2TR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("Verify2");
			    								    											   }if(ReportTR.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   TR2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("tr", TR2);
			    								    										per1.setTR_Operation_Types(TR2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String ViewIB=null;
			    								    										String SaveIB=null;
			    								    										String DeleteIB=null;
			    								    										String UpdateIB=null;
			    								    										String Verify1IB=null;
			    								    										String Verify2IB=null;
			    								    										String ReportIB=null;
			    								    										
			    								    										String Finger1IB=null;
			    								    										String Button1IB=null;

			    								    										 								   ArrayList<String> IB2=new ArrayList<>();
			    								    										List<SimpleBranch> IB1=empDao.getPermission(User_Name, "IB");
			    								    										if(IB1!=null)
			    								    										{
			    								    											for(SimpleBranch s:IB1)
			    								    											{
			    								    											    ViewIB=s.getS31();
			    								    											   SaveIB=s.getS32();
			    								    											   DeleteIB=s.getS33();
			    								    											   UpdateIB=s.getS34();
			    								    											   Verify1IB=s.getS35();
			    								    											   Verify2IB=s.getS36();
			    								    											   ReportIB=s.getS37();
			    								    											   
			    								    											   Finger1IB=s.getS38();
			    								    												 Button1IB=s.getS39();

			    								    												if(Finger1IB.equalsIgnoreCase("Y"))
			    								    												   {   IB2.add("Finger");
			    								    													}
			    								    												if(Button1IB.equalsIgnoreCase("Y"))
			    								    												   {   IB2.add("Button");
			    								    													}
			    								    												

			    								    											   
			    								    											   if(ViewIB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("View");
			    								    											   }
			    								    											   if(SaveIB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("Save");
			    								    											   }
			    								    											   if(DeleteIB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("Delete");
			    								    											   }
			    								    											   if(UpdateIB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("Update");
			    								    											   }if(Verify1IB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("Verify1");
			    								    											   }
			    								    											   if(Verify2IB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("Verify2");
			    								    											   }if(ReportIB.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   IB2.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										
			    								    									
			    								    										
			    								    										//mp.addAttribute("Permission", per);
			    								    										mp.addAttribute("ib", IB2);
			    								    										per1.setIB_Operation_Types(IB2);
			    								    										}
			    								    										//-----------------------------------------------------------------------------------------
			    								    										
			    								    										//300UP-------------------------------------------------------------------------
			    								    										//--------------------------Customer--------------------------------------------
			    								    										String View300UP=null;
			    								    										String Save300UP=null;
			    								    										String Delete300UP=null;
			    								    										String Update300UP=null;
			    								    										String Verify1300UP=null;
			    								    										String Verify2300UP=null;
			    								    										String Report300UP=null;
			    								    										
			    								    										String Finger1300UP=null;
			    								    										String Button1300UP=null;

			    								    										 								   ArrayList<String> UP300=new ArrayList<>();
			    								    										List<SimpleBranch> UP1=empDao.getPermission(User_Name, "UP");
			    								    										if(UP1!=null)
			    								    										{
			    								    											for(SimpleBranch s:UP1)
			    								    											{
			    								    											    View300UP=s.getS31();
			    								    											   Save300UP=s.getS32();
			    								    											   Delete300UP=s.getS33();
			    								    											   Update300UP=s.getS34();
			    								    											   Verify1300UP=s.getS35();
			    								    											   Verify2300UP=s.getS36();
			    								    											   Report300UP=s.getS37();
			    								    											   
			    								    											   Finger1300UP=s.getS38();
			    								    												 Button1300UP=s.getS39();

			    								    												if(Finger1300UP.equalsIgnoreCase("Y"))
			    								    												   {   UP300.add("Finger");
			    								    													}
			    								    												if(Button1300UP.equalsIgnoreCase("Y"))
			    								    												   {   UP300.add("Button");
			    								    													}
			    								    												

			    								    											   
			    								    											   if(View300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("View");
			    								    											   }
			    								    											   if(Save300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("Save");
			    								    											   }
			    								    											   if(Delete300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("Delete");
			    								    											   }
			    								    											   if(Update300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("Update");
			    								    											   }if(Verify1300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("Verify1");
			    								    											   }
			    								    											   if(Verify2300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("Verify2");
			    								    											   }if(Report300UP.equalsIgnoreCase("Y"))
			    								    											   {
			    								    												   UP300.add("Reports");
			    								    											   }
			    								    											  		  
			    								    											
			    								    											}
			    								    									
			    								    										mp.addAttribute("UP", UP300);
			    								    										per1.setUP300_Operation_Types(UP300);
			    								    										}
			    								    										//--------------------------------------------------------
			    								    										
			    								    										List <Branch_Master> bList2=empDao.getBranchMaster();
			    								    										List <String> branch1=new ArrayList<>();
			    								    										for(Branch_Master br:bList2)
			    								    										{
			    								    											branch1.add(br.getBranch_Name());
			    								    											System.out.println(br.getBranch_Name());  
			    								    											 
			    								    										}
			    								    										
			    								    										 ArrayList<String> branchTemp=new ArrayList<>();
			    								    										 List <String> BranchList=new ArrayList<>();
			    								    										 
			    								    										List <SimpleBranch> bList3=empDao.getUserBranch_NameList(User_Name);
			    								    										List <String> branch2=new ArrayList<>();
			    								    										for(SimpleBranch s:bList3)
			    								    										{
			    								    											branch2.add(s.getS3());
			    								    											//System.out.println(s.getS2());  
			    								    											BranchList.add(s.getS3());
			    								    											
			    								    											 
			    								    										}
			    								    								
			    								    										mp.addAttribute("branch", branch2);//with out checkbox
			    								    										mp.put("BranchList", branch); //Empty Check box branch list
			    								    										
			    								    										mp.put("BranchNewList", BranchList); //Empty Check box branch list
			    								    										per1.setBranch_Operation_Types(BranchList);
			    								    										
			    								    										per1.setBranch_Code(BranchList);
			    								    										
			    								    										
			    								    										
			    								    						//-------------------------------------------------------------------------------------				
			    								    										
			    								    										//----------Emp Details------------------------------------
			    								    										String EmpId=null;
			    								    										String Emp_Name=null;
			    								    										String Gender=null;
			    								    										String Dob=null;
			    								    										String Father_Name=null;
			    								    										String Marital_Status=null;
			    								    										String Email_id=null;
			    								    										String Mobile_number=null;
			    								    										String Address=null;
			    								    										String Edu_qualifi=null;
			    								    										
			    								    										String User_name=null;
			    								    										String Password=null;
			    								    										String Access_Level=null;
			    								    										String Login_type=null;
			    								    										String Status=null;
			    								    										String Designation=null;
			    								    										String User_Level=null;
			    								    										String Muli_branch=null;
			    								    										String Subakalyan=null;
			    								    										String Transaction_Edit=null;
			    								    										
			    								    										String Joining_date=null;
			    								    										String Attachmentfile=null;
			    								    										
			    								    										String bcode=null;
			    								    										
			    								    										String Attendance_Level=null;
			    								    										String Attendance_Status=null;
			    								    										String Category=null;
			    								    										
			    								    										
			    								    										
			    								    												String Emp_Id=dao10.Get_ScalarFun("select * from Employee_Master where USER_NAME='"+User_Name+"' and rownum=1", 201);

			    								    										
			    								    										List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
			    								    										for(SimpleBranch s:emplyee)
			    								    										{
			    								    										
			    								    											 EmpId=s.getS3();
			    								    											 Emp_Name=s.getS31();
			    								    											 Gender=s.getS39();
			    								    											 Dob=s.getS40();
			    								    											 Father_Name=s.getS131();
			    								    											 Marital_Status=s.getS132();
			    								    											 Email_id=s.getS72();
			    								    											 Mobile_number=s.getS32();
			    								    											 Address=s.getS133();
			    								    											 Edu_qualifi=s.getS134();
			    								    											
			    								    											 User_name=s.getS135();
			    								    											 Access_Level=s.getS137();
			    								    											 Login_type=s.getS76();
			    								    											 Status=s.getS35();
			    								    											 Designation=s.getS36();
			    								    											 User_Level=s.getS34();
			    								    											 Muli_branch=s.getS77();
			    								    											 Subakalyan=s.getS78();
			    								    											 Transaction_Edit=s.getS79();
			    								    											 Category=s.getS138();
			    								    											 Joining_date=s.getS73();
			    								    											 Attachmentfile=s.getS74();
			    								    											 System.out.println("s.getS137()="+s.getS137()); 
			    								    											 System.out.println("s.getS76()="+s.getS76()); 
			    								    											 System.out.println("s.getS77()="+s.getS77()); 	
			    								    											 System.out.println("s.getS78()="+s.getS78()); 	
			    								    											 System.out.println("s.getS79()="+s.getS79()); 	
			    								    											 System.out.println("Access_Level="+Access_Level); 
			    								    										 
			    								    									 Attendance_Level=s.getS4();
			    								    									Attendance_Status=s.getS111();
			    								    												
			    								    											System.out.println("Login_type="+Login_type); 
			    								    											System.out.println("Subakalyan="+Subakalyan); 
			    								    											System.out.println("Transaction_Edit="+Transaction_Edit); 
			    								    											
			    								    											 mp.put("Joining_date", Joining_date);
			    								    											 mp.put("Attachmentfile", Attachmentfile);
			    								    											
			    								    										
			    								    											 mp.put("Emp_Id", EmpId);
			    								    											 mp.put("Emp_Name", Emp_Name);
			    								    											 
			    								    										
			    								    											 
			    								    											 //mp.put("Gender", Gender);
			    								    											 
			    								    											 mp.put("Dob", Dob);
			    								    											 mp.put("Father_Name", Father_Name);
			    								    											 
			    								    											// em.setDob(Dob);
			    								    											
			    								    											// mp.put("Marital_Status", Marital_Status);
			    								    											 
			    								    											 mp.put("Email_id", Email_id);
			    								    											 mp.put("Mobile_number", Mobile_number);
			    								    											 //mp.put("Address", Address);
			    								    											 mp.put("Edu_qualifi", Edu_qualifi);
			    								    											 mp.put("User_name", User_name);
			    								    											 
			    								    											// mp.put("Access_Level", Access_Level);
			    								    											 per1.setAccess_Level(Access_Level);
			    								    											 
			    								    											 //mp.put("Login_type", Login_type);
			    								    											 per1.setLogin_type(Login_type);
			    								    											 
			    								    											 mp.put("Status", Status);
			    								    											 per1.setStatus(Status);
			    								    											 
			    								    											 mp.put("Designation", Designation);
			    								    											 mp.put("User_Level", User_Level);
			    								    											//07-12-2022
			    								    											 per1.setUser_Level(User_Level);
			    								    											 
			    								    											 //mp.put("Muli_branch", Muli_branch);
			    								    											 per1.setMuli_branch(Muli_branch);
			    								    											 
			    								    											// mp.put("Subakalyan", Subakalyan);
			    								    											 System.out.println("Subakalyan---------------------"+Subakalyan);
			    								    											per1.setSubakalyan(Subakalyan);
			    								    											 
			    								    											 mp.put("Transaction_Edit", Transaction_Edit);
			    								    											 per1.setTransaction_Edit(Transaction_Edit);
			    								    											 
			    								    											 bcode=s.getS33();
			    								    											 
			    								    											 System.out.println("Attendance_Leve="+Attendance_Level);
			    								    											 System.out.println("Attendance_Status="+Attendance_Status);

			    								    											 mp.put("Attendance_Level", Attendance_Level);
			    								    											 mp.put("Attendance_Status", Attendance_Status);
			    								    											 per1.setAttendance_Level(Attendance_Level);
			    								    											 per1.setAttendance_Status(Attendance_Status);
			    								    											 
			    								    											 
			    								    											/* em.setResign_Date(s.getS9());
			    								    											 em.setSus_From_Date(s.getS112());
			    								    											 em.setSus_To_Date(s.getS75());
			    								    											 */
			    								    											 
			    								    											 
			    								    											//Corp Transaction
			    								    												String Corp_Transaction=null;
			    								    												Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
			    								    												per1.setCorpTransaction(Corp_Transaction);
			    								    										   //PermissionLevel
			    								    												String PermissionLevel=null;
			    								    												PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
			    								    												per1.setPermissionLevel(PermissionLevel);

			    								    										}
			    								    										
			    								    										String Branch_Type="";
			    								    										String BranchName="";
			    								    										if(bcode.equalsIgnoreCase("200"))
			    								    										{
			    								    											Branch_Type="200-General";
			    								    										}
			    								    										else
			    								    										{
			    								    											BranchName=dao10.getBranchName_bcode(bcode);
			    								    											Branch_Type=bcode+"-"+BranchName;
			    								    										}
			    								    										System.out.println("Branch_Type=getbranch "+Branch_Type);
			    								    										//}else
			    								    										//BranchName=dao10.getBranchName_bcode(""+DBCode);

			    								    										mp.put("BranchName2",BranchName);

			    								    										
			    								    										List <Simple> branchCode=dao10.getBranchCode();
			    								    										System.out.println("Branch_Code=getbranch");
			    								    										List<String> branchCodeList=new ArrayList<>();
			    								    										for(Simple s1:branchCode)
			    								    										{
			    								    											String s3=s1.getS1()+"-"+s1.getS2();
			    								    											branchCodeList.add(s3);
			    								    											System.out.println(s3);  
			    								    											 
			    								    										}
			    								    										mp.put("BranchCodeList", branchCodeList);
			    								    										per1.setBranch_Type(Branch_Type);
			    								    										
			    								    											per1.setEmp_Id(Emp_Id);
			    								    										//------------------------------------------------------------
			    								    				      return new ModelAndView("SetPermission2");  
			    								    				
			    								    			
			    								  				}
			    											 
			    											 
			    											 
			    											  @RequestMapping(value="/SavePermissionBranch",params = "Save_Individual",method=RequestMethod.POST)
			    								    			public ModelAndView setPermission_Save_Individual(@Valid @ModelAttribute("Permission")Permission permission,ModelMap mp,BindingResult result,RedirectAttributes attributes,HttpSession session)
			    								    			{
			    												  
			    								    				if(result.hasErrors())
			    								    				{
			    								    					return new ModelAndView("SetPermission"); 
			    								    				}
			    								    				else
			    								    				{
			    								    					
			    								    					
			    								    					
			    								    				mp.addAttribute("Permission", permission);
			    								    				
			    								    				ArrayList<String> ct=permission.getCT_Operation_Types();
			    								    				List<String> sm=permission.getSM_Operation_Types();
			    								    				List<String> sd=permission.getSD_Operation_Types();
			    								    				List<String> fd=permission.getFD_Operation_Types();
			    								    				List<String> rd=permission.getRD_Operation_Types();
			    								    				List<String> jl=permission.getJL_Operation_Types();
			    								    				List<String> ol=permission.getOL_Operation_Types();
			    								    				List<String> jo=permission.getJO_Operation_Types();
			    								    				List<String> st=permission.getST_Operation_Types();
			    								    				List<String> tr=permission.getTR_Operation_Types();
			    								    				List<String> ib=permission.getIB_Operation_Types();
			    								    				//UP
			    								    				List<String> UP=permission.getUP300_Operation_Types();
			    								    				//List<String> branch=permission.getBranch_Code();
			    								    				//01-03-2024
			    								    				List<String> branch=permission.getBranch_Operation_Types();
			    								    				
			    								    				String userName=permission.getUser_name();
			    								    				
			    								    				
			    								    				mp.addAttribute("sm",sm);
			    								    				mp.addAttribute("sd",sd);
			    								    				mp.addAttribute("fd",fd);
			    								    				mp.addAttribute("rd",rd);
			    								    				mp.addAttribute("jl",jl);
			    								    				mp.addAttribute("ol",ol);
			    								    				mp.addAttribute("jo",jo);
			    								    				mp.addAttribute("st",st);
			    								    				mp.addAttribute("tr",tr);
			    								    				mp.addAttribute("ib",ib);
			    								    				
			    								    				
			    								    				mp.addAttribute("branch", branch);
			    								    				mp.addAttribute("Username", userName);
			    								    				
			    								    				
			    								    				
			    								    				//saveUser_Branch
			    								    				//System.out.println("branch.size()="+branch.size());
			    								    				
			    								    				if(branch==null)
			    								    				{
			    								    					//mp.addAttribute("message", "Select Branch");
			    								    					attributes.addFlashAttribute("message", "Select Branch !");

			    								    					//return new ModelAndView("redirect:/SetPermission");
			    								    					return new ModelAndView("redirect:/GetPermissionBranch/"+userName); 
			    								    				}
			    								    				else if(branch.size()>0)
			    								    				{
			    								    					/*System.out.println("branch.size()="+branch.size());
			    								    					int multibranchUser=dao20.Get_ScalarINT("select count(*) from Multibranch_User where user_name='"+userName+"'", 201);
			    								    					//String multibranchEmp=dao10.Get_ScalarFun("select lev1 from Employee_Master where user_name='"+userName+"'", 201);
			    								    					String multibranchEmp=permission.getMuli_branch();
			    								    					System.out.println("multibranchEmp="+multibranchEmp);
			    								    					if( multibranchUser==0 && branch.size()>1)
			    								    					{
			    								    						//mp.addAttribute("message", "Not the multibranch User ! Select one branch / Contact Admin");
			    								    						attributes.addFlashAttribute("message",  "Not the multibranch User ! Select one branch / Contact Admin");

			    								    						//return new ModelAndView("redirect:/SetPermission"); 
			    								    						return new ModelAndView("redirect:/GetPermissionBranch_Type2/"+userName); 
			    								    					}
			    								    					else{*/
			    								    						//---------  Delete and Add User Branch--------------------------------------
			    								    						empDao.DeleteUser_Branch(userName);
			    										    				for(String a:branch)
			    										    				{
			    										    					//System.out.println("branch.get(i)="+branch.get(i));
			    										    					if(!a.equalsIgnoreCase(null) &&  a !=null)
			    										    					{
			    										    					//System.out.println("Branch_Name branch.get(i)="+branch.get(i));
			    										    					int BCode=empDao.Get_Branch_Code(a);
			    										    					int j=empDao.saveUser_Branch(userName, BCode);
			    										    					}
			    										    				}
			    								    					//}
			    								    				}
			    								    				
			    								    				
			    								    				
			    								    				//EMP EDIT-------------------------------------------------------------
			    								    				String Emp_Id=null;
			    								    				String Emp_Name=null;
			    								    				String Gender=null;
			    								    				String Dob=null;
			    								    				String Father_Name=null;
			    								    				String Marital_Status=null;
			    								    				String Email_id=null;
			    								    				String Mobile_number=null;
			    								    				String Address=null;
			    								    				String Edu_qualifi=null;
			    								    				
			    								    				String User_name=null;
			    								    				String Password=null;
			    								    				String Access_Level=null;
			    								    				String Login_type=null;
			    								    				String Status=null;
			    								    				String Designation=null;
			    								    				String User_Level=null;
			    								    				String Muli_branch=null;
			    								    				String Subakalyan=null;
			    								    				String Transaction_Edit=null;
			    								    				//String Branch_Code=null;
			    								    				
			    								    				
			    								    				 Emp_Id=permission.getEmp_Id();
			    								    				 Emp_Name=permission.getEmp_Name();
			    								    				 Mobile_number=permission.getMobile_number();
			    								    				 User_name=permission.getUser_name();
			    								    				 Password=permission.getPassword();
			    								    				 Access_Level=permission.getAccess_Level();
			    								    				 Login_type=permission.getLogin_type();
			    								    				Status=permission.getStatus();
			    								    				 User_Level=permission.getUser_Level();
			    								    				 Muli_branch=permission.getMuli_branch();
			    								    				 Subakalyan=permission.getSubakalyan();
			    								    				 Transaction_Edit=permission.getTransaction_Edit();
			    								    				// String Btype=permission.getBranch_Type().substring(0, 3);
			    								    				
			    								    				Login_type=dao10.Get_ScalarFun("Select login_type from employee_master where user_name='"+userName+"'", 201);
			    								    				//Login type Finger/Button
			    						    						String finger="N";
			    						    						String button="N";
			    						    						if(Login_type.contentEquals("A"))
			    						    						{
			    						    							 finger="Y";
			    						    							 button="Y";
			    						    						}
			    						    						else if(Login_type.contentEquals("F"))
			    						    						{
			    						    							finger="Y";
			    						    							 button="N";	
			    						    						}
			    						    						else if(Login_type.contentEquals("P"))
			    						    						{
			    						    							finger="N";
			    						    							 button="Y";	
			    						    						}
			    						    						//Corp Transaction
			    						    						//Corp Transaction
			    						    						String Corp_Transaction=null;
			    						    						String PermissionLevel=null;
			    						    						Corp_Transaction=permission.getCorpTransaction();
			    						    						PermissionLevel=permission.getPermissionLevel();
			    						    						
			    						    						if(!PermissionLevel.equalsIgnoreCase("C"))
			    						    						{
			    						    						//22-02-2024
			    						    						empDao.InsertUser_Permission_Type(userName, finger, button,PermissionLevel, 201);
			    								    			       dao20.UpdateDATA("update employee_master set permission_type='"+PermissionLevel+"' where user_name='"+userName+"'",201);

			    						    						}
			    						    						else
			    						    						{
			    						    							
			    						    							
			    								    				String view="N";
			    								    				String save="N";
			    								    				String update="N";
			    								    				String delete="N";
			    								    				String verify1="N";
			    								    				String verify2="N";
			    								    				String reports="N";
			    								    				
			    								    				String finger1="N";
			    								    				String button1="N";
			    								    				
			    								    				if(ct==null)
			    								    				{
			    								    					 view="N";
			    								    					 save="N";
			    								    					 update="N";
			    								    					 delete="N";
			    								    					 verify1="N";
			    								    					 verify2="N";
			    								    					reports="N";
			    								    					
			    								    					finger1="N";
			    								    					button1="N";
			    								    					
			    								    					
			    								    				}
			    								    				else if(ct.size()>=0)
			    								    				for(int i=0;i<ct.size();i++)
			    								    				{
			    								    					if(ct.get(i).equals("View"))
			    								    					{
			    								    						view="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(ct.get(i).equals("Save"))
			    								    					{
			    								    						save="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Update"))
			    								    					{
			    								    						update="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Delete"))
			    								    					{
			    								    						delete="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Reports"))
			    								    					{
			    								    						reports="Y";
			    								    					}
			    								    				
			    								    					
			    								    					if(ct.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Reports"))
			    								    					{
			    								    						reports="Y";
			    								    					}
			    								    					
			    								    					
			    								    					if(ct.get(i).equals("Finger"))
			    								    					{
			    								    						finger1="Y";
			    								    					}
			    								    					if(ct.get(i).equals("Button"))
			    								    					{
			    								    						button1="Y";
			    								    					}
			    								    					
			    								    					
			    								    				}
			    								    				
			    								    				empDao.DeletePermissionDetails(userName);
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				try
			    								    				{
			    								    					System.out.println("Enter in to neew permission : Customer");
			    								    					//empDao.savePermissionDetails(userName, "CT", view, save, update, delete, verify1, verify2, reports);
			    								    					empDao.savePermissionDetails2(userName, "CT", view, save, update, delete, verify1, verify2, reports,finger1,button1);
			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    			
			    								    				String viewSM="N";
			    								    				String saveSM="N";
			    								    				String updateSM="N";
			    								    				String deleteSM="N";
			    								    				String verify1SM="N";
			    								    				String verify2SM="N";
			    								    				String reportsSM="N";
			    								    				
			    								    				String finger1SM="N";
			    								    				String button1SM="N";

			    								    				
			    								    				if(sm==null)
			    								    				{
			    								    					 viewSM="N";
			    								    					 saveSM="N";
			    								    					 updateSM="N";
			    								    					 deleteSM="N";
			    								    					 verify1SM="N";
			    								    					 verify2SM="N";
			    								    					 reportsSM="N";
			    								    					 
			    								    					 finger1SM="N";
			    								    						button1SM="N";

			    								    				}
			    								    				else if(sm.size()>=0)
			    								    				for(int i=0;i<sm.size();i++)
			    								    				{
			    								    					if(sm.get(i).equals("View"))
			    								    					{
			    								    						viewSM="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(sm.get(i).equals("Save"))
			    								    					{
			    								    						saveSM="Y";
			    								    					}
			    								    					if(sm.get(i).equals("Update"))
			    								    					{
			    								    						updateSM="Y";
			    								    					}
			    								    					if(sm.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1SM="Y";
			    								    					}
			    								    					if(sm.get(i).equals("Delete"))
			    								    					{
			    								    						deleteSM="Y";
			    								    					}
			    								    					if(sm.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2SM="Y";
			    								    					}
			    								    					if(sm.get(i).equals("Reports"))
			    								    					{
			    								    						reportsSM="Y";
			    								    					}

			    								    					if(sm.get(i).equals("Finger"))
			    								    					{
			    								    					finger1SM="Y";
			    								    					}
			    								    					if(sm.get(i).equals("Button"))
			    								    					{
			    								    					button1SM="Y";
			    								    					}


			    								    					
			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				try
			    								    				{
			    								    					System.out.println("Enter in to neew permission : Savings Master");
			    								    				//empDao.savePermissionDetails(userName, "SM", viewSM, saveSM, updateSM, deleteSM, verify1SM, verify2SM, reportsSM);
			    								    				empDao.savePermissionDetails2(userName, "SM", viewSM, saveSM, updateSM, deleteSM, verify1SM, verify2SM, reportsSM,finger1SM,button1SM);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				String viewSD="N";
			    								    				String saveSD="N";
			    								    				String updateSD="N";
			    								    				String deleteSD="N";
			    								    				String verify1SD="N";
			    								    				String verify2SD="N";
			    								    				String reportsSD="N";
			    								    				
			    								    				String finger1SD="N";
			    								    				String button1SD="N";

			    								    				
			    								    				
			    								    				if(sd==null)
			    								    				{
			    								    					 viewSD="N";
			    								    					 saveSD="N";
			    								    					 updateSD="N";
			    								    					 deleteSD="N";
			    								    					 verify1SD="N";
			    								    					 verify2SD="N";
			    								    					 reportsSD="N";
			    								    					 
			    								    						finger1SD="N";
			    								    						button1SD="N";

			    								    						
			    								    				}
			    								    				else if(sd.size()>=0)
			    								    				for(int i=0;i<sd.size();i++)
			    								    				{
			    								    					if(sd.get(i).equals("View"))
			    								    					{
			    								    						viewSD="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(sd.get(i).equals("Save"))
			    								    					{
			    								    						saveSD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Update"))
			    								    					{
			    								    						updateSD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1SD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Delete"))
			    								    					{
			    								    						deleteSD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2SD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Reports"))
			    								    					{
			    								    						reportsSD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Finger"))
			    								    					{
			    								    					finger1SD="Y";
			    								    					}
			    								    					if(sd.get(i).equals("Button"))
			    								    					{
			    								    					button1SD="Y";
			    								    					}


			    								    					
			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try
			    								    				{
			    								    					
			    								    					System.out.println("Enter in to neew permission : SD");
			    								    				//empDao.savePermissionDetails(userName, "SD", viewSD, saveSD, updateSD, deleteSD, verify1SD, verify2SD, reportsSD);
			    								    				empDao.savePermissionDetails2(userName, "SD", viewSD, saveSD, updateSD, deleteSD, verify1SD, verify2SD, reportsSD,finger1SD,button1SD);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				String viewFD="N";
			    								    				String saveFD="N";
			    								    				String updateFD="N";
			    								    				String deleteFD="N";
			    								    				String verify1FD="N";
			    								    				String verify2FD="N";
			    								    				String reportsFD="N";
			    								    				
			    								    				String finger1FD="N";
			    								    				String button1FD="N";

			    								    						
			    								    				
			    								    				if(fd==null)
			    								    				{
			    								    					viewFD="N";
			    								    					 saveFD="N";
			    								    					 updateFD="N";
			    								    					 deleteFD="N";
			    								    					 verify1FD="N";
			    								    					 verify2FD="N";
			    								    					 reportsFD="N";
			    								    					 
			    								    					 finger1FD="N";
			    								    						button1FD="N";

			    								    						
			    								    					
			    								    				}
			    								    				else if(fd.size()>=0)
			    								    				for(int i=0;i<fd.size();i++)
			    								    				{
			    								    					if(fd.get(i).equals("View"))
			    								    					{
			    								    						viewFD="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(fd.get(i).equals("Save"))
			    								    					{
			    								    						saveFD="Y";
			    								    					}
			    								    					if(fd.get(i).equals("Update"))
			    								    					{
			    								    						updateFD="Y";
			    								    					}
			    								    					if(fd.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1FD="Y";
			    								    					}
			    								    					if(fd.get(i).equals("Delete"))
			    								    					{
			    								    						deleteFD="Y";
			    								    					}
			    								    					if(fd.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2FD="Y";
			    								    					}
			    								    					if(fd.get(i).equals("Reports"))
			    								    					{
			    								    						reportsFD="Y";
			    								    					}
			    								    					
			    								    					if(fd.get(i).equals("Finger"))
			    								    					{
			    								    					finger1FD="Y";
			    								    					}
			    								    					if(fd.get(i).equals("Button"))
			    								    					{
			    								    					button1FD="Y";
			    								    					}


			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try
			    								    				{
			    								    					System.out.println("Enter in to neew permission: FD");
			    								    				//empDao.savePermissionDetails(userName, "FD", viewFD, saveFD, updateFD, deleteFD, verify1FD, verify2FD, reportsFD);
			    								    				  empDao.savePermissionDetails2(userName, "FD", viewFD, saveFD, updateFD, deleteFD, verify1FD, verify2FD, reportsFD,finger1FD,button1FD);

			    								    				
			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				String viewRD="N";
			    								    				String saveRD="N";
			    								    				String updateRD="N";
			    								    				String deleteRD="N";
			    								    				String verify1RD="N";
			    								    				String verify2RD="N";
			    								    				String reportsRD="N";
			    								    				
			    								    				String finger1RD="N";
			    								    				String button1RD="N";

			    								    					
			    								    				
			    								    				if(rd==null)
			    								    				{
			    								    					 viewRD="N";
			    								    					saveRD="N";
			    								    					 updateRD="N";
			    								    					 deleteRD="N";
			    								    					 verify1RD="N";
			    								    					 verify2RD="N";
			    								    					 reportsRD="N";
			    								    					 
			    								    						finger1RD="N";
			    								    						button1RD="N";

			    								    						
			    								    					
			    								    				}
			    								    				else if(rd.size()>=0)
			    								    				for(int i=0;i<rd.size();i++)
			    								    				{
			    								    					if(rd.get(i).equals("View"))
			    								    					{
			    								    						viewRD="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(rd.get(i).equals("Save"))
			    								    					{
			    								    						saveRD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Update"))
			    								    					{
			    								    						updateRD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1RD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Delete"))
			    								    					{
			    								    						deleteRD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2RD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Reports"))
			    								    					{
			    								    						reportsRD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Finger"))
			    								    					{
			    								    					finger1RD="Y";
			    								    					}
			    								    					if(rd.get(i).equals("Button"))
			    								    					{
			    								    					button1RD="Y";
			    								    					}


			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				try
			    								    				{
			    								    				//empDao.savePermissionDetails(userName, "RD", viewRD, saveRD, updateRD, deleteRD, verify1RD, verify2RD, reportsRD);
			    								    				empDao.savePermissionDetails2(userName, "RD", viewRD, saveRD, updateRD, deleteRD, verify1RD, verify2RD, reportsRD,finger1RD,button1RD);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				
			    								    				

			    								    				String viewJL="N";
			    								    				String saveJL="N";
			    								    				String updateJL="N";
			    								    				String deleteJL="N";
			    								    				String verify1JL="N";
			    								    				String verify2JL="N";
			    								    				String reportsJL="N";
			    								    				
			    								    				String finger1JL="N";
			    								    				String button1JL="N";

			    								    						
			    								    				if(jl==null)
			    								    				{
			    								    					viewJL="N";
			    								    					 saveJL="N";
			    								    					 updateJL="N";
			    								    					 deleteJL="N";
			    								    					 verify1JL="N";
			    								    					 verify2JL="N";
			    								    					 reportsJL="N";
			    								    					 
			    								    					 finger1JL="N";
			    								    						button1JL="N";

			    								    						
			    								    				}
			    								    				else if(jl.size()>=0)
			    								    				for(int i=0;i<jl.size();i++)
			    								    				{
			    								    					if(jl.get(i).equals("View"))
			    								    					{
			    								    						viewJL="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(jl.get(i).equals("Save"))
			    								    					{
			    								    						saveJL="Y";
			    								    					}
			    								    					if(jl.get(i).equals("Update"))
			    								    					{
			    								    						updateJL="Y";
			    								    					}
			    								    					if(jl.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1JL="Y";
			    								    					}
			    								    					if(jl.get(i).equals("Delete"))
			    								    					{
			    								    						deleteJL="Y";
			    								    					}
			    								    					if(jl.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2JL="Y";
			    								    					}
			    								    					if(jl.get(i).equals("Reports"))
			    								    					{
			    								    						reportsJL="Y";
			    								    					}
			    								    					
			    								    					if(jl.get(i).equals("Finger"))
			    								    					{
			    								    					finger1JL="Y";
			    								    					}
			    								    					if(jl.get(i).equals("Button"))
			    								    					{
			    								    					button1JL="Y";
			    								    					}


			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try
			    								    				{
			    								    				//empDao.savePermissionDetails(userName, "JL", viewJL, saveJL, updateJL, deleteJL, verify1JL, verify2JL, reportsJL);
			    								    				
			    								    				empDao.savePermissionDetails2(userName, "JL", viewJL, saveJL, updateJL, deleteJL, verify1JL, verify2JL, reportsJL,finger1JL,button1JL);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				String viewOL="N";
			    								    				String saveOL="N";
			    								    				String updateOL="N";
			    								    				String deleteOL="N";
			    								    				String verify1OL="N";
			    								    				String verify2OL="N";
			    								    				String reportsOL="N";
			    								    				
			    								    				String finger1OL="N";
			    								    				String button1OL="N";

			    								    						
			    								    				
			    								    				if(ol==null)
			    								    				{
			    								    					 viewOL="N";
			    								    					 saveOL="N";
			    								    					 updateOL="N";
			    								    					 deleteOL="N";
			    								    					 verify1OL="N";
			    								    					 verify2OL="N";
			    								    					 reportsOL="N";
			    								    					 
			    								    					 finger1OL="N";
			    								    						button1OL="N";

			    								    						
			    								    				}
			    								    				else if(ol.size()>=0)
			    								    				for(int i=0;i<ol.size();i++)
			    								    				{
			    								    					if(ol.get(i).equals("View"))
			    								    					{
			    								    						viewOL="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(ol.get(i).equals("Save"))
			    								    					{
			    								    						saveOL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Update"))
			    								    					{
			    								    						updateOL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1OL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Delete"))
			    								    					{
			    								    						deleteOL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2OL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Reports"))
			    								    					{
			    								    						reportsOL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Finger"))
			    								    					{
			    								    					finger1OL="Y";
			    								    					}
			    								    					if(ol.get(i).equals("Button"))
			    								    					{
			    								    					button1OL="Y";
			    								    					}


			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try
			    								    				{
			    								    				//empDao.savePermissionDetails(userName, "OL", viewOL, saveOL, updateOL, deleteOL, verify1OL, verify2OL, reportsOL);
			    								    				empDao.savePermissionDetails2(userName, "OL", viewOL, saveOL, updateOL, deleteOL, verify1OL, verify2OL, reportsOL,finger1OL,button1OL);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				//-------------------------------------------------------------------------------------------------------//
			    								    				
			    								    				

			    								    				String viewJO="N";
			    								    				String saveJO="N";
			    								    				String updateJO="N";
			    								    				String deleteJO="N";
			    								    				String verify1JO="N";
			    								    				String verify2JO="N";
			    								    				String reportsJO="N";
			    								    				
			    								    				String finger1JO="N";
			    								    				String button1JO="N";

			    								    				
			    								    				if(jo==null)
			    								    				{
			    								    					viewJO="N";
			    								    					saveJO="N";
			    								    					 updateJO="N";
			    								    					 deleteJO="N";
			    								    					 verify1JO="N";
			    								    					verify2JO="N";
			    								    					 reportsJO="N";
			    								    					 

			    								    						finger1JO="N";
			    								    						button1JO="N";

			    								    						
			    								    				}
			    								    				else if(jo.size()>=0)
			    								    				for(int i=0;i<jo.size();i++)
			    								    				{
			    								    					if(jo.get(i).equals("View"))
			    								    					{
			    								    						viewJO="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(jo.get(i).equals("Save"))
			    								    					{
			    								    						saveJO="Y";
			    								    					}
			    								    					if(jo.get(i).equals("Update"))
			    								    					{
			    								    						updateJO="Y";
			    								    					}
			    								    					if(jo.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1JO="Y";
			    								    					}
			    								    					if(jo.get(i).equals("Delete"))
			    								    					{
			    								    						deleteJO="Y";
			    								    					}
			    								    					if(jo.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2JO="Y";
			    								    					}
			    								    					if(jo.get(i).equals("Reports"))
			    								    					{
			    								    						reportsJO="Y";
			    								    					}
			    								    					
			    								    					if(jo.get(i).equals("Finger"))
			    								    					{
			    								    					finger1JO="Y";
			    								    					}
			    								    					if(jo.get(i).equals("Button"))
			    								    					{
			    								    					button1JO="Y";
			    								    					}

			    								    				
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try{
			    								    				
			    								    				//empDao.savePermissionDetails(userName, "JO", viewJO, saveJO, updateJO, deleteJO, verify1JO, verify2JO, reportsJO);
			    								    				empDao.savePermissionDetails2(userName, "JO", viewJO, saveJO, updateJO, deleteJO, verify1JO, verify2JO, reportsJO,finger1JO,button1JO);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				
			    								    				//--------------------------------------------------------------------------------------------------//
			    								    				
			    								    				String viewST="N";
			    								    				String saveST="N";
			    								    				String updateST="N";
			    								    				String deleteST="N";
			    								    				String verify1ST="N";
			    								    				String verify2ST="N";
			    								    				String reportsST="N";
			    								    				
			    								    				String finger1ST="N";
			    								    				String button1ST="N";

			    								    					
			    								    				
			    								    				
			    								    				if(st==null)
			    								    				{
			    								    					 viewST="N";
			    								    					saveST="N";
			    								    					 updateST="N";
			    								    					 deleteST="N";
			    								    					 verify1ST="N";
			    								    					verify2ST="N";
			    								    					 reportsST="N";
			    								    					 
			    								    						finger1ST="N";
			    								    						button1ST="N";

			    								    						
			    								    				}
			    								    				else if(st.size()>=0)
			    								    				for(int i=0;i<st.size();i++)
			    								    				{
			    								    					if(st.get(i).equals("View"))
			    								    					{
			    								    						viewST="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(st.get(i).equals("Save"))
			    								    					{
			    								    						saveST="Y";
			    								    					}
			    								    					if(st.get(i).equals("Update"))
			    								    					{
			    								    						updateST="Y";
			    								    					}
			    								    					if(st.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1ST="Y";
			    								    					}
			    								    					if(st.get(i).equals("Delete"))
			    								    					{
			    								    						deleteST="Y";
			    								    					}
			    								    					if(st.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2ST="Y";
			    								    					}
			    								    					if(st.get(i).equals("Reports"))
			    								    					{
			    								    						reportsST="Y";
			    								    					}
			    								    					
			    								    					if(st.get(i).equals("Finger"))
			    								    					{
			    								    					finger1ST="Y";
			    								    					}
			    								    					if(st.get(i).equals("Button"))
			    								    					{
			    								    					button1ST="Y";
			    								    					}


			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try
			    								    				{
			    								    				//empDao.savePermissionDetails(userName, "ST", viewST, saveST, updateST, deleteST, verify1ST, verify2ST, reportsST);
			    								    				
			    								    				//empDao.savePermissionDetails2(userName, "ST", viewST, saveST, updateST, deleteST, verify1ST, verify2ST, reportsST,finger1ST,button1ST);
			    								    				empDao.savePermissionDetails2(userName, "ST", viewST, saveST, updateST, deleteST, verify1ST, verify2ST, reportsST,finger,button);
			    								    				
			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				//--------------------------------------------------------------------------------------------------------//
			    								    				
			    								    				String viewTR="N";
			    								    				String saveTR="N";
			    								    				String updateTR="N";
			    								    				String deleteTR="N";
			    								    				String verify1TR="N";
			    								    				String verify2TR="N";
			    								    				String reportsTR="N";
			    								    				
			    								    				String finger1TR="N";
			    								    				String button1TR="N";

			    								    						
			    								    			
			    								    				
			    								    				if(tr==null)
			    								    				{
			    								    					 viewTR="N";
			    								    					 saveTR="N";
			    								    					 updateTR="N";
			    								    					 deleteTR="N";
			    								    					 verify1TR="N";
			    								    					 verify2TR="N";
			    								    					 reportsTR="N";
			    								    					 
			    								    					 finger1TR="N";
			    								    						button1TR="N";

			    								    						
			    								    				}
			    								    				else if(tr.size()>=0)
			    								    				for(int i=0;i<tr.size();i++)
			    								    				{
			    								    					if(tr.get(i).equals("View"))
			    								    					{
			    								    						viewTR="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(tr.get(i).equals("Save"))
			    								    					{
			    								    						saveTR="Y";
			    								    					}
			    								    					if(tr.get(i).equals("Update"))
			    								    					{
			    								    						updateTR="Y";
			    								    					}
			    								    					if(tr.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1TR="Y";
			    								    					}
			    								    					if(tr.get(i).equals("Delete"))
			    								    					{
			    								    						deleteTR="Y";
			    								    					}
			    								    					if(tr.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2TR="Y";
			    								    					}
			    								    					if(tr.get(i).equals("Reports"))
			    								    					{
			    								    						reportsTR="Y";
			    								    					}
			    								    					
			    								    					if(tr.get(i).equals("Finger"))
			    								    					{
			    								    					finger1TR="Y";
			    								    					}
			    								    					if(tr.get(i).equals("Button"))
			    								    					{
			    								    					button1TR="Y";
			    								    					}


			    								    					
			    								    					
			    								    				}
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				
			    								    				try
			    								    				{
			    								    				//empDao.savePermissionDetails(userName, "TR", viewTR, saveTR, updateTR, deleteTR, verify1TR, verify2TR, reportsTR);
			    								    				empDao.savePermissionDetails2(userName, "TR", viewTR, saveTR, updateTR, deleteTR, verify1TR, verify2TR, reportsTR,finger1TR,button1TR);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				
			    								    				//------------------------------------------------------------------------------------------//
			    								    				
			    								    				String viewIB="N"; 
			    								    				String saveIB="N";
			    								    				String updateIB="N";
			    								    				String deleteIB="N";
			    								    				String verify1IB="N";
			    								    				String verify2IB="N";
			    								    				String reportsIB="N";
			    								    				
			    								    				String finger1IB="N";
			    								    				String button1IB="N";

			    								    						
			    								    				if(ib==null)
			    								    				{
			    								    					 viewIB="N"; 
			    								    					 saveIB="N";
			    								    					 updateIB="N";
			    								    					 deleteIB="N";
			    								    					 verify1IB="N";
			    								    					 verify2IB="N";
			    								    					 reportsIB="N";
			    								    					 
			    								    					 finger1IB="N";
			    								    						button1IB="N";

			    								    						
			    								    					
			    								    				}
			    								    				else if(ib.size()>=0)
			    								    				for(int i=0;i<ib.size();i++)
			    								    				{
			    								    					if(ib.get(i).equals("View"))
			    								    					{
			    								    						viewIB="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(ib.get(i).equals("Save"))
			    								    					{
			    								    						saveIB="Y";
			    								    					}
			    								    					if(ib.get(i).equals("Update"))
			    								    					{
			    								    						updateIB="Y";
			    								    					}
			    								    					if(ib.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1IB="Y";
			    								    					}
			    								    					if(ib.get(i).equals("Delete"))
			    								    					{
			    								    						deleteIB="Y";
			    								    					}
			    								    					if(ib.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2IB="Y";
			    								    					}
			    								    					if(ib.get(i).equals("Reports"))
			    								    					{
			    								    						reportsIB="Y";
			    								    					}
			    								    					
			    								    					if(ib.get(i).equals("Finger"))
			    								    					{
			    								    					finger1IB="Y";
			    								    					}
			    								    					if(ib.get(i).equals("Button"))
			    								    					{
			    								    					button1IB="Y";
			    								    					}


			    								    				}
			    								    				
			    								    				
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				try{
			    								    				//empDao.savePermissionDetails(userName, "IB", viewIB, saveIB, updateIB, deleteIB, verify1IB, verify2IB, reportsIB);
			    								    				empDao.savePermissionDetails2(userName, "IB", viewIB, saveIB, updateIB, deleteIB, verify1IB, verify2IB, reportsIB,finger1IB,button1IB);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				
			    								    				
			    								    				
			    								    				
			    								    				
			    								    				
			    					//------------------------------------------------------------------------------------------//
			    								    				
			    								    				String viewUP="N"; 
			    								    				String saveUP="N";
			    								    				String updateUP="N";
			    								    				String deleteUP="N";
			    								    				String verify1UP="N";
			    								    				String verify2UP="N";
			    								    				String reportsUP="N";
			    								    				
			    								    				String finger1UP="N";
			    								    				String button1UP="N";

			    								    						
			    								    				if(UP==null)
			    								    				{
			    								    					 viewUP="N"; 
			    								    					 saveUP="N";
			    								    					 updateUP="N";
			    								    					 deleteUP="N";
			    								    					 verify1UP="N";
			    								    					 verify2UP="N";
			    								    					 reportsUP="N";
			    								    					 
			    								    					 finger1UP="N";
			    								    						button1UP="N";

			    								    						
			    								    					
			    								    				}
			    								    				else if(UP.size()>=0)
			    								    				for(int i=0;i<UP.size();i++)
			    								    				{
			    								    					if(UP.get(i).equals("View"))
			    								    					{
			    								    						viewUP="Y";
			    								    					}
			    								    					
			    								    						
			    								    					if(UP.get(i).equals("Save"))
			    								    					{
			    								    						saveUP="Y";
			    								    					}
			    								    					if(UP.get(i).equals("Update"))
			    								    					{
			    								    						updateUP="Y";
			    								    					}
			    								    					if(UP.get(i).equals("Verify1"))
			    								    					{
			    								    						verify1UP="Y";
			    								    					}
			    								    					if(UP.get(i).equals("Delete"))
			    								    					{
			    								    						deleteUP="Y";
			    								    					}
			    								    					if(UP.get(i).equals("Verify2"))
			    								    					{
			    								    						verify2UP="Y";
			    								    					}
			    								    					if(UP.get(i).equals("Reports"))
			    								    					{
			    								    						reportsUP="Y";
			    								    					}
			    								    					
			    								    					if(UP.get(i).equals("Finger"))
			    								    					{
			    								    					finger1UP="Y";
			    								    					}
			    								    					if(UP.get(i).equals("Button"))
			    								    					{
			    								    					button1UP="Y";
			    								    					}


			    								    				}
			    								    				
			    								    				
			    								    				
			    								    				//empDao.savePermissionDetails("111", "CT", view, "N", "N", "N", "N", "N", "N");
			    								    				try{
			    								    				//empDao.savePermissionDetails(userName, "IB", viewIB, saveIB, updateIB, deleteIB, verify1IB, verify2IB, reportsIB);
			    								    				empDao.savePermissionDetails2(userName, "UP", viewUP, saveUP, updateUP, deleteUP, verify1UP, verify2UP, reportsUP,finger1UP,button1UP);

			    								    				}catch(Exception e)
			    								    				{
			    								    					return new ModelAndView("error","e",e.getLocalizedMessage());
			    								    				}
			    								    				mp.addAttribute("message", "Saved");
			    								    				
			    								    				mp.addAttribute("list", "list");
			    								    				
			    								    				
			    								    				
			    								    				/*
			    								    				List <String> branch=new ArrayList<>();
			    								    				branch.add("Trichy");
			    								    				branch.add("Madurai");
			    								    				branch.add("kovai");
			    								    				*/
			    								    				
			    								    				
			    								    				
			    								    			
			    								    				List <Branch_Master> bList=empDao.getBranchMaster();
			    								    				List <String> branch1=new ArrayList<>();
			    								    				for(Branch_Master br:bList)
			    								    				{
			    								    					branch1.add(br.getBranch_Name());
			    								    					System.out.println(br.getBranch_Name());  
			    								    					 
			    								    				}
			    								    			
			    								    				
			    								    				
			    								    				List <String> pageType=new ArrayList<>();
			    								    				pageType.add("CT");
			    								    				pageType.add("JLT");
			    								    				pageType.add("SM");
			    								    				 
			    								    				
			    								    				
			    								    				
			    								    				//ArrayList<Cus> un1=(ArrayList<Cus>) dao.getCustomerName();
			    								    				//ArrayList<SimpleBranch> un1=(ArrayList<SimpleBranch>) dao.getCustomerName2();
			    								    			//	List<Cus> un=dao.getCustomerName();
			    								    				
			    								    				List <String> operationType=new ArrayList<>();
			    								    				operationType.add("View");
			    								    				operationType.add("Save");
			    								    				operationType.add("Update");
			    								    				operationType.add("Delete");
			    								    				operationType.add("Verify1");
			    								    				operationType.add("Verify2");
			    								    						operationType.add("Reports");
			    								    						//operationType.add("Finger");operationType.add("Button");
			    								    				
			    								    				List <Branch_Master> branchList=empDao.getBranch_Master();
			    								    				mp.addAttribute("BranchList1", branchList);
			    								    				
			    								    				//List <UserDetails> userName=dao.getUserDetails();
			    								    				//mp.addAttribute("UsernameList", userName);
			    								    				
			    								    				Permission per=new Permission();
			    								    				mp.put("BranchList", branch1);
			    								    				mp.put("PageTypeList", pageType);
			    								    				mp.put("OperationTypes", operationType);
			    								    				//model.put("UserIdList", un1);
			    								    				mp.put("Permission", per);
			    								    			
			    								    				
			    								    				
			    								    				List <Simple> uname1=empDao.getUserLogin();
			    								    				List<String> uname2=new ArrayList<>();
			    								    				for(Simple s:uname1)
			    								    				{
			    								    					uname2.add(s.getS2());
			    								    					System.out.println(s.getS2());  
			    								    					 
			    								    				}
			    								    				mp.put("Uname2", uname2);
			    								    			
			    								    				
			    								    				
			    								    				
			    								    				mp.put("Permission", permission);
			    								    				//return new ModelAndView("ViewPermission");
			    								    				//return new ModelAndView("SetPermission");
			    								    				//return new ModelAndView("redirect:/viewUserList/"); 
			    								    				///GetPermissionBranch/200001
			    								    				
			    								    			
			    								    				 
			    								    				   /* if(Btype.equalsIgnoreCase("200"))
			    								    				    {
			    								    				    	Btype="201";
			    								    				    }*/
			    								    				 
			    								    				  
			    								    			
			    								    				  // int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current,em.getCategory());
			    								    				 //  System.out.println("aaaaaaaaaaaaaaaa="+a+",level="+ em.getAttendance_Status());
			    								    			
			    								    			       dao20.UpdateDATA("update employee_master set permission_type='C' where user_name='"+userName+"'",201);

			    						    						}//Custom Permission
			    								    					
			    								    				
    										    					attributes.addFlashAttribute("message", "Branch User Permission Details updated !");

			    								    				return new ModelAndView("redirect:/GetPermissionBranch_Type2/"+userName); 
			    								    				}
			    								    				
			    								    				
			    								    				
			    								    				
			    										    		
			    								    			
			    								    			}
			    											  
			    											  
			    											  @RequestMapping(value="/ChangePwdIndividualUser_All/{userName}")  
	    										    		    public ModelAndView ChangePwdIndividualUser_All(@PathVariable String userName,Map<String,Object> model,HttpServletRequest request,HttpSession session,ModelMap mp,RedirectAttributes attributes)
	    										    		    {  
	    										    		    	///Session-------------------------------------------------------------
	    										    				 session=request.getSession();
	    										    					String user=(String) session.getAttribute("user");
	    										    					if(user==null)
	    										    					return  new ModelAndView("Session");
	    										    			   //--
	    										    					
	    										    					String sql="update Login_Details set Pwd_Status=0 where username='"+userName+"'";
    											                  		dao20.UpdateDATA(sql, 201);
    											                  		int j=empDao.Resetpassword_Individual_User(userName);
	    										    					attributes.addFlashAttribute("message", "Status updated.Kindly update your password in Branch Login !");
	    										    					
	    										    				
	    										    					List <SimpleBranch> list=empDao.getUserDetailsList_Branch();
	    										    					mp.put("list",list);
	    										    					return new ModelAndView("redirect:/viewUserList");  
	    										    		    }
			    											  
			    											  
			    											  @RequestMapping(value="/ResetPwdIndividualUser_All/{userName}")  
	    										    		    public ModelAndView ResetPwdIndividualUser_All(@PathVariable String userName,Map<String,Object> model,HttpServletRequest request,HttpSession session,ModelMap mp,RedirectAttributes attributes)
	    										    		    {  
	    										    		    	///Session-------------------------------------------------------------
	    										    				 session=request.getSession();
	    										    					String user=(String) session.getAttribute("user");
	    										    					if(user==null)
	    										    					return  new ModelAndView("Session");
	    										    			   //--
	    										    					
	    										    					
	    										    					String Access_Level=dao10.Get_ScalarFun("Select access_level from employee_master where user_name='"+userName+"'", 201);
	    										    					if(Access_Level.equalsIgnoreCase("A"))	
	    										    					{
	    										    						int i=dao20.Resetpassword_Individual_User(userName);
	    										    						int j=empDao.Resetpassword_Individual_User(userName);
	    											                  		
		    										    					attributes.addFlashAttribute("message", "User Password reseted !");

	    										    					}
	    										    					else if(Access_Level.equalsIgnoreCase("C"))	
	    										    					{
	    										    						int i=dao20.Resetpassword_Individual_User(userName);
	    										    						attributes.addFlashAttribute("message", "user Password reseted !");
	    										    					}
	    										    					else
	    										    					{
	    										    						int i=empDao.Resetpassword_Individual_User(userName);
		    										    					attributes.addFlashAttribute("message", "user Password reseted !");
	    										    					}
	    										    						
	    										    					
	    										    					List <SimpleBranch> list=empDao.getUserDetailsList_Branch();
	    										    					mp.put("list",list);
	    										    					return new ModelAndView("redirect:/viewUserList");  
	    										    		    }
			    											  
			    											  
			    											  
			    											  
			    												 @RequestMapping(value = "/GetPermissionBranch_OLD/{Username}", method=RequestMethod.GET)
			    									  			    public ModelAndView GetPermissionBranch_OLD_MKK(@PathVariable String Username,ModelMap mp,HttpServletRequest request,Model model,HttpSession session)throws Exception
			    									  			   	 
			    									  				{ 
			    													  
			    									    				
			    									    				//-----------------------------------------------------GetPermission-------------------------------------

			    									    						///Session-------------------------------------------------------------
			    									    						 session=request.getSession();
			    									    							String user=(String) session.getAttribute("user");
			    									    							if(user==null)
			    									    							return  new ModelAndView("Session");
			    									    					   //--------------------------------------------------------------------
			    									    						
			    									    						
			    									    						int DBCode=(int) session.getAttribute("Branch");
			    									    						String[] per=empDao.GetPermission(user, "ST");
			    									    						
			    									    						 String View=null;
			    									    						 String Save=null;
			    									    						 String Update=null;
			    									    						 String Delete=null;
			    									    						 String Verify1=null;
			    									    						 String Reports1=null;
			    									    						 String Verify_21=null;
			    									    						 
			    									    						 View=per[0];
			    									    						 Save=per[1];
			    									    						 Update=per[2];
			    									    						 Delete=per[3];
			    									    						 Verify1=per[4];
			    									    						 Reports1=per[5];
			    									    						 Verify_21=per[6];
			    									    						
			    									    						
			    									    						int btn_Verify=1;
			    									    						int btn_Save=1;
			    									    						int btn_Delete=1;
			    									    						System.out.println("View="+View);
			    									    						if (View.equalsIgnoreCase("N"))
			    									    							return new ModelAndView("/Authorization");
			    									    					    if (Verify1.equalsIgnoreCase("N"))
			    									    					       btn_Verify = 2;
			    									    					    if (Save.equalsIgnoreCase("N"))
			    									    					        btn_Save= 2;
			    									    					    if (Update.equalsIgnoreCase("N"))
			    									    					        btn_Save=2;
			    									    					    if (Delete.equalsIgnoreCase("N"))
			    									    						       btn_Delete = 2;
			    									    					    System.out.println("Save="+btn_Save);
			    									    					    mp.put("SaveFlag", btn_Save);
			    									    					    mp.put("DeleteFlag", btn_Delete);
			    									    					  //-------------------------------------
			    									    						
			    									    						
			    									    						
			    									    						List <Simple> bList=empDao.getBranchName1();
			    									    						List <String> branch=new ArrayList<>();
			    									    						for(Simple s:bList)
			    									    						{
			    									    							branch.add(s.getS2());
			    									    							System.out.println(s.getS2());  
			    									    							 
			    									    						}
			    									    						
			    									    						
			    									    						
			    									    						List <String> pageType=new ArrayList<>();
			    									    						pageType.add("CT");
			    									    						pageType.add("JLT");
			    									    						pageType.add("SM");
			    									    						 
			    									    						
			    									    						
			    									    						
			    									    						//ArrayList<Cus> un1=(ArrayList<Cus>) dao.getCustomerName();
			    									    						//ArrayList<SimpleBranch> un1=(ArrayList<SimpleBranch>) dao.getCustomerName2();
			    									    					//	List<Cus> un=dao.getCustomerName();
			    									    						
			    									    						List <String> operationType=new ArrayList<>();
			    									    						operationType.add("View");
			    									    						operationType.add("Save");
			    									    						operationType.add("Update");
			    									    						operationType.add("Delete");
			    									    						operationType.add("Verify1");
			    									    						operationType.add("Verify2");
			    									    						operationType.add("Reports");
			    									    						//operationType.add("Finger");operationType.add("Button");
			    									    						
			    									    						List <Branch_Master> branchList=empDao.getBranch_Master();
			    									    						mp.addAttribute("BranchList1", branchList);
			    									    						
			    									    						//List <UserDetails> userName=dao.getUserDetails();
			    									    						//mp.addAttribute("UsernameList", userName);
			    									    						
			    									    						Permission per1=new Permission();
			    									    						mp.put("BranchList", branch);
			    									    						mp.put("PageTypeList", pageType);
			    									    						mp.put("OperationTypes", operationType);
			    									    						//model.put("UserIdList", un1);
			    									    						mp.put("Permission", per1);
			    									    					
			    									    					//	mp.addAttribute("UserIdList1",dao.getCustomerId());
			    									    						
			    									    						
			    									    					
			    									    						int f=1;
			    									    						String User_Name=null;
			    									    						
			    									    						List <Simple> uname1=empDao.getUserLogin();
			    									    						List<String> uname2=new ArrayList<>();
			    									    						for(Simple s:uname1)
			    									    						{
			    									    							uname2.add(s.getS2());
			    									    							
			    									    							if(s.getS2().equalsIgnoreCase(Username))
			    									    							{
			    									    								User_Name=s.getS2();
			    									    								
			    									    							}
			    									    							System.out.println(s.getS2());  
			    									    							 
			    									    						}
			    									    						per1.setUsername(User_Name);
			    									    						mp.put("Uname2", uname2);
			    									    						
			    									    						//--------------------------Customer--------------------------------------------
			    									    								String ViewCT=null;
			    									    								String SaveCT=null;
			    									    								String DeleteCT=null;
			    									    								String UpdateCT=null;
			    									    								String Verify1CT=null;
			    									    								String Verify2CT=null;
			    									    								String ReportCT=null;
			    									    								String Finger1CT=null;
			    									    								String Button1CT=null;
			    									    								
			    									    								   ArrayList<String> ct2=new ArrayList<>();
			    									    								List<SimpleBranch> ct1=empDao.getPermission(User_Name, "CT");
			    									    								if(ct1!=null)
			    									    								{
			    									    									for(SimpleBranch s:ct1)
			    									    									{
			    									    									    ViewCT=s.getS31();
			    									    									   SaveCT=s.getS32();
			    									    									   DeleteCT=s.getS33();
			    									    									   UpdateCT=s.getS34();
			    									    									   Verify1CT=s.getS35();
			    									    									   Verify2CT=s.getS36();
			    									    									   ReportCT=s.getS37();
			    									    									   
			    									    									   Finger1CT=s.getS38();
			    									    									   Button1CT=s.getS39();
			    									    									   
			    									    									   if(ViewCT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("View");
			    									    									   }
			    									    									   if(SaveCT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Save");
			    									    									   }
			    									    									   if(DeleteCT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Delete");
			    									    									   }
			    									    									   if(UpdateCT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Update");
			    									    									   }if(Verify1CT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Verify1");
			    									    									   }
			    									    									   if(Verify2CT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Verify2");
			    									    									   }if(ReportCT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Reports");
			    									    									   }
			    									    									 
			    									    									   
			    									    									   if(Finger1CT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Finger");
			    									    									   }if(Button1CT.equalsIgnoreCase("Y"))
			    									    									   {
			    									    										   ct2.add("Button");
			    									    									   }
			    									    									  		  
			    									    									
			    									    									}
			    									    							
			    									    								
			    									    							
			    									    								
			    									    								//mp.addAttribute("Permission", per);
			    									    								mp.addAttribute("cus", ct2);
			    									    								per1.setCT_Operation_Types(ct2);
			    									    								}
			    									    								//-----------------------------------------------------------------------------------------
			    									    								//--------------------------Customer--------------------------------------------
			    									    										String ViewSM=null;
			    									    										String SaveSM=null;
			    									    										String DeleteSM=null;
			    									    										String UpdateSM=null;
			    									    										String Verify1SM=null;
			    									    										String Verify2SM=null;
			    									    										String ReportSM=null;
			    									    										
			    									    										String Finger1SM=null;
			    									    										String Button1SM=null;

			    									    										
			    									    										   ArrayList<String> SM2=new ArrayList<>();
			    									    										List<SimpleBranch> SM1=empDao.getPermission(User_Name, "SM");
			    									    										if(SM1!=null)
			    									    										{
			    									    											for(SimpleBranch s:SM1)
			    									    											{
			    									    											    ViewSM=s.getS31();
			    									    											   SaveSM=s.getS32();
			    									    											   DeleteSM=s.getS33();
			    									    											   UpdateSM=s.getS34();
			    									    											   Verify1SM=s.getS35();
			    									    											   Verify2SM=s.getS36();
			    									    											   ReportSM=s.getS37();
			    									    											   
			    									    											   Finger1SM=s.getS38();
			    									    											   Button1SM=s.getS39();
			    									    											   
			    									    											   if(ViewSM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("View");
			    									    											   }
			    									    											   if(SaveSM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("Save");
			    									    											   }
			    									    											   if(DeleteSM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("Delete");
			    									    											   }
			    									    											   if(UpdateSM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("Update");
			    									    											   }if(Verify1SM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2SM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("Verify2");
			    									    											   }if(ReportSM.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SM2.add("Reports");
			    									    											   }
			    									    											   
			    									    											   
			    									    											   if(Finger1SM.equalsIgnoreCase("Y"))
			    									    											   {   SM2.add("Finger");
			    									    												}
			    									    											if(Button1SM.equalsIgnoreCase("Y"))
			    									    											   {   SM2.add("Button");
			    									    												}
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("sm", SM2);
			    									    										per1.setSM_Operation_Types(SM2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewSD=null;
			    									    										String SaveSD=null;
			    									    										String DeleteSD=null;
			    									    										String UpdateSD=null;
			    									    										String Verify1SD=null;
			    									    										String Verify2SD=null;
			    									    										String ReportSD=null;
			    									    										
			    									    										

			    									    										String Finger1SD=null;
			    									    										String Button1SD=null;

			    									    										
			    									    										
			    									    										
			    									    										   ArrayList<String> SD2=new ArrayList<>();
			    									    										List<SimpleBranch> SD1=empDao.getPermission(User_Name, "SD");
			    									    										if(SD1!=null)
			    									    										{
			    									    											for(SimpleBranch s:SD1)
			    									    											{
			    									    											    ViewSD=s.getS31();
			    									    											   SaveSD=s.getS32();
			    									    											   DeleteSD=s.getS33();
			    									    											   UpdateSD=s.getS34();
			    									    											   Verify1SD=s.getS35();
			    									    											   Verify2SD=s.getS36();
			    									    											   ReportSD=s.getS37(); 
			    									    											   
			    									    											   Finger1SD=s.getS38();
			    									    												 Button1SD=s.getS39();
			    									    											   
			    									    											   
			    									    											   
			    									    											   
			    									    											   if(ViewSD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("View");
			    									    											   }
			    									    											   if(SaveSD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("Save");
			    									    											   }
			    									    											   if(DeleteSD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("Delete");
			    									    											   }
			    									    											   if(UpdateSD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("Update");
			    									    											   }if(Verify1SD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2SD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("Verify2");
			    									    											   }if(ReportSD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   SD2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											   
			    									    											   if(Finger1SD.equalsIgnoreCase("Y"))
			    									    											   {   SD2.add("Finger");
			    									    												}
			    									    											if(Button1SD.equalsIgnoreCase("Y"))
			    									    											   {   SD2.add("Button");
			    									    												}
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("sd", SD2);
			    									    										per1.setSD_Operation_Types(SD2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewFD=null;
			    									    										String SaveFD=null;
			    									    										String DeleteFD=null;
			    									    										String UpdateFD=null;
			    									    										String Verify1FD=null;
			    									    										String Verify2FD=null;
			    									    										String ReportFD=null;
			    									    										
			    									    										String Finger1FD=null;
			    									    										String Button1FD=null;
			    									    										
			    									    										   ArrayList<String> FD2=new ArrayList<>();
			    									    										List<SimpleBranch> FD1=empDao.getPermission(User_Name, "FD");
			    									    										if(FD1!=null)
			    									    										{
			    									    											for(SimpleBranch s:FD1)
			    									    											{
			    									    											    ViewFD=s.getS31();
			    									    											   SaveFD=s.getS32();
			    									    											   DeleteFD=s.getS33();
			    									    											   UpdateFD=s.getS34();
			    									    											   Verify1FD=s.getS35();
			    									    											   Verify2FD=s.getS36();
			    									    											   ReportFD=s.getS37();
			    									    											   
			    									    											   
			    									    											   Finger1FD=s.getS38();
			    									    											   Button1FD=s.getS39();
			    									    											   
			    									    											   if(ViewFD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("View");
			    									    											   }
			    									    											   if(SaveFD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("Save");
			    									    											   }
			    									    											   if(DeleteFD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("Delete");
			    									    											   }
			    									    											   if(UpdateFD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("Update");
			    									    											   }if(Verify1FD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2FD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("Verify2");
			    									    											   }if(ReportFD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   FD2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											   if(Finger1FD.equalsIgnoreCase("Y"))
			    									    											   {   FD2.add("Finger");
			    									    												}
			    									    											if(Button1FD.equalsIgnoreCase("Y"))
			    									    											   {   FD2.add("Button");
			    									    												}
			    									    											}
			    									    									
			    									    											//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("fd", FD2);
			    									    										per1.setFD_Operation_Types(FD2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewRD=null;
			    									    										String SaveRD=null;
			    									    										String DeleteRD=null;
			    									    										String UpdateRD=null;
			    									    										String Verify1RD=null;
			    									    										String Verify2RD=null;
			    									    										String ReportRD=null;
			    									    										
			    									    										String Finger1RD=null;
			    									    										String Button1RD=null;
			    									    										 
			    									    										
			    									    										   ArrayList<String> RD2=new ArrayList<>();
			    									    										List<SimpleBranch> RD1=empDao.getPermission(User_Name, "RD");
			    									    										if(RD1!=null)
			    									    										{
			    									    											for(SimpleBranch s:RD1)
			    									    											{
			    									    											    ViewRD=s.getS31();
			    									    											   SaveRD=s.getS32();
			    									    											   DeleteRD=s.getS33();
			    									    											   UpdateRD=s.getS34();
			    									    											   Verify1RD=s.getS35();
			    									    											   Verify2RD=s.getS36();
			    									    											   ReportRD=s.getS37();
			    									    											   
			    									    											  

			    									    											 Finger1RD=s.getS38();
			    									    											 Button1RD=s.getS39();
			    									    											   
			    									    											   if(ViewRD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("View");
			    									    											   }
			    									    											   if(SaveRD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("Save");
			    									    											   }
			    									    											   if(DeleteRD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("Delete");
			    									    											   }
			    									    											   if(UpdateRD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("Update");
			    									    											   }if(Verify1RD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2RD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("Verify2");
			    									    											   }if(ReportRD.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   RD2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											   if(Finger1RD.equalsIgnoreCase("Y"))
			    									    											   {   RD2.add("Finger");
			    									    												}
			    									    											if(Button1RD.equalsIgnoreCase("Y"))
			    									    											   {   RD2.add("Button");
			    									    												}

			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("rd", RD2);
			    									    										per1.setRD_Operation_Types(RD2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewJL=null;
			    									    										String SaveJL=null;
			    									    										String DeleteJL=null;
			    									    										String UpdateJL=null;
			    									    										String Verify1JL=null;
			    									    										String Verify2JL=null;
			    									    										String ReportJL=null;
			    									    										
			    									    										String Finger1JL=null;
			    									    										String Button1JL=null;

			    									    										
			    									    										
			    									    										   ArrayList<String> JL2=new ArrayList<>();
			    									    										List<SimpleBranch> JL1=empDao.getPermission(User_Name, "JL");
			    									    										if(JL1!=null)
			    									    										{
			    									    											for(SimpleBranch s:JL1)
			    									    											{
			    									    											    ViewJL=s.getS31();
			    									    											   SaveJL=s.getS32();
			    									    											   DeleteJL=s.getS33();
			    									    											   UpdateJL=s.getS34();
			    									    											   Verify1JL=s.getS35();
			    									    											   Verify2JL=s.getS36();
			    									    											   ReportJL=s.getS37();
			    									    											   Finger1JL=s.getS38();
			    									    												 Button1JL=s.getS39();

			    									    												if(Finger1JL.equalsIgnoreCase("Y"))
			    									    												   {   JL2.add("Finger");
			    									    													}
			    									    												if(Button1JL.equalsIgnoreCase("Y"))
			    									    												   {   JL2.add("Button");
			    									    													}
			    									    											   
			    									    											   if(ViewJL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("View");
			    									    											   }
			    									    											   if(SaveJL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("Save");
			    									    											   }
			    									    											   if(DeleteJL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("Delete");
			    									    											   }
			    									    											   if(UpdateJL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("Update");
			    									    											   }if(Verify1JL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2JL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("Verify2");
			    									    											   }if(ReportJL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JL2.add("Reports");
			    									    											   }
			    									    											   if(Finger1JL.equalsIgnoreCase("Y"))
			    									    											   {   JL2.add("Finger");
			    									    												}
			    									    											if(Button1JL.equalsIgnoreCase("Y"))
			    									    											   {   JL2.add("Button");
			    									    												}
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("jl", JL2);
			    									    										per1.setJL_Operation_Types(JL2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewOL=null;
			    									    										String SaveOL=null;
			    									    										String DeleteOL=null;
			    									    										String UpdateOL=null;
			    									    										String Verify1OL=null;
			    									    										String Verify2OL=null;
			    									    										String ReportOL=null;
			    									    										
			    									    										String Finger1OL=null;
			    									    										String Button1OL=null;

			    									    										
			    									    										
			    									    										   ArrayList<String> OL2=new ArrayList<>();
			    									    										List<SimpleBranch> OL1=empDao.getPermission(User_Name, "OL");
			    									    										if(OL1!=null)
			    									    										{
			    									    											for(SimpleBranch s:OL1)
			    									    											{
			    									    											    ViewOL=s.getS31();
			    									    											   SaveOL=s.getS32();
			    									    											   DeleteOL=s.getS33();
			    									    											   UpdateOL=s.getS34();
			    									    											   Verify1OL=s.getS35();
			    									    											   Verify2OL=s.getS36();
			    									    											   ReportOL=s.getS37();
			    									    											   
			    									    											   Finger1OL=s.getS38();
			    									    												 Button1OL=s.getS39();

			    									    												if(Finger1OL.equalsIgnoreCase("Y"))
			    									    												   {   OL2.add("Finger");
			    									    													}
			    									    												if(Button1OL.equalsIgnoreCase("Y"))
			    									    												   {   OL2.add("Button");
			    									    													}
			    									    											   
			    									    											   if(ViewOL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("View");
			    									    											   }
			    									    											   if(SaveOL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("Save");
			    									    											   }
			    									    											   if(DeleteOL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("Delete");
			    									    											   }
			    									    											   if(UpdateOL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("Update");
			    									    											   }if(Verify1OL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2OL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("Verify2");
			    									    											   }if(ReportOL.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   OL2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("ol", OL2);
			    									    										per1.setOL_Operation_Types(OL2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewJO=null;
			    									    										String SaveJO=null;
			    									    										String DeleteJO=null;
			    									    										String UpdateJO=null;
			    									    										String Verify1JO=null;
			    									    										String Verify2JO=null;
			    									    										String ReportJO=null;
			    									    										
			    									    										String Finger1JO=null;
			    									    										String Button1JO=null;

			    									    										
			    									    										
			    									    										   ArrayList<String> JO2=new ArrayList<>();
			    									    										List<SimpleBranch> JO1=empDao.getPermission(User_Name, "JO");
			    									    										if(JO1!=null)
			    									    										{
			    									    											for(SimpleBranch s:JO1)
			    									    											{
			    									    											    ViewJO=s.getS31();
			    									    											   SaveJO=s.getS32();
			    									    											   DeleteJO=s.getS33();
			    									    											   UpdateJO=s.getS34();
			    									    											   Verify1JO=s.getS35();
			    									    											   Verify2JO=s.getS36();
			    									    											   ReportJO=s.getS37();
			    									    											   
			    									    											   Finger1JO=s.getS38();
			    									    												 Button1JO=s.getS39();

			    									    												if(Finger1JO.equalsIgnoreCase("Y"))
			    									    												   {   JO2.add("Finger");
			    									    													}
			    									    												if(Button1JO.equalsIgnoreCase("Y"))
			    									    												   {  JO2.add("Button");
			    									    													}
			    									    											   
			    									    											   if(ViewJO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("View");
			    									    											   }
			    									    											   if(SaveJO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("Save");
			    									    											   }
			    									    											   if(DeleteJO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("Delete");
			    									    											   }
			    									    											   if(UpdateJO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("Update");
			    									    											   }if(Verify1JO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2JO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("Verify2");
			    									    											   }if(ReportJO.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   JO2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("jo", JO2);
			    									    										per1.setJO_Operation_Types(JO2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewST=null;
			    									    										String SaveST=null;
			    									    										String DeleteST=null;
			    									    										String UpdateST=null;
			    									    										String Verify1ST=null;
			    									    										String Verify2ST=null;
			    									    										String ReportST=null;
			    									    										String Finger1ST=null;
			    									    										String Button1ST=null;
			    									    										
			    									    										 
			    									    										
			    									    										   ArrayList<String> ST2=new ArrayList<>();
			    									    										List<SimpleBranch> ST1=empDao.getPermission(User_Name, "ST");
			    									    										if(ST1!=null)
			    									    										{
			    									    											for(SimpleBranch s:ST1)
			    									    											{
			    									    											    ViewST=s.getS31();
			    									    											   SaveST=s.getS32();
			    									    											   DeleteST=s.getS33();
			    									    											   UpdateST=s.getS34();
			    									    											   Verify1ST=s.getS35();
			    									    											   Verify2ST=s.getS36();
			    									    											   ReportST=s.getS37();
			    									    											   
			    									    											   Finger1ST=s.getS38();
			    									    												 Button1ST=s.getS39();

			    									    												if(Finger1ST.equalsIgnoreCase("Y"))
			    									    												   {   ST2.add("Finger");
			    									    													}
			    									    												if(Button1ST.equalsIgnoreCase("Y"))
			    									    												   {   ST2.add("Button");
			    									    													}
			    									    											   
			    									    											   if(ViewST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("View");
			    									    											   }
			    									    											   if(SaveST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("Save");
			    									    											   }
			    									    											   if(DeleteST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("Delete");
			    									    											   }
			    									    											   if(UpdateST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("Update");
			    									    											   }if(Verify1ST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2ST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("Verify2");
			    									    											   }if(ReportST.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   ST2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("st", ST2);
			    									    										per1.setST_Operation_Types(ST2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewTR=null;
			    									    										String SaveTR=null;
			    									    										String DeleteTR=null;
			    									    										String UpdateTR=null;
			    									    										String Verify1TR=null;
			    									    										String Verify2TR=null;
			    									    										String ReportTR=null;
			    									    										
			    									    										String Finger1TR=null;
			    									    										String Button1TR=null;

			    									    										
			    									    										   ArrayList<String> TR2=new ArrayList<>();
			    									    										List<SimpleBranch> TR1=empDao.getPermission(User_Name, "TR");
			    									    										if(TR1!=null)
			    									    										{
			    									    											for(SimpleBranch s:TR1)
			    									    											{
			    									    											    ViewTR=s.getS31();
			    									    											   SaveTR=s.getS32();
			    									    											   DeleteTR=s.getS33();
			    									    											   UpdateTR=s.getS34();
			    									    											   Verify1TR=s.getS35();
			    									    											   Verify2TR=s.getS36();
			    									    											   ReportTR=s.getS37();
			    									    											   
			    									    											   Finger1TR=s.getS38();
			    									    												 Button1TR=s.getS39();

			    									    												if(Finger1TR.equalsIgnoreCase("Y"))
			    									    												   {   TR2.add("Finger");
			    									    													}
			    									    												if(Button1TR.equalsIgnoreCase("Y"))
			    									    												   {   TR2.add("Button");
			    									    													}
			    									    												
			    									    											   
			    									    											   if(ViewTR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("View");
			    									    											   }
			    									    											   if(SaveTR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("Save");
			    									    											   }
			    									    											   if(DeleteTR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("Delete");
			    									    											   }
			    									    											   if(UpdateTR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("Update");
			    									    											   }if(Verify1TR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2TR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("Verify2");
			    									    											   }if(ReportTR.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   TR2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("tr", TR2);
			    									    										per1.setTR_Operation_Types(TR2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String ViewIB=null;
			    									    										String SaveIB=null;
			    									    										String DeleteIB=null;
			    									    										String UpdateIB=null;
			    									    										String Verify1IB=null;
			    									    										String Verify2IB=null;
			    									    										String ReportIB=null;
			    									    										
			    									    										String Finger1IB=null;
			    									    										String Button1IB=null;

			    									    										 								   ArrayList<String> IB2=new ArrayList<>();
			    									    										List<SimpleBranch> IB1=empDao.getPermission(User_Name, "IB");
			    									    										if(IB1!=null)
			    									    										{
			    									    											for(SimpleBranch s:IB1)
			    									    											{
			    									    											    ViewIB=s.getS31();
			    									    											   SaveIB=s.getS32();
			    									    											   DeleteIB=s.getS33();
			    									    											   UpdateIB=s.getS34();
			    									    											   Verify1IB=s.getS35();
			    									    											   Verify2IB=s.getS36();
			    									    											   ReportIB=s.getS37();
			    									    											   
			    									    											   Finger1IB=s.getS38();
			    									    												 Button1IB=s.getS39();

			    									    												if(Finger1IB.equalsIgnoreCase("Y"))
			    									    												   {   IB2.add("Finger");
			    									    													}
			    									    												if(Button1IB.equalsIgnoreCase("Y"))
			    									    												   {   IB2.add("Button");
			    									    													}
			    									    												

			    									    											   
			    									    											   if(ViewIB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("View");
			    									    											   }
			    									    											   if(SaveIB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("Save");
			    									    											   }
			    									    											   if(DeleteIB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("Delete");
			    									    											   }
			    									    											   if(UpdateIB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("Update");
			    									    											   }if(Verify1IB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("Verify1");
			    									    											   }
			    									    											   if(Verify2IB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("Verify2");
			    									    											   }if(ReportIB.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   IB2.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										
			    									    									
			    									    										
			    									    										//mp.addAttribute("Permission", per);
			    									    										mp.addAttribute("ib", IB2);
			    									    										per1.setIB_Operation_Types(IB2);
			    									    										}
			    									    										//-----------------------------------------------------------------------------------------
			    									    										
			    									    										//300UP-------------------------------------------------------------------------
			    									    										//--------------------------Customer--------------------------------------------
			    									    										String View300UP=null;
			    									    										String Save300UP=null;
			    									    										String Delete300UP=null;
			    									    										String Update300UP=null;
			    									    										String Verify1300UP=null;
			    									    										String Verify2300UP=null;
			    									    										String Report300UP=null;
			    									    										
			    									    										String Finger1300UP=null;
			    									    										String Button1300UP=null;

			    									    										 								   ArrayList<String> UP300=new ArrayList<>();
			    									    										List<SimpleBranch> UP1=empDao.getPermission(User_Name, "UP");
			    									    										if(UP1!=null)
			    									    										{
			    									    											for(SimpleBranch s:UP1)
			    									    											{
			    									    											    View300UP=s.getS31();
			    									    											   Save300UP=s.getS32();
			    									    											   Delete300UP=s.getS33();
			    									    											   Update300UP=s.getS34();
			    									    											   Verify1300UP=s.getS35();
			    									    											   Verify2300UP=s.getS36();
			    									    											   Report300UP=s.getS37();
			    									    											   
			    									    											   Finger1300UP=s.getS38();
			    									    												 Button1300UP=s.getS39();

			    									    												if(Finger1300UP.equalsIgnoreCase("Y"))
			    									    												   {   UP300.add("Finger");
			    									    													}
			    									    												if(Button1300UP.equalsIgnoreCase("Y"))
			    									    												   {   UP300.add("Button");
			    									    													}
			    									    												

			    									    											   
			    									    											   if(View300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("View");
			    									    											   }
			    									    											   if(Save300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("Save");
			    									    											   }
			    									    											   if(Delete300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("Delete");
			    									    											   }
			    									    											   if(Update300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("Update");
			    									    											   }if(Verify1300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("Verify1");
			    									    											   }
			    									    											   if(Verify2300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("Verify2");
			    									    											   }if(Report300UP.equalsIgnoreCase("Y"))
			    									    											   {
			    									    												   UP300.add("Reports");
			    									    											   }
			    									    											  		  
			    									    											
			    									    											}
			    									    									
			    									    										mp.addAttribute("UP", UP300);
			    									    										per1.setUP300_Operation_Types(UP300);
			    									    										}
			    									    										//--------------------------------------------------------
			    									    										
			    									    										List <Branch_Master> bList2=empDao.getBranchMaster();
			    									    										List <String> branch1=new ArrayList<>();
			    									    										for(Branch_Master br:bList2)
			    									    										{
			    									    											branch1.add(br.getBranch_Name());
			    									    											System.out.println(br.getBranch_Name());  
			    									    											 
			    									    										}
			    									    										
			    									    										 ArrayList<String> branchTemp=new ArrayList<>();
			    									    										 List <String> BranchList=new ArrayList<>();
			    									    										 
			    									    										List <SimpleBranch> bList3=empDao.getUserBranch_NameList(User_Name);
			    									    										List <String> branch2=new ArrayList<>();
			    									    										for(SimpleBranch s:bList3)
			    									    										{
			    									    											branch2.add(s.getS3());
			    									    											//System.out.println(s.getS2());  
			    									    											BranchList.add(s.getS3());
			    									    											
			    									    											 
			    									    										}
			    									    								
			    									    										mp.addAttribute("branch", branch2);//with out checkbox
			    									    										mp.put("BranchList", branch); //Empty Check box branch list
			    									    										
			    									    										mp.put("BranchNewList", BranchList); //Empty Check box branch list
			    									    										per1.setBranch_Operation_Types(BranchList);
			    									    										
			    									    										per1.setBranch_Code(BranchList);
			    									    										
			    									    										
			    									    										
			    									    						//-------------------------------------------------------------------------------------				
			    									    										
			    									    										//----------Emp Details------------------------------------
			    									    										String EmpId=null;
			    									    										String Emp_Name=null;
			    									    										String Gender=null;
			    									    										String Dob=null;
			    									    										String Father_Name=null;
			    									    										String Marital_Status=null;
			    									    										String Email_id=null;
			    									    										String Mobile_number=null;
			    									    										String Address=null;
			    									    										String Edu_qualifi=null;
			    									    										
			    									    										String User_name=null;
			    									    										String Password=null;
			    									    										String Access_Level=null;
			    									    										String Login_type=null;
			    									    										String Status=null;
			    									    										String Designation=null;
			    									    										String User_Level=null;
			    									    										String Muli_branch=null;
			    									    										String Subakalyan=null;
			    									    										String Transaction_Edit=null;
			    									    										
			    									    										String Joining_date=null;
			    									    										String Attachmentfile=null;
			    									    										
			    									    										String bcode=null;
			    									    										
			    									    										String Attendance_Level=null;
			    									    										String Attendance_Status=null;
			    									    										String Category=null;
			    									    										
			    									    										
			    									    										
			    									    												String Emp_Id=dao10.Get_ScalarFun("select * from Employee_Master where USER_NAME='"+User_Name+"' and rownum=1", 201);

			    									    										
			    									    										List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
			    									    										for(SimpleBranch s:emplyee)
			    									    										{
			    									    										
			    									    											 EmpId=s.getS3();
			    									    											 Emp_Name=s.getS31();
			    									    											 Gender=s.getS39();
			    									    											 Dob=s.getS40();
			    									    											 Father_Name=s.getS131();
			    									    											 Marital_Status=s.getS132();
			    									    											 Email_id=s.getS72();
			    									    											 Mobile_number=s.getS32();
			    									    											 Address=s.getS133();
			    									    											 Edu_qualifi=s.getS134();
			    									    											
			    									    											 User_name=s.getS135();
			    									    											 Access_Level=s.getS137();
			    									    											 Login_type=s.getS76();
			    									    											 Status=s.getS35();
			    									    											 Designation=s.getS36();
			    									    											 User_Level=s.getS34();
			    									    											 Muli_branch=s.getS77();
			    									    											 Subakalyan=s.getS78();
			    									    											 Transaction_Edit=s.getS79();
			    									    											 Category=s.getS138();
			    									    											 Joining_date=s.getS73();
			    									    											 Attachmentfile=s.getS74();
			    									    											 System.out.println("s.getS137()="+s.getS137()); 
			    									    											 System.out.println("s.getS76()="+s.getS76()); 
			    									    											 System.out.println("s.getS77()="+s.getS77()); 	
			    									    											 System.out.println("s.getS78()="+s.getS78()); 	
			    									    											 System.out.println("s.getS79()="+s.getS79()); 	
			    									    											 System.out.println("Access_Level="+Access_Level); 
			    									    										 
			    									    									 Attendance_Level=s.getS4();
			    									    									Attendance_Status=s.getS111();
			    									    												
			    									    											System.out.println("Login_type="+Login_type); 
			    									    											System.out.println("Subakalyan="+Subakalyan); 
			    									    											System.out.println("Transaction_Edit="+Transaction_Edit); 
			    									    											
			    									    											 mp.put("Joining_date", Joining_date);
			    									    											 mp.put("Attachmentfile", Attachmentfile);
			    									    											
			    									    										
			    									    											 mp.put("Emp_Id", EmpId);
			    									    											 mp.put("Emp_Name", Emp_Name);
			    									    											 
			    									    										
			    									    											 
			    									    											 //mp.put("Gender", Gender);
			    									    											 
			    									    											 mp.put("Dob", Dob);
			    									    											 mp.put("Father_Name", Father_Name);
			    									    											 
			    									    											// em.setDob(Dob);
			    									    											
			    									    											// mp.put("Marital_Status", Marital_Status);
			    									    											 
			    									    											 mp.put("Email_id", Email_id);
			    									    											 mp.put("Mobile_number", Mobile_number);
			    									    											 //mp.put("Address", Address);
			    									    											 mp.put("Edu_qualifi", Edu_qualifi);
			    									    											 mp.put("User_name", User_name);
			    									    											 
			    									    											// mp.put("Access_Level", Access_Level);
			    									    											 per1.setAccess_Level(Access_Level);
			    									    											 
			    									    											 //mp.put("Login_type", Login_type);
			    									    											 per1.setLogin_type(Login_type);
			    									    											 
			    									    											 mp.put("Status", Status);
			    									    											 per1.setStatus(Status);
			    									    											 
			    									    											 mp.put("Designation", Designation);
			    									    											 mp.put("User_Level", User_Level);
			    									    											//07-12-2022
			    									    											 per1.setUser_Level(User_Level);
			    									    											 
			    									    											 //mp.put("Muli_branch", Muli_branch);
			    									    											 per1.setMuli_branch(Muli_branch);
			    									    											 
			    									    											// mp.put("Subakalyan", Subakalyan);
			    									    											 System.out.println("Subakalyan---------------------"+Subakalyan);
			    									    											per1.setSubakalyan(Subakalyan);
			    									    											 
			    									    											 mp.put("Transaction_Edit", Transaction_Edit);
			    									    											 per1.setTransaction_Edit(Transaction_Edit);
			    									    											 
			    									    											 bcode=s.getS33();
			    									    											 
			    									    											 System.out.println("Attendance_Leve="+Attendance_Level);
			    									    											 System.out.println("Attendance_Status="+Attendance_Status);

			    									    											 mp.put("Attendance_Level", Attendance_Level);
			    									    											 mp.put("Attendance_Status", Attendance_Status);
			    									    											 per1.setAttendance_Level(Attendance_Level);
			    									    											 per1.setAttendance_Status(Attendance_Status);
			    									    											 
			    									    											 
			    									    											/* em.setResign_Date(s.getS9());
			    									    											 em.setSus_From_Date(s.getS112());
			    									    											 em.setSus_To_Date(s.getS75());
			    									    											 */
			    									    											 
			    									    											 
			    									    											//Corp Transaction
			    									    												String Corp_Transaction=null;
			    									    												Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
			    									    												per1.setCorpTransaction(Corp_Transaction);
			    									    										   //PermissionLevel
			    									    												String PermissionLevel=null;
			    									    												PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
			    									    												per1.setPermissionLevel(PermissionLevel);

			    									    										}
			    									    										
			    									    										String Branch_Type="";
			    									    										String BranchName="";
			    									    										if(bcode.equalsIgnoreCase("200"))
			    									    										{
			    									    											Branch_Type="200-General";
			    									    										}
			    									    										else
			    									    										{
			    									    											BranchName=dao10.getBranchName_bcode(bcode);
			    									    											Branch_Type=bcode+"-"+BranchName;
			    									    										}
			    									    										System.out.println("Branch_Type=getbranch "+Branch_Type);
			    									    										//}else
			    									    										//BranchName=dao10.getBranchName_bcode(""+DBCode);

			    									    										mp.put("BranchName2",BranchName);

			    									    										
			    									    										List <Simple> branchCode=dao10.getBranchCode();
			    									    										System.out.println("Branch_Code=getbranch");
			    									    										List<String> branchCodeList=new ArrayList<>();
			    									    										for(Simple s1:branchCode)
			    									    										{
			    									    											String s3=s1.getS1()+"-"+s1.getS2();
			    									    											branchCodeList.add(s3);
			    									    											System.out.println(s3);  
			    									    											 
			    									    										}
			    									    										mp.put("BranchCodeList", branchCodeList);
			    									    										per1.setBranch_Type(Branch_Type);
			    									    										
			    									    											per1.setEmp_Id(Emp_Id);
			    									    										//------------------------------------------------------------
			    									    				      return new ModelAndView("SetPermission");  
			    									    				
			    									    			
			    													 
			    									  				}

			    												 
			    												 
			    												 @RequestMapping(value = "/downloadAttachmentUser_Resignation/{id}", method = RequestMethod.GET, produces = "application/pdf")
			    												    public @ResponseBody void downloadAttachmentUser_Resignation(@PathVariable String id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException {
			    													 
			    												    	byte barr[] = null;    
			    												    	session=request.getSession();
			    												    	 int DBCode=(int) session.getAttribute("Branch");
			    												    	 
			    												    	//--Set Connection------------------------------------
			    															int j=DBCode;
			    															this.template=con.getCon2(j);
			    												//-----------------------------------------------------
			    															
			    															//String fileName=Customer_Id+"_idproof2.jpg";
			    															 String fileName=empDao.getAttachement_FilesNameUser_Resignation(id);
			    															// String FILE_PATH = request.getRealPath(File_Path+fileName);
			    															
			    															 if(!fileName.equalsIgnoreCase(null) && !fileName.isEmpty())
			    															 { String FILE_PATH = File_Path2+fileName;
			    													     
			    															 File file = new File(FILE_PATH);
			    													        InputStream in = new FileInputStream(file);

			    													        response.setContentType("application/pdf");
			    													        response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
			    													        response.setHeader("Content-Length", String.valueOf(file.length()));
			    													        FileCopyUtils.copy(in, response.getOutputStream()); 
			    												   
			    															 }
			    												    	
			    												       // OutputStream out = new FileOutputStream("out.pdf");
			    												       // out.write(barr);
			    												       // out.close();
			    												    }
			    												 
			    												 
			    												 @RequestMapping(value = "/downloadAttachmentUser_Suspention/{id}", method = RequestMethod.GET, produces = "application/pdf")
			    												    public @ResponseBody void downloadAttachmentUser_Suspention(@PathVariable String id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException {
			    													 
			    												    	byte barr[] = null;    
			    												    	session=request.getSession();
			    												    	 int DBCode=(int) session.getAttribute("Branch");
			    												    	 
			    												    	//--Set Connection------------------------------------
			    															int j=DBCode;
			    															this.template=con.getCon2(j);
			    												//-----------------------------------------------------
			    															
			    															//String fileName=Customer_Id+"_idproof2.jpg";
			    															 String fileName=empDao.getAttachement_FilesNameUser_Suspention(id);
			    															// String FILE_PATH = request.getRealPath(File_Path+fileName);
			    															
			    															 if(!fileName.equalsIgnoreCase(null) && !fileName.isEmpty())
			    															 { String FILE_PATH = File_Path2+fileName;
			    													     
			    															 File file = new File(FILE_PATH);
			    													        InputStream in = new FileInputStream(file);

			    													        response.setContentType("application/pdf");
			    													        response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
			    													        response.setHeader("Content-Length", String.valueOf(file.length()));
			    													        FileCopyUtils.copy(in, response.getOutputStream()); 
			    												   
			    															 }
			    												    	
			    												       // OutputStream out = new FileOutputStream("out.pdf");
			    												       // out.write(barr);
			    												       // out.close();
			    												    }
			    												 
			    												 @RequestMapping(value = "/downloadAttachmentUser_Maternity/{id}", method = RequestMethod.GET, produces = "application/pdf")
			    												    public @ResponseBody void downloadAttachmentUser_Maternity(@PathVariable String id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException {
			    													 
			    												    	byte barr[] = null;    
			    												    	session=request.getSession();
			    												    	 int DBCode=(int) session.getAttribute("Branch");
			    												    	 
			    												    	//--Set Connection------------------------------------
			    															int j=DBCode;
			    															this.template=con.getCon2(j);
			    												//-----------------------------------------------------
			    															
			    															//String fileName=Customer_Id+"_idproof2.jpg";
			    															 String fileName=empDao.getAttachement_FilesNameUser_Maternity(id);
			    															// String FILE_PATH = request.getRealPath(File_Path+fileName);
			    															
			    															 if(!fileName.equalsIgnoreCase(null) && !fileName.isEmpty())
			    															 { String FILE_PATH = File_Path2+fileName;
			    													     
			    															 File file = new File(FILE_PATH);
			    													        InputStream in = new FileInputStream(file);

			    													        response.setContentType("application/pdf");
			    													        response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
			    													        response.setHeader("Content-Length", String.valueOf(file.length()));
			    													        FileCopyUtils.copy(in, response.getOutputStream()); 
			    												   
			    															 }
			    												    	
			    												       // OutputStream out = new FileOutputStream("out.pdf");
			    												       // out.write(barr);
			    												       // out.close();
			    												    }
			    												 
			    												 
			    												 
			    												  @RequestMapping("/Check_Super_Emp.htm")
					    							    			@ResponseBody
					    							    	 		 public String Check_Super_Emp(@RequestParam String User_name,HttpServletRequest request, HttpServletResponse response,@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpSession session,Model m)throws Exception
					    							    	  		{
					    							    	  		 
					    							    	    
					    							    	  		 String empid=User_name;
					    							    	     		 
					    							    	     		 session=request.getSession();
					    							    	   			String user=(String) session.getAttribute("user");
					    							    	   			if(user==null)
					    							    	   				 return ("Session");  
					    							    	      	//-----------------------------------------------------GetPermission-------------------------------------

					    							    	   		session=request.getSession();
					    							    	   		
					    							    	   		System.out.println("empid-------------------------"+empid);
					    							    	   		
					    							    	   	   String Level=dao10.Get_ScalarFun("select super_admin from employee_master where user_name='"+user+"'", 201);
					    							    	   		 

					    							    	          String res = ""+Level;
					    							    	  		   
					    							    	  		
					    							    	  		  return res;
					    							    	  		 }
			    												  
			    												  
			    												  
			    												 	 @RequestMapping(value = "/getEmployee_Report", params ="Btn_Employee_Report", method=RequestMethod.POST)
			    													   public void Btn_Employee_Report(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
			    													   { 

			    															// JL_Master jl=new JL_Master();

			    														   System.out.println("inside controller-----------------------------------");
			    														   
			    															session = request.getSession();
			    															int DBCode = (int) session.getAttribute("Branch");
			    											                String user=(String) session.getAttribute("user");
			    											                
			    															String Scheme_Code = "600";
			    															List <Simple> branchCode=dao10.getBranchCode();
			    															System.out.println("Branch_Code=getbranch");
			    															List<String> branchCodeList=new ArrayList<>();
			    															for(Simple s:branchCode)
			    															{
			    																String s3=s.getS1()+"-"+s.getS2();
			    																branchCodeList.add(s3);
			    																System.out.println(s3);  
			    																 
			    															}
			    															mp.put("BranchCodeList", branchCodeList);
			    												  				

			    															String Branch_Type=em.getBranch_Type().substring(0, 3);
			    															System.out.println("Branch_Type="+Branch_Type);

			    														    String BName="All Branches";
			    															int Bcode = Integer.parseInt(Branch_Type);
			    															if(em.getBranch_Type().equalsIgnoreCase("300"))
			    															{
			    																Bcode=2;
			    															}
			    															else
			    																BName=em.getBranch_Type().substring(4);
			    																
			    															
			    															String Scheme_type=em.getRemarks();
			    															
			    															System.out.println("Scheme_type="+Scheme_type);
			    															String msg="All ";
			    															String Status="All ";
			    															if(!Scheme_type.equalsIgnoreCase("600"))
			    															{
			    																Status=Scheme_type;
			    																
			    																if(Scheme_type.equalsIgnoreCase("A"))
			    																	msg="Active";
			    																else if(Scheme_type.equalsIgnoreCase("C"))
			    																	msg="In Active";
			    																else if(Scheme_type.equalsIgnoreCase("M"))
			    																	msg="Maternity Leave";
			    																else if(Scheme_type.equalsIgnoreCase("S"))
			    																	msg="Suspended";
			    																else if(Scheme_type.equalsIgnoreCase("R"))
			    																	msg="Resigned";
			    															}
			    															else
			    															{
			    																
			    																Status="%%";
			    															}
			    											            //  Status=BName+"-"+Status;
			    											          	System.out.println("Status="+Status);
			    															//String From_Date=em.getDob();
			    															//String To_Date=em.getJoining_Date();
			    															//System.out.println("inside control 2----------="+From_Date+" ="+Scheme_Code);
			    															String Sql_Final = null;
			    															

			    															//String Sql="select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS from employee_master where status like '%"+Status+"%' and current_branch like '%"+Bcode+"%' order by current_branch,empid";
			    															//String Sql="select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS,(select branch_name from branch_master where to_char(branch_code)=dbcode) as parent_Branch,(select branch_name from branch_master where to_char(branch_code)=current_branch) as Current_Branch_Name from employee_master where status like '%"+Status+"%' and current_branch like '%"+Bcode+"%' order by current_branch,empid";
			    															//String Sql="select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS,select case when dbcode='200' then 'Corporate' else (select branch_name from branch_master where to_char(branch_code)=employee_master.dbcode) end  as parent_Branch,case when dbcode='200' then 'Corporate' else (select branch_name from branch_master where to_char(branch_code)=current_branch) end as Current_Branch_Name from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid";
			    															//String Sql="select a.*,case when a.DBCode='200' then 'Corporate' else b.Branch_Name end as ParentBranch,case when a.Current_Branch='200' then 'Corporate' else c.Branch_Name end as CurrentBranch from (select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid)a left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)b on a.DBCode=b.Branch_code left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)c on a.Current_Branch=c.Branch_code";
			    															//05-05-2024
			    															//String Sql="select a.*,case when a.DBCode='200' then 'Corporate' else b.Branch_Name end as ParentBranch,case when a.Current_Branch='200' then 'Corporate' else c.Branch_Name end as CurrentBranch from (select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS, CAse when Access_level='A' then 'Branch and Corp' else case when Access_level='B' then 'Branch' else case when Access_level='C' then 'Corp and Authorize' else 'NA' end end end as Access_Type from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid)a left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)b on a.DBCode=b.Branch_code left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)c on a.Current_Branch=c.Branch_code";

			    															//24-07-2024 //25-07-2024
			    														//	String Sql="select a.*,case when a.DBCode='200' then 'Corporate' else b.Branch_Name end as ParentBranch,case when a.Current_Branch='200' then 'Corporate' else c.Branch_Name end as CurrentBranch from (select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS, CAse when Access_level='A' then 'Branch and Corp' else case when Access_level='B' then 'Branch' else case when Access_level='C' then 'Corp and Authorize' else 'NA' end end end as Access_Type, CAse when login_type='A' then 'Finger and Password' else case when login_type='P' then 'Password' else case when login_type='F' then 'Finger' else 'NA' end end end as login_type, CAse when corp_login='A' then 'Finger and Password' else case when corp_login='P' then 'Password' else case when corp_login='F' then 'Finger' else 'NA' end end end as corp_login from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid)a left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)b on a.DBCode=b.Branch_code left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)c on a.Current_Branch=c.Branch_code";

			    															//21-08-2024
			    															String Sql="select a.*,case when a.DBCode='200' then 'Corporate' else b.Branch_Name end as ParentBranch,case when a.Current_Branch='200' then 'Corporate' else c.Branch_Name end as CurrentBranch from (select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS, CAse when Access_level='A' then 'Branch and Corp' else case when Access_level='B' then 'Branch' else case when Access_level='C' then 'Corp and Authorize' else 'NA' end end end as Access_Type, CAse when login_type='A' then 'Finger and Password' else case when login_type='P' then 'Password' else case when login_type='F' then 'Finger' else 'NA' end end end as login_type, CAse when corp_login='A' then 'Finger and Password' else case when corp_login='P' then 'Password' else case when corp_login='F' then 'Finger' else 'NA' end end end as corp_login, case when level1='A' then 'Admin' else case when level1='M' then 'Manager' else case when level1='E' then 'Month End' else case when level1='C' then 'Accounts' else case when level1='R' then 'Audit' else case when level1='GM' then 'General Manager' else 'Normal' end end end end end end as User_Level  from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid)a left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)b on a.DBCode=b.Branch_code left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)c on a.Current_Branch=c.Branch_code";

			    											//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
			    															//List<SimpleBranch> list1=null;
			    															
			    															//List<SimpleBranch> list3=null;
			    															//List<SimpleBranch> list2=null;
			    															
			    															System.out.println(Sql);
			    															
			    															List<SimpleBranch> list=null;
			    																list = empDao.getEmpReport(Sql);
			    																			    				
			    															
			    													
			    															

			    														
			    															// Connecting to the SQL server database
			    																Connection conn = null;

			    																try {

			    																	// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
			    																	// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
			    																	Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			    																	// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

			    																	// Loading Jasper Report File from Local file system

			    																	// String jrxmlFile =
			    																	// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
			    																	// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
			    																	// String jrxmlFile=request.getRealPath("Report1.jrxml");
			    																	// String jrxmlFile =
			    																	// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

			    																	// String jrxmlFile=request.getRealPath("kk1.jrxml");
			    																	String jrxmlFile = request.getRealPath("Emp_Report.jrxml");
			    																	if(em.getFile_Type().equalsIgnoreCase("2"))
			    															           {
			    																		jrxmlFile = request.getRealPath("Emp_Report_xl.jrxml");
			    															           }
			    																	InputStream input = new FileInputStream(new File(jrxmlFile));

			    																	// String idDyn="101";
			    																	// int idDyn=Transfer_Acc_No;
			    																	// String StartDate=From_Date;
			    																	// String EndDate=To_Date;
			    																	// Map parameters = new HashMap();
			    																	// parameters=null;
			    																	// parameters.put("Accno",idDyn);
			    																	// parameters.put("StartDate",StartDate);
			    																	// parameters.put("EndDate",EndDate);

			    																	/* Convert List to JRBeanCollectionDataSource */
			    																	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
			    																			list);
			    																	/* Map to hold Jasper report Parameters */
			    																	Map<String, Object> parameters = new HashMap<String, Object>();
			    																	
			    																	
			    																	
			    																	//------------Get Branch Details----------------------------------
			    														  	             String Branch_Name = null;
			    														  	             String Branch_Address = null;
			    														  	             String Branch_City = null;
			    														  	             String Branch_Pincode = null;
			    														  	             String Branch_Phone = null;
			    														  	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
			    														  	             for(SimpleBranch sb:brInfo)
			    														  	             {
			    														  	            	Branch_Name=sb.getS2();
			    															    	            Branch_Address=sb.getS3();
			    															    	             Branch_City=sb.getS4();
			    															    	             Branch_Pincode=sb.getS5();
			    															    	             Branch_Phone=sb.getS6();
			    															    	             
			    															    	           }
			    														  	             parameters.put("Branch_Name", Branch_Name);
			    														  	             parameters.put("Branch_Address", Branch_Address+","+Branch_City+","+Branch_Pincode+".");
			    														  	            // parameters.put("Branch_City", Branch_City);
			    														  	            // parameters.put("Branch_Pincode", Branch_Pincode);
			    														  	            // parameters.put("Branch_Phone", Branch_Phone);
			    														  	          System.out.println("Branch_Name"+Branch_Name);
			    														  	     


			    																	String realPath = request.getRealPath("/resources/images/");
			    																	parameters.put("realPath", realPath);

			    																	parameters.put("itemsJRBean", itemsJRBean);
			    																	 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

			    																	Date Current_Date=(Date) session.getAttribute("Current_Date");
			    															    	String Current=sd.format(Current_Date);
			    															    	 String user_name=empDao.getEmployeeName(user);
			    																	parameters.put("Date", Current);
			    																	
			    																	parameters.put("Status", "Employee Details : "+BName+" - "+msg);
			    																	
			    																	 //10-02-2023
			    														             parameters.put("user", user_name);
			    														             

			    																	/* Using compiled version(.jasper) of Jasper report to generate PDF */
			    																	// JasperPrint jasperPrint =
			    																	// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
			    																	// parameters, new JREmptyDataSource());

			    																	/* outputStream to create PDF */
			    																	// OutputStream outputStream = new FileOutputStream(new
			    																	// File(outputFile));
			    																	/* Write content to PDF file */
			    																	// JasperExportManager.exportReportToPdfStream(jasperPrint,
			    																	// outputStream);
			    																	// Generating the report

			    																	JasperReport jasperReport = JasperCompileManager
			    																			.compileReport(input);
			    																	JasperPrint jasperPrint = JasperFillManager.fillReport(
			    																			jasperReport, parameters, new JREmptyDataSource());

			    																	// Exporting the report as a PDF

			    																	// JRExporter exporter = null;
			    																	// OutputStream ouputStream = response.getOutputStream();

			    																	// response.setContentType("application/pdf");
			    																	// exporter = new JRPdfExporter();
			    																	// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
			    																	// jasperPrint);
			    																	// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
			    																	// ouputStream);
			    														//---------------------------------------------------------------------------------------------------------------------------------------------
			    																	//String filename = "JL_OD_Report";

			    																	//JasperExportManager.exportReportToPdfStream(jasperPrint,
			    																		//	response.getOutputStream());
			    																	//JasperExportManager.exportReportToPdfFile(jasperPrint,
			    																			//"f:/Reports/" + filename + ".pdf");
			    														//---------------------------------------------------------------------------------------------------------------------------------------------
			    																
			    																	String Filename2="Emp_Report";
			    															           String  reportPath = request.getRealPath("/");
			    															           if(em.getFile_Type().equalsIgnoreCase("1"))
			    															           {
			    															        	   JRExporter exporter2 = null;
			    															           		 ServletOutputStream ouputStream2 = response.getOutputStream();
			    															           		 
			    															           		 response.setContentType("application/pdf");
			    															           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
			    															                    exporter2 = new JRPdfExporter();
			    															                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
			    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			    															                    exporter2.exportReport();
			    															           }
			    															           else if(em.getFile_Type().equalsIgnoreCase("2"))
			    															           {
			    															        	   
			    																          
			    																           response.setContentType("application/xls");
			    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			    																           JRXlsExporter exporter = new JRXlsExporter();
			    																           // JRXlsExporter exporter = new JRXlsExporter();
			    																            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    																            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			    																            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			    																            exporter.exportReport();
			    																    
			    															           }
			    															           else if(em.getFile_Type().equalsIgnoreCase("3"))
			    															           {
			    															        	   response.setContentType("application/docx");
			    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
			    																           JRDocxExporter exporter3 = new JRDocxExporter();
			    																           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    																           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
			    																           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			    																           exporter3.exportReport();
			    															           }
			    																	// JasperExportManager.exportReportToPdfStream(jasperPrint,
			    																	// response.getOutputStream());
			    																	// JasperExportManager.exportReportToHtmlFile(jasperPrint,
			    																	// "/report1.html");
			    																	// JasperViewer.viewReport(jasperPrint);
			    																	
			    															           
			    															          //------10-02-2023----------------------------------
			    													  			         String File_Type="";
			    													  				     if(em.getFile_Type().equalsIgnoreCase("1"))
			    													  				    	File_Type="PDF";
			    													  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
			    													  				    	File_Type="EXCEL";
			    													  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
			    													  					File_Type="DOCUMENT";
			    													  			        
			    													  	    //---------------------------------
			    												  			 
			    																	
			    																		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			    																		dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+"')", 201);


			    																	response.getOutputStream().flush();
			    																	response.getOutputStream().close();

			    																} catch (FileNotFoundException e) {
			    																	e.printStackTrace();
			    																} catch (JRException e) {
			    																	e.printStackTrace();
			    																} catch (ClassNotFoundException e) {
			    																	e.printStackTrace();
			    																} catch (InstantiationException e) {
			    																	// TODO Auto-generated catch block
			    																	e.printStackTrace();
			    																} catch (IllegalAccessException e) {
			    																	// TODO Auto-generated catch block
			    																	e.printStackTrace();
			    																} finally {
			    																	if (conn != null) {
			    																		try {
			    																			conn.close();
			    																		} catch (SQLException e) {
			    																			// TODO Auto-generated catch block
			    																			e.printStackTrace();
			    																		}
			    																	}
			    																}

			    														} 

			    												    	 
			    												  	 @RequestMapping(value = "/Employee_Report")
			    												   	public String Employee_Report_Home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
			    												       	///Session-------------------------------------------------------------
			    												   		 session=request.getSession();
			    												   			String user=(String) session.getAttribute("user");
			    												   			if(user==null)
			    												   			return  "Session_Popup";
			    												   	   //--------------------------------------------------------------------
			    												   			 
			    												   			String[] per1=perdao.GetPermission(user, "Business");
			    															
			    															
			    															 String View=null;
			    															 String Save=null;
			    															 String Update=null;
			    															 String Delete=null;
			    															 String Verify2=null;
			    															 String Verify3=null;
			    															 String Verify4=null;
			    															 String Verify5=null;
			    															 String Reports1=null;
			    															 String Button=null;
			    															 String Finger_Print=null;
			    																	
			    															 
			    															 
			    															 View=per1[0];
			    															 Save=per1[1];
			    															 Update=per1[2];
			    															 Delete=per1[3];
			    															 Verify2=per1[4];
			    															 Verify3=per1[5];
			    															 Verify4=per1[6];
			    															 Verify5=per1[7];
			    															 Reports1=per1[8];
			    															 Button=per1[9];
			    															 Finger_Print=per1[10];
			    															
			    															 
			    															 System.out.println("View-------------------------"+View);
			    															 System.out.println("Save-------------------------"+Save);
			    															 System.out.println("Update-------------------------"+Update);
			    															 System.out.println("Delete-------------------------"+Delete);
			    															 System.out.println("Verify2-------------------------"+Verify2);
			    															 System.out.println("Verify3-------------------------"+Verify3);
			    															 System.out.println("Verify4-------------------------"+Verify4);
			    															 System.out.println("Verify5-------------------------"+Verify5);
			    															 System.out.println("Reports1-------------------------"+Reports1);
			    															 System.out.println("Button-------------------------"+Button);
			    															 System.out.println("Finger_Print-------------------------"+Finger_Print);
			    															 
			    															 
			    															
			    															
			    															int btn_Verify=1;
			    															int btn_Save=1;
			    															int btn_Delete=1;
			    															int btn_Report=1;
			    															
			    															if (View.equalsIgnoreCase("N"))
			    																return ("/Authorization");
			    															System.out.println("0000000000000000000000");
			    														    if (Verify2.equalsIgnoreCase("N"))	
			    														       btn_Verify = 2;
			    														    System.out.println("111111111111");
			    														    if (Save.equalsIgnoreCase("N"))
			    														        btn_Save= 2;
			    														    System.out.println("222222222222222222222222");
			    														    if (Update.equalsIgnoreCase("N"))
			    														        btn_Save=2;
			    														    if (Reports1.equalsIgnoreCase("N"))
			    														    	btn_Report=2;
			    												   			
			    														    String SaveFlag="";
			    														    if(btn_Report==2)
			    														    {
			    															 SaveFlag="Display:none;";
			    															 System.out.println("1111111111111111111111");
			    														    }
			    														 
			    														 mp.put("ReportFlag", SaveFlag);
			    													   		 Employee em = new Employee();
			    															 mp.put("Employee2", em);
			    															 
			    															
			    												  			List <Simple> branchCode=dao10.getBranchCode();
			    															System.out.println("Branch_Code=getbranch");
			    															List<String> branchCodeList=new ArrayList<>();
			    															branchCodeList.add("200-Corporate");
			    															for(Simple s:branchCode)
			    															{
			    																String s3=s.getS1()+"-"+s.getS2();
			    																branchCodeList.add(s3);
			    																System.out.println(s3);  
			    																 
			    															}
			    															
			    															mp.put("BranchCodeList", branchCodeList);
			    												  			//getScheme_List	
			    															
			    															
			    															
			    												   			
			    												   		return  "Employee_Report";
			    												   	}
			    												  	 
			    												  	 
			    												  	 
			    												  	 //Add_Emp_Attachment
			    												  	  @RequestMapping(value="/saveEmployee_Master",  params = "Add_Emp_Attachment",method = RequestMethod.POST)  
			    												      public ModelAndView Add_Emp_Attachment(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request,RedirectAttributes attributes)throws Exception
			    												  	  {

			    												     
			    													session = request.getSession();
			    													String user = (String) session.getAttribute("user");
			    													if (user == null)
			    														return new ModelAndView("Session");

			    													int DBCode = (int) session.getAttribute("Branch");
			    													String empid=em.getEmp_Id();
			    													
			    													int empc=Integer.parseInt(dao10.Get_ScalarFun("select nvl(count(*),'0') from employee_master where empid='"+em.getEmp_Id()+"'",201));
			    													System.out.println("empc:"+empc);
			    													
			    													String c1=dao10.Get_ScalarFun("select nvl(count(*),'0') from EMP_ATTACHEMENTS where emp_id='"+em.getEmp_Id()+"'",201);
			    													int cnt=Integer.parseInt(c1)+1;
			    													CommonsMultipartFile SignData=em.getSignData();
			    												       System.out.println(SignData.getOriginalFilename());
			    												 String EmpName=em.getEmp_Name();
			    												 String Status=EmpName;
			    												if(SignData != null)
			    												     	{
							    																		    													String Particulars="";
							    													if(Status.equalsIgnoreCase("R"))
						    										  				{
						    										  					Particulars="Remarks :"+em.getRemarks()+",Date :"+em.getResign_Date();
						    										  				
				
						    										  				}
						    										  				else if(Status.equalsIgnoreCase("S"))
						    										  					{
						    										  					Particulars="Remarks :"+em.getRemarks()+",Date :"+em.getSus_From_Date()+ " to "+em.getSus_To_Date();
						    										  					
						    										  					}
						    										  				
						    										  				else if(Status.equalsIgnoreCase("M"))
						    										  				{
						    										  					Particulars="Remarks :"+em.getRemarks()+",Date :"+em.getMaternity_From_Date()+ " to "+em.getMaternity_To_Date();
						    										  					
						    										  				}
						    										  				else if(Status.equalsIgnoreCase("A"))
						    										  				{
						    										  					Particulars="Joining Documents : "+em.getJoining_Date();
						    										  					
						    										  				}
						    										  				
							    													      
			    												     		try
			    												     		{
			    												     			String fileName1 =em.getEmp_Id()+"_"+Status+"_"+cnt+"-"+SignData.getOriginalFilename();
			   			    												 File imageFile1 = new File(File_Path2, fileName1);

			    												     			SignData.transferTo(imageFile1);
			    												     			
                                                                              dao20.UpdateDATA("insert into EMP_ATTACHEMENTS(EMP_ID,EMP_NAME,FILE_NAME,TYPE,CREATED_BY,Status,Particulars) values('"+em.getEmp_Id()+"','"+em.getEmp_Name()+"','"+fileName1+"','Attachments"+cnt+"','"+user+"','"+Status+"','"+Particulars+"')", 201);
			    												     		} catch (IOException e)
			    												     		{
			    												     			e.printStackTrace();
			    												     		}
			    												     	}
			    														
			    												
			    											
			    												  
			    												  List<SimpleBranch> list8 = empDao.getEMP_Attachement(empid);

			    													mp.put("list8", list8);
			    												  
			    												  
			    													 mp.put("Employee2", em);
			    													 
			    													 System.out.println(em.getUser_name());

			    														List<SimpleBranch> Emp_Att_List=new ArrayList<>();
			    													
			    														if(session!=null)
			    														{
			    														
			    															Emp_Att_List = (List<SimpleBranch>)session.getAttribute("Emp_Att_List");
			    																		
			    														}
			    												 session.setAttribute("DL_MasterAcc_list", list8);
			    												 mp.addAttribute("DL_MasterAcc_list", list8);
			    												//---------------------------------------------------------------------------------------
			    												 if(empc==0)
			    													{
			    														em.setEmpmasterflag(2);
			    														 String btn_update="display:none";
				    													 
				    													 mp.put("UpdateDisplay", btn_update);
				    													 
				    													 mp.put("empmasterflag", 2);
				    													 
				    													 mp.put("cvView", "display:none");
				    														mp.put("joinView", "display:none");
			    													}
			    												 else
			    												 {
			    													///editEmployeeMaster/{Emp_Id}
			    										  				//attributes.addFlashAttribute("message", "Record deleted !");
			    										  				if(em.getStatus().equalsIgnoreCase("R"))
			    										  				{
			    										  					//empDao.Update_Resigned_Details(em.getResign_Date(),em.getEmp_Id());
			    												       		String sql="Update employee_master set Resigned_Date='"+em.getResign_Date()+"', status='R' ,remarks='"+em.getRemarks()+"' where empid='"+em.getEmp_Id()+"'";
			    												       		dao20.UpdateDATA(sql,201);

			    										  				}
			    										  				else if(em.getStatus().equalsIgnoreCase("S"))
			    										  					{
			    										  						//empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),em.getEmp_Id());
			    													       		String sql="Update employee_master set Suspended_From='"+em.getSus_From_Date()+"',Suspended_To='"+em.getSus_To_Date()+"' , status='S' , remarks='"+em.getRemarks()+"' where empid='"+empid+"'";
			    													       		dao20.UpdateDATA(sql,201);
			    										  					}
			    										  				
			    										  				else if(em.getStatus().equalsIgnoreCase("M"))
			    										  				{
			    										  					//empDao.Update_Suspended_Details(em.getSus_From_Date(),em.getSus_To_Date(),Emp_Id);
			    										  				       dao20.UpdateDATA("update employee_master set Maternity_From='"+em.getMaternity_From_Date()+"',Maternity_To='"+em.getMaternity_To_Date()+"' , status='M' , remarks='"+em.getRemarks()+"' where EMPID='"+em.getEmp_Id()+"'",201);

			    										  					
			    										  				}
			    								    					empDao.InsertMis_PermissionType(em.getUser_name(), em.getMuli_branch(), em.getSubakalyan(),em.getTransaction_Edit(), em.getCorpTransaction(),em.getUser_Level(),em.getAccess_Level(),em.getStatus(),em.getLogin_type(),em.getCorp_Login(),em.getMobile_number(),em.getBranch_Type());

			    								    					// int a = empDao.updateEmployee_Master(Emp_Id, Emp_Name, Gender, Dob, Father_Name, Marital_Status, Email_id, Mobile_number, Address, Edu_qualifi, User_name, Access_Level, Login_type, Status, Designation, User_Level, Muli_branch, Subakalyan,  Transaction_Edit,Btype,user,Current,em.getCategory(),em.getMaternity_From_Date(),em.getMaternity_To_Date(),em.getRemarks());
			    								    				       dao20.UpdateDATA("update employee_master set lock_status='N',Super_Admin='"+em.getSuper_Admin()+"',Last_Name='"+em.getLast_Name()+"',Corp_Login='"+em.getCorp_Login()+"',Promotion_Date='"+em.getPromotion_Date()+"',Promotion_Details='"+em.getPromotion_Details()+"',WORKING_STATUS='"+em.getWorking_Status()+"',WORKING_DETAILS='"+em.getWorking_Details()+"' where EMPID='"+em.getEmp_Id()+"'",201);
			    								    			  

			    													 return new ModelAndView("redirect:/editEmployeeMaster/"+em.getEmp_Id()); 
			    												 }
			    												
			    													System.out.println("bm.getEmpmasterflag()="+em.getEmpmasterflag());
			    											
			    													//---------filling Pages-----------------------------------------------------------------------------
			    													       
			    													         
			    													         session=request.getSession();
			    															  session.setAttribute("Employee2",em);
			    															    session.setAttribute("Emp_Info",em);
			    														       
			    														     	mp.addAttribute("Emp_Info",em);
			    														     
			    													 
			    													 
			    													 List <Simple> branchCode=dao10.getBranchCode();
			    														System.out.println("Branch_Code=getbranch");
			    														List<String> branchCodeList=new ArrayList<>();
			    														for(Simple s:branchCode)
			    														{
			    															String s3=s.getS1()+"-"+s.getS2();
			    															branchCodeList.add(s3);
			    															System.out.println(s3);  
			    															 
			    														}
			    														mp.put("BranchCodeList", branchCodeList);
			    														
			    														
			    														List<Simple> list=empDao.getSimple(201);
			    														List<String> desList=new ArrayList<>();
			    														for(Simple s1:list)
			    														{
			    															String s3=s1.getS2();
			    															desList.add(s3);
			    															System.out.println(s3);  
			    															 
			    														}
			    														mp.put("DesignationList", desList);
			    													
			    														List<Simple> list2=empDao.getCategory(201);
			    														List<String> desList2=new ArrayList<>();
			    														for(Simple s1:list2)
			    														{
			    															String s3=s1.getS2();
			    															desList2.add(s3);
			    															System.out.println(s3);  
			    															 
			    														}
			    														mp.put("Category", desList2);
		    														
			    														
			    													     
			    														return new ModelAndView("Employee_Master"); 
			    													
			    													}
			    												  	  
			    												  	  
			    												  	  
			    												  	  
			    												  	   @RequestMapping(value = "/deleteEmp_Attachment/{id}", method = RequestMethod.GET, produces = "application/pdf")
			    													    public ModelAndView deleteDL_Attachment(@PathVariable int id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException, SQLException {
			    														 
			    													    	byte barr[] = null;    
			    													    	session=request.getSession();
			    													    	 int DBCode=(int) session.getAttribute("Branch");
			    													    	 
			    													 			
			    																//String fileName=Customer_Id+"_idproof2.jpg";
			    																 String fileName=empDao.getAttachement_FilesName1_Emp(id);
			    																// String FILE_PATH = request.getRealPath(File_Path+fileName);
			    																 String FILE_PATH = File_Path2+fileName;
			    																 System.out.println(FILE_PATH);
			    														        File file = new File(FILE_PATH);
			    														        file.delete();
			    														       //-------------------------------------------------------
			    														        Employee jm=new Employee();
			    															       jm= (Employee) session.getAttribute("Emp_Info");	      
			    															       empDao.Delete_Emp_Attachment1_Emp(fileName,jm.getEmp_Id(),DBCode);
			    															      
			    															       
			    															       List<SimpleBranch> list8 = empDao.getEMP_Attachement(jm.getEmp_Id());
			    																	mp.put("list8", list8);
			    												//---------Filling Pages----------------------------------------------------------------------------
			    																// Date loading on Page
			    																
			    																	  session.setAttribute("Employee2",jm);
					    															  
					    															  session.setAttribute("Emp_Info",jm);
					    														       
					    														     	mp.addAttribute("Emp_Info",jm);
					    														    	mp.addAttribute("Employee2",jm);
			    																	
			    															 session.setAttribute("Emp_Att_List", list8);
			    															 mp.addAttribute("Emp_Att_List", list8);
			    															//---------------------------------------------------------------------------------------

			    																	  //---------filling Pages-----------------------------------------------------------------------------
			    															 //---------filling Pages-----------------------------------------------------------------------------
			    													     
			    													         
			    																int empc=Integer.parseInt(dao10.Get_ScalarFun("select nvl(count(*),'0') from employee_master where empid='"+jm.getEmp_Id()+"'",201));
			   			    												 if(empc==0)
			   			    													{
			   			    														jm.setEmpmasterflag(2);
			   			    													}
			   			    												 else
			   			    												 {
			   			    													return new ModelAndView("redirect:/editEmployeeMaster/"+jm.getEmp_Id());  
			   			    												 }
			   			    												
			    															
			    														     
			    														     	 
						    													 List <Simple> branchCode=dao10.getBranchCode();
						    														System.out.println("Branch_Code=getbranch");
						    														List<String> branchCodeList=new ArrayList<>();
						    														for(Simple s:branchCode)
						    														{
						    															String s3=s.getS1()+"-"+s.getS2();
						    															branchCodeList.add(s3);
						    															System.out.println(s3);  
						    															 
						    														}
						    														mp.put("BranchCodeList", branchCodeList);
						    														
						    														
						    														List<Simple> list=empDao.getSimple(201);
						    														List<String> desList=new ArrayList<>();
						    														for(Simple s1:list)
						    														{
						    															String s3=s1.getS2();
						    															desList.add(s3);
						    															System.out.println(s3);  
						    															 
						    														}
						    														mp.put("DesignationList", desList);
						    													
						    														List<Simple> list2=empDao.getCategory(201);
						    														List<String> desList2=new ArrayList<>();
						    														for(Simple s1:list2)
						    														{
						    															String s3=s1.getS2();
						    															desList2.add(s3);
						    															System.out.println(s3);  
						    															 
						    														}
						    														mp.put("Category", desList2);
						    														
								    													if(empc==0)
								    													{
								    														jm.setEmpmasterflag(2);
								    													}
								    													else
								    														jm.setEmpmasterflag(3);
					    														        
						    															System.out.println("bm.getEmpmasterflag()="+jm.getEmpmasterflag());
						    														if(jm.getEmpmasterflag()==2)
						    														{
						    													 String btn_update="display:none";
						    													 
						    													 mp.put("UpdateDisplay", btn_update);
						    													 
						    													 mp.put("empmasterflag", 2);
						    													 
						    													 mp.put("cvView", "display:none");
						    														mp.put("joinView", "display:none");
						    														}
			    														     
			    															return new ModelAndView("Employee_Master"); 
			    														 
			    																	     

			    													    }

			    												  	  @RequestMapping(value = "/downloadAttachmentDyn_Emp/{id}", method = RequestMethod.GET, produces = "application/pdf")
			    													    public @ResponseBody void downloadAttachmentDyn_Emp(@PathVariable int id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException {
			    														 
			    													    	byte barr[] = null;    
			    													    	session=request.getSession();
			    													    	 int DBCode=(int) session.getAttribute("Branch");
			    													    	 
			    													    	//--Set Connection------------------------------------
			    																int j=DBCode;
			    																this.template=con.getCon2(j);
			    													//-----------------------------------------------------
			    																
			    																//String fileName=Customer_Id+"_idproof2.jpg";
			    																 String fileName=empDao.getAttachement_FilesName1_Emp(id);
			    																// String FILE_PATH = request.getRealPath(File_Path+fileName);
			    																
			    																 if(!fileName.equalsIgnoreCase(null) && !fileName.isEmpty())
			    																 { String FILE_PATH = File_Path2+fileName;
			    														     
			    																 File file = new File(FILE_PATH);
			    														        InputStream in = new FileInputStream(file);

			    														        response.setContentType("application/pdf");
			    														        response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
			    														        response.setHeader("Content-Length", String.valueOf(file.length()));
			    														        FileCopyUtils.copy(in, response.getOutputStream()); 
			    													   
			    																 }
			    													    	
			    													      
			    													    }
			    												  	  
			    												  	  
			    												  	  
			    												  	  
			    												  	 @RequestMapping("/find_superadmin.htm")
						    							    			@ResponseBody
						    							    	 		 public String find_superadmin(@RequestParam String User_name,HttpServletRequest request, HttpServletResponse response,@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpSession session,Model m)throws Exception
						    							    	  		{
						    							    	  		 
						    							    	    
						    							    	  		 String user_name=User_name;
						    							    	     		 
						    							    	     		 session=request.getSession();
						    							    	   			String user=(String) session.getAttribute("user");
						    							    	   			if(user==null)
						    							    	   				 return ("Session");  
						    							    	      	//-----------------------------------------------------GetPermission-------------------------------------

						    							    	   		session=request.getSession();
						    							    	   		String superadmin=dao10.Get_ScalarFun("select super_Admin from employee_master where user_name='"+user+"'", 201);
						    							    	   	System.out.println("user_name-------------------------"+user_name);

						    							    	          String res = ""+superadmin;
						    							    	  		   
						    							    	  		
						    							    	  		  return res;
						    							    	  		 }
			    												  	 
			    												  	 
			    												  	  
			    					 				    	  		  @RequestMapping("/find_EmpId.htm")
			    					 				     			@ResponseBody
			    					 				     	 		 public String find_EmpId(HttpServletRequest request, HttpServletResponse response,@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpSession session,Model m)throws Exception
			    					 				     	  		{
			    					 				     	  		 
			    					 				     	    
			    					 				     	  		
			    					 				     	     		 
			    					 				     	     		 session=request.getSession();
			    					 				     	   			String user=(String) session.getAttribute("user");
			    					 				     	   			if(user==null)
			    					 				     	   				 return ("Session");  
			    					 				     	      	//-----------------------------------------------------GetPermission-------------------------------------

			    					 				     	   		session=request.getSession();
			    					 				     	   	  String cat = request.getParameter("cat");
			    					 				     		String emp_id="SNNL";
			    					 				     	   	 emp_id=dao10.Get_ScalarFun("select GET_EmpCode2('"+cat+"') from dual", 201);
			    					 							    String res = ""+emp_id;
			    					 				     	  		   
			    					 				     	  		
			    					 				     	  		  return res;
			    					 				     	  		 }
			    					 				    	  		  
			    					 				    	  		 @RequestMapping(value = "/SearchEmployee_List",params = "All",method=RequestMethod.POST)
				    					 				    	 		public String searchEmployeeMaster_All(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

				    					 				    	    	
				    					 				    	   	    session=request.getSession();
				    					 				    			String user=(String) session.getAttribute("user");
				    					 				    			if(user==null)
				    					 				    				 return ("Session"); 
				    					 				    			
				    					 				    			 int DBCode=(int) session.getAttribute("Branch");
				    					 				    			 
				    					 				    			 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
				    					 				    		    	
				    					 				    		    	
				    					 				    		    	
				    					 				    		    	Date Current_Date=(Date) session.getAttribute("Current_Date");
				    					 				    		    	String Current=sd.format(Current_Date);

				    					 				    		    	
				    					 				    		    	/*String[] per1=perdao.GetPermission(user, "MS");
				    					 				    				
				    					 				    				 String View=null;
				    					 				    				 String Save=null;
				    					 				    				 String Update=null;
				    					 				    				 String Delete=null;
				    					 				    				 String Verify2=null;
				    					 				    				 String Verify3=null;
				    					 				    				 String Verify4=null;
				    					 				    				 String Verify5=null;
				    					 				    				 String Reports1=null;
				    					 				    				 String Button=null;
				    					 				    				 String Finger_Print=null;
				    					 				    						
				    					 				    				 
				    					 				    				 
				    					 				    				 View=per1[0];
				    					 				    				 Save=per1[1];
				    					 				    				 Update=per1[2];
				    					 				    				 Delete=per1[3];
				    					 				    				 Verify2=per1[4];
				    					 				    				 Verify3=per1[5];
				    					 				    				 Verify4=per1[6];
				    					 				    				 Verify5=per1[7];
				    					 				    				 Reports1=per1[8];
				    					 				    				 Button=per1[9];
				    					 				    				 Finger_Print=per1[10];
				    					 				    				
				    					 				    				 int btn_Delete=1;
				    					 				    				 int btn_Save=1;
				    					 				    				 int btn_Update=1;
				    					 				    				 
				    					 				    				 System.out.println("View-------------------------"+View);
				    					 				    				 System.out.println("Save-------------------------"+Save);
				    					 				    				 System.out.println("Update-------------------------"+Update);
				    					 				    				 System.out.println("Delete-------------------------"+Delete);
				    					 				    				 System.out.println("Verify2-------------------------"+Verify2);
				    					 				    				 System.out.println("Verify3-------------------------"+Verify3);
				    					 				    				 System.out.println("Verify4-------------------------"+Verify4);
				    					 				    				 System.out.println("Verify5-------------------------"+Verify5);
				    					 				    				 System.out.println("Reports1-------------------------"+Reports1);
				    					 				    				 System.out.println("Button-------------------------"+Button);
				    					 				    				 System.out.println("Finger_Print-------------------------"+Finger_Print);
				    					 				    				 
				    					 				    				 if (View.equalsIgnoreCase("N"))
				    					 				    						return "/Authorization";

				    					 				    				
				    					 				    				 if (Delete.equalsIgnoreCase("N"))	
				    					 				    					 btn_Delete = 2;
				    					 				    				 
				    					 				    				 if (Save.equalsIgnoreCase("N"))	
				    					 				    					 btn_Save = 2;
				    					 				    				 
				    					 				    				 if (Update.equalsIgnoreCase("N"))	
				    					 				    					 btn_Update = 2;
				    					 				    				
				    					 				    				 System.out.println("btn_Verify-------------"+btn_Delete);
				    					 				    				  String DeleteFlag=null;
				    					 				    				  String updateFlag=null;
				    					 				    				  String saveFlag=null;
				    					 				    				 if(btn_Delete==2)
				    					 				    				    {
				    					 				    					 DeleteFlag="Display:none;";
				    					 				    					 System.out.println("1111111111111111111111");
				    					 				    				    }
				    					 				    				 mp.put("deletDisplay", DeleteFlag);
				    					 				    				 
				    					 				    				 if(btn_Update==2)
				    					 				    				    {
				    					 				    					 updateFlag="Display:none;";
				    					 				    					 System.out.println("1111111111111111111111");
				    					 				    				    }
				    					 				    				 if(btn_Save==2)
				    					 				    				    {
				    					 				    					 saveFlag="Display:none;";
				    					 				    					 System.out.println("1111111111111111111111");
				    					 				    				    }
				    					 				    				mp.put("UpdateDisplay", updateFlag);
				    					 				    				
				    					 				    				*/
				    					 				    		    	
				    					 				    		   

				    					 				    				 mp.put("Employee2", em);
				    					 				    				 
				    					 				    				 String Emp_Id=em.getEmp_Id();
				    					 				    				  List<SimpleBranch> list=empDao.searchEmployee_List(Emp_Id, 201);
				    					 				    			    
				    					 				    				String Type="Active";
				    					 				    				 Type=  em.getCurrent_Status();
				    					 				    				  if(Type.equalsIgnoreCase("600"))
					    					 				    				{
					    					 				    					 System.out.println("1111111111111111111111");
					    					 				    					list=empDao.searchEmployee_List(Emp_Id, 201);
					    					 				    				}
				    					 				    				 else if(Type.equalsIgnoreCase("Active"))
				    					 				    				{
				    					 				    					 System.out.println("1111111111111111111111");
				    					 				    					list=empDao.searchEmployee_List_Active(Emp_Id,em.getRemarks(), 201);
				    					 				    				}//Inactive
				    					 				    				else if(Type.equalsIgnoreCase("Inactive"))
				    					 				    				{
				    					 				    					list=empDao.searchEmployee_List_InActive(Emp_Id,em.getRemarks(), 201);
				    					 				    					
				    					 				    					 System.out.println("1111111111111111111111");
				    					 				    				}
				    					 				    				
				    					 				    				// mp.put("SaveDisplay", saveFlag);
				    					 				    				 
				    					 				    				
				    					 				    				//list=empDao.searchEmployee_List_Active(Emp_Id,em.getRemarks(), 201);
				    					 				    			    	
				    					 				    				 System.out.println("size-----------------------"+list.size());
				    					 				    			    	if(list.size()!=0)
				    					 				    			    	{
				    					 				    			    		mp.put("NoOfRecords", list.size());
				    					 				    			    		System.out.println("size22222222-----------------------"+list.size());
				    					 				    			    	}
				    					 				    			    	else
				    					 				    			    	{
				    					 				    			    		mp.put("NoOfRecords", 0);
				    					 				    			    		
				    					 				    			    	}
				    					 				    			    	
				    					 				    			 		model.put("list",list);
				    					 				    			 		
				    					 				    			 		
				    					 				    			 		int page=1;
				    					 				    					
				    					 				    					
				    					 				    			 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
				    					 				    			        pagedListHolder.setPageSize(10);
				    					 				    			        mp.put("maxPages", pagedListHolder.getPageCount());
				    					 				    			        int n= pagedListHolder.getPageCount();
				    					 				    			        
				    					 				    			        if(page <= pagedListHolder.getPageCount()) {
				    					 				    			            pagedListHolder.setPage(page-1);
				    					 				    			            mp.put("list", pagedListHolder.getPageList());
				    					 				    			        }
				    					 				    					 
				    					 				    			        int minPages=1;
				    					 				    			 		int maxPages=n;
				    					 				    			 		
				    					 				    			 		
				    					 				    			 		
				    					 				    			 		minPages=page/10;
				    					 				    			 		if(minPages==0)
				    					 				    			 		{
				    					 				    			 			minPages=1;
				    					 				    			 			int i=minPages+20;
				    					 				    			 			if(i>n)
				    					 				    			 			maxPages=n;
				    					 				    			 			else
				    					 				    			 				maxPages=i;
				    					 				    			 		}
				    					 				    			 		else
				    					 				    			 		{
				    					 				    			 			minPages=minPages*10;
				    					 				    			 			int i=minPages+20;
				    					 				    			 			if(i>n)
				    					 				    			 			maxPages=n;
				    					 				    			 			else
				    					 				    			 				maxPages=i;
				    					 				    			 		}
				    					 				    			        System.out.println("NoOfPages="+n);
				    					 				    			        
				    					 				    			        mp.put("minPages",minPages);
				    					 				    			        mp.put("maxPages",maxPages);
				    					 				    					
				    					 				    					mp.put("page", page);
				    					 				    					
				    					 				    					int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from employee_master where status is not null", 201);
				    					 				    					//	int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y'", 201);
				    					 				    						int getActive =dao20.Get_ScalarINT("select count(*) from employee_master where status in ('A','M')", 201);
				    					 				    						//int getBranchOnly =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')", 201);
				    					 				    						int getBranchOnly =dao20.Get_ScalarINT("select count(*) from employee_master where user_name in (select username from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')) and Access_level ='B'", 201);

				    					 				    						
				    					 				    						int getBranchandCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username  in (select username from logindetails WHERE value !='B')", 201);

				    					 				    						
				    					 				    						int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B' and username  not in (select username from login_details WHERE enable='Y')", 201);
				    					 				    						
				    					 				    						mp.put("OverAll", getOverall);
				    					 				    						mp.put("ActiveAll", getActive);
				    					 				    						mp.put("Active", getBranchOnly);
				    					 				    						mp.put("Corporate", getActive-getBranchOnly);				
				    					 				    				
				    					 				    					//Search Info
					    														 session.removeAttribute("Search_EmpInfo");
					    														 
					    													 session.setAttribute("Search_EmpInfo",em);
					    												            	mp.addAttribute("Search_EmpInfo",em);
					    												            	
					    												          Employee em1= ( Employee)	session.getAttribute("Search_EmpInfo");
	System.out.println("from session: "+em.getEmp_Id());

				    					 				    				 return "Employee_List";  
				    					 				    	    }
			    					 				    	  		 
			    					 				    	  		 
			    					 				    	  		 @RequestMapping(value = "/SearchEmployee_List",params = "Active",method=RequestMethod.POST)
			    					 				    	 		public String searchEmployeeMaster(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

			    					 				    	    	
			    					 				    	   	    session=request.getSession();
			    					 				    			String user=(String) session.getAttribute("user");
			    					 				    			if(user==null)
			    					 				    				 return ("Session"); 
			    					 				    			
			    					 				    			 int DBCode=(int) session.getAttribute("Branch");
			    					 				    			 
			    					 				    			 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
			    					 				    		    	
			    					 				    		    	
			    					 				    		    	
			    					 				    		    	Date Current_Date=(Date) session.getAttribute("Current_Date");
			    					 				    		    	String Current=sd.format(Current_Date);

			    					 				    		    	
			    					 				    		    	/*String[] per1=perdao.GetPermission(user, "MS");
			    					 				    				
			    					 				    				 String View=null;
			    					 				    				 String Save=null;
			    					 				    				 String Update=null;
			    					 				    				 String Delete=null;
			    					 				    				 String Verify2=null;
			    					 				    				 String Verify3=null;
			    					 				    				 String Verify4=null;
			    					 				    				 String Verify5=null;
			    					 				    				 String Reports1=null;
			    					 				    				 String Button=null;
			    					 				    				 String Finger_Print=null;
			    					 				    						
			    					 				    				 
			    					 				    				 
			    					 				    				 View=per1[0];
			    					 				    				 Save=per1[1];
			    					 				    				 Update=per1[2];
			    					 				    				 Delete=per1[3];
			    					 				    				 Verify2=per1[4];
			    					 				    				 Verify3=per1[5];
			    					 				    				 Verify4=per1[6];
			    					 				    				 Verify5=per1[7];
			    					 				    				 Reports1=per1[8];
			    					 				    				 Button=per1[9];
			    					 				    				 Finger_Print=per1[10];
			    					 				    				
			    					 				    				 int btn_Delete=1;
			    					 				    				 int btn_Save=1;
			    					 				    				 int btn_Update=1;
			    					 				    				 
			    					 				    				 System.out.println("View-------------------------"+View);
			    					 				    				 System.out.println("Save-------------------------"+Save);
			    					 				    				 System.out.println("Update-------------------------"+Update);
			    					 				    				 System.out.println("Delete-------------------------"+Delete);
			    					 				    				 System.out.println("Verify2-------------------------"+Verify2);
			    					 				    				 System.out.println("Verify3-------------------------"+Verify3);
			    					 				    				 System.out.println("Verify4-------------------------"+Verify4);
			    					 				    				 System.out.println("Verify5-------------------------"+Verify5);
			    					 				    				 System.out.println("Reports1-------------------------"+Reports1);
			    					 				    				 System.out.println("Button-------------------------"+Button);
			    					 				    				 System.out.println("Finger_Print-------------------------"+Finger_Print);
			    					 				    				 
			    					 				    				 if (View.equalsIgnoreCase("N"))
			    					 				    						return "/Authorization";

			    					 				    				
			    					 				    				 if (Delete.equalsIgnoreCase("N"))	
			    					 				    					 btn_Delete = 2;
			    					 				    				 
			    					 				    				 if (Save.equalsIgnoreCase("N"))	
			    					 				    					 btn_Save = 2;
			    					 				    				 
			    					 				    				 if (Update.equalsIgnoreCase("N"))	
			    					 				    					 btn_Update = 2;
			    					 				    				
			    					 				    				 System.out.println("btn_Verify-------------"+btn_Delete);
			    					 				    				  String DeleteFlag=null;
			    					 				    				  String updateFlag=null;
			    					 				    				  String saveFlag=null;
			    					 				    				 if(btn_Delete==2)
			    					 				    				    {
			    					 				    					 DeleteFlag="Display:none;";
			    					 				    					 System.out.println("1111111111111111111111");
			    					 				    				    }
			    					 				    				 mp.put("deletDisplay", DeleteFlag);
			    					 				    				 
			    					 				    				 if(btn_Update==2)
			    					 				    				    {
			    					 				    					 updateFlag="Display:none;";
			    					 				    					 System.out.println("1111111111111111111111");
			    					 				    				    }
			    					 				    				 if(btn_Save==2)
			    					 				    				    {
			    					 				    					 saveFlag="Display:none;";
			    					 				    					 System.out.println("1111111111111111111111");
			    					 				    				    }
			    					 				    				mp.put("UpdateDisplay", updateFlag);
			    					 				    				
			    					 				    				*/
			    					 				    		    	
			    					 				    		   

			    					 				    				 mp.put("Employee2", em);
			    					 				    				
			    					 				    				  
			    					 				    				
			    					 				    				// mp.put("SaveDisplay", saveFlag);
			    					 				    				 
			    					 				    				 String Emp_Id=em.getEmp_Id();
			    					 				    				 
			    					 				    				 List<SimpleBranch> list=empDao.searchEmployee_List_Active(Emp_Id,em.getRemarks(), 201);
			    					 				    			    	
			    					 				    				 System.out.println("size-----------------------"+list.size());
			    					 				    			    	if(list.size()!=0)
			    					 				    			    	{
			    					 				    			    		mp.put("NoOfRecords", list.size());
			    					 				    			    		System.out.println("size22222222-----------------------"+list.size());
			    					 				    			    	}
			    					 				    			    	else
			    					 				    			    	{
			    					 				    			    		mp.put("NoOfRecords", 0);
			    					 				    			    		System.out.println("size1111111111-----------------------");
			    					 				    			    	}
			    					 				    			    	
			    					 				    			 		model.put("list",list);
			    					 				    			 		
			    					 				    			 		
			    					 				    			 		int page=1;
			    					 				    					
			    					 				    					
			    					 				    			 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
			    					 				    			        pagedListHolder.setPageSize(10);
			    					 				    			        mp.put("maxPages", pagedListHolder.getPageCount());
			    					 				    			        int n= pagedListHolder.getPageCount();
			    					 				    			        
			    					 				    			        if(page <= pagedListHolder.getPageCount()) {
			    					 				    			            pagedListHolder.setPage(page-1);
			    					 				    			            mp.put("list", pagedListHolder.getPageList());
			    					 				    			        }
			    					 				    					 
			    					 				    			        int minPages=1;
			    					 				    			 		int maxPages=n;
			    					 				    			 		
			    					 				    			 		
			    					 				    			 		
			    					 				    			 		minPages=page/10;
			    					 				    			 		if(minPages==0)
			    					 				    			 		{
			    					 				    			 			minPages=1;
			    					 				    			 			int i=minPages+20;
			    					 				    			 			if(i>n)
			    					 				    			 			maxPages=n;
			    					 				    			 			else
			    					 				    			 				maxPages=i;
			    					 				    			 		}
			    					 				    			 		else
			    					 				    			 		{
			    					 				    			 			minPages=minPages*10;
			    					 				    			 			int i=minPages+20;
			    					 				    			 			if(i>n)
			    					 				    			 			maxPages=n;
			    					 				    			 			else
			    					 				    			 				maxPages=i;
			    					 				    			 		}
			    					 				    			        System.out.println("NoOfPages="+n);
			    					 				    			        
			    					 				    			        mp.put("minPages",minPages);
			    					 				    			        mp.put("maxPages",maxPages);
			    					 				    					
			    					 				    					mp.put("page", page);
			    					 				    					
			    					 				    					int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from employee_master where status is not null", 201);
			    					 				    					//	int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y'", 201);
			    					 				    						int getActive =dao20.Get_ScalarINT("select count(*) from employee_master where status='A'", 201);
			    					 				    						//int getBranchOnly =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')", 201);
			    					 				    						int getBranchOnly =dao20.Get_ScalarINT("select count(*) from employee_master where user_name in (select username from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')) and Access_level ='B'", 201);

			    					 				    						
			    					 				    						int getBranchandCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username  in (select username from logindetails WHERE value !='B')", 201);

			    					 				    						
			    					 				    						int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B' and username  not in (select username from login_details WHERE enable='Y')", 201);
			    					 				    						
			    					 				    						mp.put("OverAll", getOverall);
			    					 				    						mp.put("ActiveAll", getActive);
			    					 				    						mp.put("Active", getBranchOnly);
			    					 				    						mp.put("Corporate", getActive-getBranchOnly);
			    					 				    					
			    					 				    				
			    					 				    					//Search Info
				    														 session.removeAttribute("Search_EmpInfo");
				    														 
				    													 session.setAttribute("Search_EmpInfo",em);
				    												            	mp.addAttribute("Search_EmpInfo",em);
				    												            	
				    												          Employee em1= ( Employee)	session.getAttribute("Search_EmpInfo");
System.out.println("from session: "+em.getEmp_Id());

			    					 				    				 return "Employee_List";  
			    					 				    	    }
			    					 				    	  		 
			    					 				    	  		 
			    					 				    	  		 
			    												     @RequestMapping("/App_Member_List")
			    													 public ModelAndView App_Member_List(Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception
			    													{  
			    												   	///Session-------------------------------------------------------------
			    														 session=request.getSession();
			    															String user=(String) session.getAttribute("user");
			    															if(user==null)
			    																 return new ModelAndView("Session");  
			    												   	//-----------------------------------------------------GetPermission-------------------------------------

			    														session=request.getSession();
			    														
			    														String[] per1=perdao.GetPermission(user, "HR");
			    														
			    														 String View=null;
			    														 String Save=null;
			    														 String Update=null;
			    														 String Delete=null;
			    														 String Verify2=null;
			    														 String Verify3=null;
			    														 String Verify4=null;
			    														 String Verify5=null;
			    														 String Reports1=null;
			    														 String Button=null;
			    														 String Finger_Print=null;
			    																
			    														 
			    														 
			    														 View=per1[0];
			    														 Save=per1[1];
			    														 Update=per1[2];
			    														 Delete=per1[3];
			    														 Verify2=per1[4];
			    														 Verify3=per1[5];
			    														 Verify4=per1[6];
			    														 Verify5=per1[7];
			    														 Reports1=per1[8];
			    														 Button=per1[9];
			    														 Finger_Print=per1[10];
			    														
			    														 int btn_Delete=1;
			    														 int btn_Save=1;
			    														 int btn_Update=1;
			    														 
			    														 System.out.println("View-------------------------"+View);
			    														 System.out.println("Save-------------------------"+Save);
			    														 System.out.println("Update-------------------------"+Update);
			    														 System.out.println("Delete-------------------------"+Delete);
			    														 System.out.println("Verify2-------------------------"+Verify2);
			    														 System.out.println("Verify3-------------------------"+Verify3);
			    														 System.out.println("Verify4-------------------------"+Verify4);
			    														 System.out.println("Verify5-------------------------"+Verify5);
			    														 System.out.println("Reports1-------------------------"+Reports1);
			    														 System.out.println("Button-------------------------"+Button);
			    														 System.out.println("Finger_Print-------------------------"+Finger_Print);
			    														 
			    														 //if (View.equalsIgnoreCase("N"))
			    															//	return new ModelAndView("/Authorization");

			    														 String temp =  dao10.Get_ScalarFun("Select SUPER_ADMIN  from employee_Master where user_name='"+user+"'",201);
			    										    		       if (!temp.equalsIgnoreCase("Y"))
			    										   						return new ModelAndView("/Authorization");
			    									  					//17-03-2023-----------------------------------
			    										    		       
			    														 if (Delete.equalsIgnoreCase("N"))	
			    															 btn_Delete = 2;
			    														 
			    														 if (Save.equalsIgnoreCase("N"))	
			    															 btn_Save = 2;
			    														 
			    														 if (Update.equalsIgnoreCase("N"))	
			    															 btn_Update = 2;
			    														
			    														 System.out.println("btn_Verify-------------"+btn_Delete);
			    														  String DeleteFlag=null;
			    														  String SaveFlag=null;
			    														 if(btn_Delete==2)
			    														    {
			    															 DeleteFlag="Display:none;";
			    															 System.out.println("1111111111111111111111");
			    														    }
			    														 
			    														 if(btn_Save==2)
			    														    {
			    															 SaveFlag="Display:none;";
			    															 System.out.println("1111111111111111111111");
			    														    }
			    														mp.put("SaveDisplay", SaveFlag);
			    														mp.put("deletDisplay", DeleteFlag);
			    														
			    														 Employee em = new Employee();
			    														 mp.put("Employee2", em);
			    														 mp.addAttribute("Employee2", em);	
			    														 
			    														 String Emp_Id=em.getEmp_Id();
			    														 
			    														 List<SimpleBranch> list=empDao.getApp_Member_List(Emp_Id, 201);
			    													    	
			    														 /*System.out.println("size-----------------------"+list.size());
			    													    	if(list.size()!=0)
			    													    	{
			    													    		mp.put("NoOfRecords", list.size());
			    													    		System.out.println("size22222222-----------------------"+list.size());
			    													    	}
			    													    	else
			    													    	{
			    													    		mp.put("NoOfRecords", 0);
			    													    		System.out.println("size1111111111-----------------------");
			    													    	}
			    													    	*/
			    													 		model.put("list",list);
			    													 		
			    													 		 		
			    													 		int page=1;
			    															
			    															
			    													 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
			    													        pagedListHolder.setPageSize(10);
			    													        mp.put("maxPages", pagedListHolder.getPageCount());
			    													        int n= pagedListHolder.getPageCount();
			    													        
			    													        if(page <= pagedListHolder.getPageCount()) {
			    													            pagedListHolder.setPage(page-1);
			    													            mp.put("list", pagedListHolder.getPageList());
			    													        }
			    															 
			    													        int minPages=1;
			    													 		int maxPages=n;
			    													 		
			    													 		
			    													 		
			    													 		minPages=page/10;
			    													 		if(minPages==0)
			    													 		{
			    													 			minPages=1;
			    													 			int i=minPages+20;
			    													 			if(i>n)
			    													 			maxPages=n;
			    													 			else
			    													 				maxPages=i;
			    													 		}
			    													 		else
			    													 		{
			    													 			minPages=minPages*10;
			    													 			int i=minPages+20;
			    													 			if(i>n)
			    													 			maxPages=n;
			    													 			else
			    													 				maxPages=i;
			    													 		}
			    													        System.out.println("NoOfPages="+n);
			    													        
			    													        mp.put("minPages",minPages);
			    													        mp.put("maxPages",maxPages);
			    															
			    															mp.put("page", page);
			    															
			    															
			    												  			List <Simple> branchCode=dao10.getBranchCode();
			    															System.out.println("Branch_Code=getbranch");
			    															List<String> branchCodeList=new ArrayList<>();
			    															//branchCodeList.add("200-Corporate");
			    															for(Simple s:branchCode)
			    															{
			    																String s3=s.getS1()+"-"+s.getS2();
			    																branchCodeList.add(s3);
			    																System.out.println(s3);  
			    																 
			    															}
			    															
			    															mp.put("BranchCodeList", branchCodeList);
			    															 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

		    																	Date Current_Date=(Date) session.getAttribute("Current_Date");
		    															    	String Current=sd.format(Current_Date);
		    															    	
			    															int todayCount =dao20.Get_ScalarINT("select nvl(count(*),0) from App_registration WHERE status='Y' and Current_date1=to_date('"+Current+"','dd/MM/yyyy')", 201);
			    															mp.put("NoOfRecords", todayCount);
			    															int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from (select distinct customer_id from Customer_View where Customer_Status !='C')a", 201);
			    															int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from App_registration WHERE status='Y'", 201);
			    															//int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B'", 201);
			    															mp.put("OverAll", getOverall);
			    															mp.put("ActiveAll", getActive);
			    															mp.put("Active", getActive);
			    															//mp.put("Corporate", getCorp);
			    													 				
			    												    return new ModelAndView("App_Member_List");  
			    												}  
			    												     
			    												     
			    												     
			    												     
			    													 @RequestMapping(value = "/getApp_Member_Report", params ="Btn_App_Member_Report", method=RequestMethod.POST)
			    													   public void getApp_Member_Report(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
			    													   { 

			    															// JL_Master jl=new JL_Master();

			    														   System.out.println("inside controller-----------------------------------");
			    														   
			    															session = request.getSession();
			    															int DBCode = (int) session.getAttribute("Branch");
			    											                String user=(String) session.getAttribute("user");
			    											                
			    															String Scheme_Code = "600";
			    															List <Simple> branchCode=dao10.getBranchCode();
			    															System.out.println("Branch_Code=getbranch");
			    															List<String> branchCodeList=new ArrayList<>();
			    															for(Simple s:branchCode)
			    															{
			    																String s3=s.getS1()+"-"+s.getS2();
			    																branchCodeList.add(s3);
			    																System.out.println(s3);  
			    																 
			    															}
			    															mp.put("BranchCodeList", branchCodeList);
			    												  				

			    															String Branch_Type=em.getBranch_Type().substring(0, 3);
			    															System.out.println("Branch_Type="+Branch_Type);

			    														    String BName="All Branches";
			    															int Bcode = Integer.parseInt(Branch_Type);
			    															if(em.getBranch_Type().equalsIgnoreCase("300"))
			    															{
			    																Bcode=2;
			    															}
			    															else
			    																BName=em.getBranch_Type().substring(4);
			    																
			    													
			    											//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
			    															//List<SimpleBranch> list1=null;
			    															
			    															//List<SimpleBranch> list3=null;
			    															//List<SimpleBranch> list2=null;
			    															
			    															
			    															List<SimpleBranch> list=null;
			    															  list=empDao.getApp_Member_List(""+201, Bcode);			    																			    				
			    															
			    													
			    															

			    														
			    															// Connecting to the SQL server database
			    																Connection conn = null;

			    																try {

			    																	// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
			    																	// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
			    																	Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			    																	// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

			    																	// Loading Jasper Report File from Local file system

			    																	// String jrxmlFile =
			    																	// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
			    																	// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
			    																	// String jrxmlFile=request.getRealPath("Report1.jrxml");
			    																	// String jrxmlFile =
			    																	// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

			    																	// String jrxmlFile=request.getRealPath("kk1.jrxml");
			    																	String jrxmlFile = request.getRealPath("App_Member_Report.jrxml");
			    																	if(em.getFile_Type().equalsIgnoreCase("2"))
			    															           {
			    																		jrxmlFile = request.getRealPath("App_Member_Report_xl.jrxml");
			    															           }
			    																	InputStream input = new FileInputStream(new File(jrxmlFile));

			    																	// String idDyn="101";
			    																	// int idDyn=Transfer_Acc_No;
			    																	// String StartDate=From_Date;
			    																	// String EndDate=To_Date;
			    																	// Map parameters = new HashMap();
			    																	// parameters=null;
			    																	// parameters.put("Accno",idDyn);
			    																	// parameters.put("StartDate",StartDate);
			    																	// parameters.put("EndDate",EndDate);

			    																	/* Convert List to JRBeanCollectionDataSource */
			    																	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
			    																			list);
			    																	/* Map to hold Jasper report Parameters */
			    																	Map<String, Object> parameters = new HashMap<String, Object>();
			    																	
			    																	
			    																	
			    																	//------------Get Branch Details----------------------------------
			    														  	             String Branch_Name = null;
			    														  	             String Branch_Address = null;
			    														  	             String Branch_City = null;
			    														  	             String Branch_Pincode = null;
			    														  	             String Branch_Phone = null;
			    														  	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
			    														  	             for(SimpleBranch sb:brInfo)
			    														  	             {
			    														  	            	Branch_Name=sb.getS2();
			    															    	            Branch_Address=sb.getS3();
			    															    	             Branch_City=sb.getS4();
			    															    	             Branch_Pincode=sb.getS5();
			    															    	             Branch_Phone=sb.getS6();
			    															    	             
			    															    	           }
			    														  	             parameters.put("Branch_Name", Branch_Name);
			    														  	             parameters.put("Branch_Address", Branch_Address+","+Branch_City+","+Branch_Pincode+".");
			    														  	            // parameters.put("Branch_City", Branch_City);
			    														  	            // parameters.put("Branch_Pincode", Branch_Pincode);
			    														  	            // parameters.put("Branch_Phone", Branch_Phone);
			    														  	          System.out.println("Branch_Name"+Branch_Name);
			    														  	     


			    																	String realPath = request.getRealPath("/resources/images/");
			    																	
			    																	parameters.put("realPath", realPath);

			    																	parameters.put("itemsJRBean", itemsJRBean);
			    																	 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

			    																	Date Current_Date=(Date) session.getAttribute("Current_Date");
			    															    	String Current=sd.format(Current_Date);
			    															    	 String user_name=empDao.getEmployeeName(user);
			    																	parameters.put("Date", Current);
			    																	
			    																	parameters.put("Status", "App Member Details : "+BName+"");
			    																	
			    																	 //10-02-2023
			    														             parameters.put("user", user_name);
			    														             

			    																	/* Using compiled version(.jasper) of Jasper report to generate PDF */
			    																	// JasperPrint jasperPrint =
			    																	// JasperFillManager.fillReport("resources/com/javaquery/jasper/templates/template_Table.jasper",
			    																	// parameters, new JREmptyDataSource());

			    																	/* outputStream to create PDF */
			    																	// OutputStream outputStream = new FileOutputStream(new
			    																	// File(outputFile));
			    																	/* Write content to PDF file */
			    																	// JasperExportManager.exportReportToPdfStream(jasperPrint,
			    																	// outputStream);
			    																	// Generating the report

			    																	JasperReport jasperReport = JasperCompileManager
			    																			.compileReport(input);
			    																	JasperPrint jasperPrint = JasperFillManager.fillReport(
			    																			jasperReport, parameters, new JREmptyDataSource());

			    																	// Exporting the report as a PDF

			    																	// JRExporter exporter = null;
			    																	// OutputStream ouputStream = response.getOutputStream();

			    																	// response.setContentType("application/pdf");
			    																	// exporter = new JRPdfExporter();
			    																	// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
			    																	// jasperPrint);
			    																	// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
			    																	// ouputStream);
			    														//---------------------------------------------------------------------------------------------------------------------------------------------
			    																	//String filename = "JL_OD_Report";

			    																	//JasperExportManager.exportReportToPdfStream(jasperPrint,
			    																		//	response.getOutputStream());
			    																	//JasperExportManager.exportReportToPdfFile(jasperPrint,
			    																			//"f:/Reports/" + filename + ".pdf");
			    														//---------------------------------------------------------------------------------------------------------------------------------------------
			    																
			    																	String Filename2="App_Member_Report";
			    															           String  reportPath = request.getRealPath("/");
			    															           if(em.getFile_Type().equalsIgnoreCase("1"))
			    															           {
			    															        	   JRExporter exporter2 = null;
			    															           		 ServletOutputStream ouputStream2 = response.getOutputStream();
			    															           		 
			    															           		 response.setContentType("application/pdf");
			    															           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
			    															                    exporter2 = new JRPdfExporter();
			    															                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
			    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			    															                    exporter2.exportReport();
			    															           }
			    															           else if(em.getFile_Type().equalsIgnoreCase("2"))
			    															           {
			    															        	   
			    																          
			    																           response.setContentType("application/xls");
			    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			    																           JRXlsExporter exporter = new JRXlsExporter();
			    																           // JRXlsExporter exporter = new JRXlsExporter();
			    																            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    																            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			    																            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			    																            exporter.exportReport();
			    																    
			    															           }
			    															           else if(em.getFile_Type().equalsIgnoreCase("3"))
			    															           {
			    															        	   response.setContentType("application/docx");
			    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
			    																           JRDocxExporter exporter3 = new JRDocxExporter();
			    																           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    																           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
			    																           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			    																           exporter3.exportReport();
			    															           }
			    																	// JasperExportManager.exportReportToPdfStream(jasperPrint,
			    																	// response.getOutputStream());
			    																	// JasperExportManager.exportReportToHtmlFile(jasperPrint,
			    																	// "/report1.html");
			    																	// JasperViewer.viewReport(jasperPrint);
			    																	
			    															           
			    															          //------10-02-2023----------------------------------
			    													  			         String File_Type="";
			    													  				     if(em.getFile_Type().equalsIgnoreCase("1"))
			    													  				    	File_Type="PDF";
			    													  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
			    													  				    	File_Type="EXCEL";
			    													  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
			    													  					File_Type="DOCUMENT";
			    													  			        
			    													  	    //---------------------------------
			    												  			 
			    																	
			    																		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			    																		dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+"')", 201);


			    																	response.getOutputStream().flush();
			    																	response.getOutputStream().close();

			    																} catch (FileNotFoundException e) {
			    																	e.printStackTrace();
			    																} catch (JRException e) {
			    																	e.printStackTrace();
			    																} catch (ClassNotFoundException e) {
			    																	e.printStackTrace();
			    																} catch (InstantiationException e) {
			    																	// TODO Auto-generated catch block
			    																	e.printStackTrace();
			    																} catch (IllegalAccessException e) {
			    																	// TODO Auto-generated catch block
			    																	e.printStackTrace();
			    																} finally {
			    																	if (conn != null) {
			    																		try {
			    																			conn.close();
			    																		} catch (SQLException e) {
			    																			// TODO Auto-generated catch block
			    																			e.printStackTrace();
			    																		}
			    																	}
			    																}

			    														} 
			    					 				    		 
			    													 @RequestMapping("/Category_Master")
			    							 				   		 public ModelAndView viewCategory_Master(HttpServletRequest request,HttpSession session,Map<String,Object> model,ModelMap mp) throws SQLException
			    							 				   		 {  
			    							 				   			session=request.getSession();
			    							 				   			
			    							 				   			 session=request.getSession();
			    							 				   				String user=(String) session.getAttribute("user");
			    							 				   				if(user==null)
			    							 				   				return  new ModelAndView("Session");
			    							 				   		   //--------------------------------------------------------------------
			    							 				   			 int DBCode=(int) session.getAttribute("Branch");

			    							 				   			//-----------------------------------------------------GetPermission-------------------------------------

			    							 				   				session=request.getSession();
			    							 				   				//request.getSession().setMaxInactiveInterval(40);
			    							 				   				
			    							 				   				// user=(String) session.getAttribute("user"); 
			    							 				   				
			    							 				   				session=request.getSession();
			    							 				   				
			    							 				   				String[] per1=perdao.GetPermission(user, "HR");
			    							 				   				
			    							 				   				 String View=null;
			    							 				   				 String Save=null;
			    							 				   				 String Update=null;
			    							 				   				 String Delete=null;
			    							 				   				 String Verify2=null;
			    							 				   				 String Verify3=null;
			    							 				   				 String Verify4=null;
			    							 				   				 String Verify5=null;
			    							 				   				 String Reports1=null;
			    							 				   				 String Button=null;
			    							 				   				 String Finger_Print=null;
			    							 				   						
			    							 				   				 
			    							 				   				 
			    							 				   				 View=per1[0];
			    							 				   				 Save=per1[1];
			    							 				   				 Update=per1[2];
			    							 				   				 Delete=per1[3];
			    							 				   				 Verify2=per1[4];
			    							 				   				 Verify3=per1[5];
			    							 				   				 Verify4=per1[6];
			    							 				   				 Verify5=per1[7];
			    							 				   				 Reports1=per1[8];
			    							 				   				 Button=per1[9];
			    							 				   				 Finger_Print=per1[10];
			    							 				   				
			    							 				   				 int btn_Delete=1;
			    							 				   				 int btn_Save=1;
			    							 				   				 int btn_Update=1;
			    							 				   				 
			    							 				   				 System.out.println("View-------------------------"+View);
			    							 				   				 System.out.println("Save-------------------------"+Save);
			    							 				   				 System.out.println("Update-------------------------"+Update);
			    							 				   				 System.out.println("Delete-------------------------"+Delete);
			    							 				   				 System.out.println("Verify2-------------------------"+Verify2);
			    							 				   				 System.out.println("Verify3-------------------------"+Verify3);
			    							 				   				 System.out.println("Verify4-------------------------"+Verify4);
			    							 				   				 System.out.println("Verify5-------------------------"+Verify5);
			    							 				   				 System.out.println("Reports1-------------------------"+Reports1);
			    							 				   				 System.out.println("Button-------------------------"+Button);
			    							 				   				 System.out.println("Finger_Print-------------------------"+Finger_Print);
			    							 				   				 
			    							 				   				 if (View.equalsIgnoreCase("N"))
			    							 				   						return new ModelAndView("/Authorization");

			    							 				   				
			    							 				   				 if (Delete.equalsIgnoreCase("N"))	
			    							 				   					 btn_Delete = 2;
			    							 				   				 
			    							 				   				 if (Save.equalsIgnoreCase("N"))	
			    							 				   					 btn_Save = 2;
			    							 				   				 
			    							 				   				 if (Update.equalsIgnoreCase("N"))	
			    							 				   					 btn_Update = 2;
			    							 				   				
			    							 				   				 System.out.println("btn_Verify-------------"+btn_Delete);
			    							 				   				  String DeleteFlag=null;
			    							 				   				  String SaveFlag=null;
			    							 				   				 if(btn_Delete==2)
			    							 				   				    {
			    							 				   					 DeleteFlag="Display:none;";
			    							 				   					 System.out.println("1111111111111111111111");
			    							 				   				    }
			    							 				   				 
			    							 				   				 if(btn_Save==2)
			    							 				   				    {
			    							 				   					 SaveFlag="Display:none;";
			    							 				   					 System.out.println("1111111111111111111111");
			    							 				   				    }
			    							 				   				mp.put("SaveDisplay", SaveFlag);
			    							 				   				
			    							 				   				 Employee em = new Employee();
			    							 				   				 mp.put("Employee3", em);
			    							 				   				 
			    							 				   		 

			    							 				   			
			    							 				   			List<Simple> list=empDao.getCategory(DBCode);
			    							 				   			if(list.size()!=0)
			    							 				   			{
			    							 				   				mp.put("NoOfRecords", list.size());
			    							 				   			}
			    							 				   			else
			    							 				   			{
			    							 				   				mp.put("NoOfRecords", 0);
			    							 				   			}
			    							 				   			mp.put("SimpleList", list);
			    							 				   			
			    							 				   			
			    							 				   			return new ModelAndView("Category_Master");
			    							 				   	  } 
			    							 				   		
			    							 				   		
			    							 				   	  @RequestMapping(value="/saveCategory_Master",method = RequestMethod.POST)  
			    							 				   	    public ModelAndView saveCategory_Master(HttpServletRequest request,HttpSession session,@ModelAttribute("Employee3") Employee il,Map<String,Object> model,ModelMap mp)
			    							 				   	    {  
			    							 				   		 session=request.getSession();
			    							 				   		 int DBCode=(int) session.getAttribute("Branch");

			    							 				   		

			    							 				   	    		 
			    							 				   		 		empDao.saveCategory(il,DBCode);
			    							 				   		 		mp.put("message", "Records Successfully Added");
			    							 				   		 		
			    							 				   		 		List<Simple> list=empDao.getCategory(DBCode);
			    							 				   				mp.put("SimpleList", list);
			    							 				   				return new ModelAndView("Category_Master");
			    							 				   	    	}
			    							 				   	
			    							 				   	
			    							 				       
			    							 				       /* It deletes record for the given id in URL and redirects to /viewemp */  
			    							 				   	
			    							 				       @RequestMapping(value="/deleteCategory_Master/{Bank_Desc}",method = RequestMethod.GET)  
			    							 				       public ModelAndView deleteCategory_Master(HttpServletRequest request,HttpSession session,@PathVariable String Bank_Desc,ModelMap mp) throws SQLException{  
			    							 				         
			    							 				       	session=request.getSession();
			    							 				       	 int DBCode=(int) session.getAttribute("Branch");

			    							 				       	

			    							 				       	
			    							 				       	
			    							 				       	int i=0;
			    							 				       	
			    							 				       	  i=empDao.deleteCategory(Bank_Desc,DBCode); 
			    							 				          
			    							 				       	  mp.put("message", "Record was Deleted");
			    							 				       	  
			    							 				       	  List<Simple> list=empDao.getCategory(DBCode);
			    							 				   			mp.put("SimpleList", list);
			    							 				   			
			    							 				       	 
			    							 				           return new ModelAndView("redirect:/Category_Master");  
			    							 				       }  
  
			    							 				 	 @RequestMapping(value = "/GL_Transaction_Report")
			    				  				    	  			public String View_GL_Transaction_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
			    				  				    	  		    	///Session-------------------------------------------------------------
			    				  				    	  				 session=request.getSession();
			    				  				    	  					String user=(String) session.getAttribute("user");
			    				  				    	  					if(user==null)
			    				  				    	  					return  "Session_Popup";
			    				  				    	  			   //--------------------------------------------------------------------
			    				  				    	  					String[] per1=perdao.GetPermission(user, "Recovery");
			    				  				    	  					
			    				  				    	  					
			    				  				    	  					 String View=null;
			    				  				    	  					 String Save=null;
			    				  				    	  					 String Update=null;
			    				  				    	  					 String Delete=null;
			    				  				    	  					 String Verify2=null;
			    				  				    	  					 String Verify3=null;
			    				  				    	  					 String Verify4=null;
			    				  				    	  					 String Verify5=null;
			    				  				    	  					 String Reports1=null;
			    				  				    	  					 String Button=null;
			    				  				    	  					 String Finger_Print=null;
			    				  				    	  							
			    				  				    	  					 
			    				  				    	  					 
			    				  				    	  					 View=per1[0];
			    				  				    	  					 Save=per1[1];
			    				  				    	  					 Update=per1[2];
			    				  				    	  					 Delete=per1[3];
			    				  				    	  					 Verify2=per1[4];
			    				  				    	  					 Verify3=per1[5];
			    				  				    	  					 Verify4=per1[6];
			    				  				    	  					 Verify5=per1[7];
			    				  				    	  					 Reports1=per1[8];
			    				  				    	  					 Button=per1[9];
			    				  				    	  					 Finger_Print=per1[10];
			    				  				    	  					
			    				  				    	  					 
			    				  				    	  					 System.out.println("View-------------------------"+View);
			    				  				    	  					 System.out.println("Save-------------------------"+Save);
			    				  				    	  					 System.out.println("Update-------------------------"+Update);
			    				  				    	  					 System.out.println("Delete-------------------------"+Delete);
			    				  				    	  					 System.out.println("Verify2-------------------------"+Verify2);
			    				  				    	  					 System.out.println("Verify3-------------------------"+Verify3);
			    				  				    	  					 System.out.println("Verify4-------------------------"+Verify4);
			    				  				    	  					 System.out.println("Verify5-------------------------"+Verify5);
			    				  				    	  					 System.out.println("Reports1-------------------------"+Reports1);
			    				  				    	  					 System.out.println("Button-------------------------"+Button);
			    				  				    	  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
			    				  				    	  					 
			    				  				    	  					 
			    				  				    	  					
			    				  				    	  					int btn_Verify=1;
			    				  				    	  					int btn_Save=1;
			    				  				    	  					int btn_Delete=1;
			    				  				    	  					
			    				  				    	  					if (View.equalsIgnoreCase("N"))
			    				  				    	  						return ("/Authorization"); 
			    				  				    	  					
			    				  				    	  					 List <Simple> branchCode=dao10.getBranchCode();
			    				  				    	  						System.out.println("Branch_Code=getbranch");
			    				  				    	  						List<String> branchCodeList=new ArrayList<>();
			    				  				    	  						for(Simple s:branchCode)
			    				  				    	  						{
			    				  				    	  							String s3=s.getS1()+"-"+s.getS2();
			    				  				    	  							branchCodeList.add(s3);
			    				  				    	  							System.out.println(s3);  
			    				  				    	  							 
			    				  				    	  						}
			    				  				    	  						mp.put("BranchCodeList", branchCodeList);
			    				  				    	  						
			    				  				    	  						List <Simple> glcode=empDao.getBranchGLCode();
			    				  				    	  						//System.out.println("Branch_Code=getbranch");
			    				  				    	  						List<String> glcodelist=new ArrayList<>();
			    				  				    	  						for(Simple s:glcode)
			    				  				    	  						{
			    				  				    	  							String s3=s.getS1()+"-"+s.getS2();
			    				  				    	  							glcodelist.add(s3);
			    				  				    	  							System.out.println(s3);  
			    				  				    	  							 
			    				  				    	  						}
			    				  				    	  						mp.put("GLCode_List", glcodelist);
			    				  				    	  					
			    				  				    	  					 Employee em = new Employee();
			    				  				    	  					 mp.put("Employee2", em);
			    				  				    	  					 

			    				  				    	  					
			    				  				    	  				return  "GL_Transaction_Report";
			    				  				    	  			}
			    													
			    				 				    	  		  @RequestMapping(value = "/getGLTransactionReport", params ="Btn_GL_Report", method=RequestMethod.POST)
			    				 				    	  		  public void getGLTransactionReport(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
			    				 				    	  		  { 
			    				 				    	  		session=request.getSession();
			    				 				    	  		int DBCode=(int) session.getAttribute("Branch");

			    				 				    	  		System.out.println("con----------------------------");

			    				 				    	  		SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

			    				 				    	  			Date Current_Date=(Date) session.getAttribute("Current_Date");
			    				 				    	  			String sys=sd.format(Current_Date);


			    				 				    	  		String user=(String) session.getAttribute("user");
			    				 				    	  			
			    				 				    	  			String Branch_Name1="";
			    				 				    	  			String Scheme_name="";
			    				 				    	  			String Account_No="";
			    				 				    	  			String Customer_Name="";
			    				 				    	  			String Open_date="";
			    				 				    	  			String Loan_Amount="";
			    				 				    	  			String CB="";
			    				 				    	  			String pending_days="";
			    				 				    	  			String Interest_Upto="";
			    				 				    	  			String Arrear_Interest="";
			    				 				    	  			String From_Date=em.getDob();
			    				 				    	  			String To_Date=em.getJoining_Date();
			    				 				    	  			String GL_Code1=em.getGL_Code().substring(0, 5);
			    				 				    	  			String BCode=em.getBranch_Type().substring(0, 3);
			    				 				    	  			String Branch=null;
			    				 				    	  			String GL_Code=null;
			    				 				    	  			if(BCode.equalsIgnoreCase("200")){
			    				 				    	  				Branch="%";
			    				 				    	  			}
			    				 				    	  			else{
			    				 				    	  				Branch=BCode;
			    				 				    	  			}
			    				 				    	  			
			    				 				    	  			if(GL_Code1.equalsIgnoreCase("20000")){
			    				 				    	  				GL_Code="%";
			    				 				    	  			}
			    				 				    	  			else{
			    				 				    	  				GL_Code=GL_Code1;
			    				 				    	  			}
			    				 				    	  			
			    				 				    	  			System.out.println("BCode--------------------------"+BCode);
			    				 				    	  			System.out.println("GL_Code--------------------------"+GL_Code);
			    				 				    	  			int Bcode=201;
			    				 				    	  		System.out.println("Inside controller---------------------------------------");
			    				 				    	  		   String BranchName="";      
			    				 				    	  		  

			    				 				    	  		Connection conn=null;
			    				 				    	  		try {

			    				 				    	  		  
			    				 				    	  		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			    				 				    	  		   
			    				 				    	  		        String jrxmlFile=null;

			    				 				    	  		        	 jrxmlFile=request.getRealPath("GL_Transaction_Report_xl.jrxml");
			    				 				    	  		        
			    				 				    	  		       // jrxmlFile=request.getRealPath("demo.jrxml");
			    				 				    	  		   InputStream input = new FileInputStream(new File(jrxmlFile));
			    				 				    	  		   
			    				 				    	  		   




			    				 				    	  		 	       	    	           
			    				 				    	  		  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
			    				 				    	  		   String Filename2="GL Report as on "+To_Date;
			    				 				    	  		   

			    				 				    	  				 Map parameters = new HashMap();
			    				 				    	  			
			    				 				    	  		    System.out.println("Filename2--------------------------------"+Filename2);   

			    				 				    	  				String  realPath = request.getRealPath("/resources/images/");
			    				 				    	  				List<SimpleBranch> list=null;
			    				 				    	  				
			    				 				    	  			//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
			    				 				    	  				String Date2=To_Date;
			    				 				    	  				String Branch_Code=BranchName;
			    				 				    	  				//String sql="";
			    				 				    	  			 	
			    				 				    	  			// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
			    				 				    	  				if(GL_Code1.equalsIgnoreCase("20000")){
			    				 				    	  					list=empDao.getGL_Transaction_ReportAll(From_Date,To_Date,Branch,Bcode);
			    				 				    	  				}
			    				 				    	  				else{
			    				 				    	  				 list=empDao.getGL_Transaction_Report(From_Date,To_Date,GL_Code,Branch,Bcode);
			    				 				    	  				}
			    				 				    	  				
			    				 				    	  				
			    				 				    	  				
			    				 				    	  			 
			    				 				    	  			mp.put("list",list);
			    				 				    	  			JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
			    				 				    	  			
			    				 				    	  		      parameters.put("itemsJRBean", itemsJRBean); 
			    				 				    	  		  
			    				 				    	  		parameters.put("Heading", Filename2); 

			    				 				    	  		System.out.println("11111-----------------------");

			    				 				    	  		String Branch_Name = null;
			    				 				    	  		String Branch_Address = null;
			    				 				    	  		String Branch_City = null;
			    				 				    	  		String Branch_Pincode = null;
			    				 				    	  		String Branch_Phone = null;
			    				 				    	  		List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
			    				 				    	  		for(SimpleBranch sb:brInfo)
			    				 				    	  		{
			    				 				    	  		Branch_Name=sb.getS2();
			    				 				    	  		Branch_Address=sb.getS3();
			    				 				    	  		Branch_City=sb.getS4();
			    				 				    	  		Branch_Pincode=sb.getS5();
			    				 				    	  		Branch_Phone=sb.getS6();

			    				 				    	  		}
			    				 				    	  		System.out.println("222222222-----------------------");
			    				 				    	  		parameters.put("Branch_Name", Branch_Name);
			    				 				    	  		parameters.put("Branch_Address", Branch_Address);
			    				 				    	  		parameters.put("Branch_City", Branch_City);
			    				 				    	  		parameters.put("Branch_Pincode", Branch_Pincode);
			    				 				    	  		parameters.put("Branch_Phone", Branch_Phone);
			    				 				    	  		parameters.put("To_Date", To_Date);
			    				 				    	  		parameters.put("user", user);
			    				 				    	  		  JasperReport jasperReport = JasperCompileManager.compileReport(input);
			    				 				    	  		  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

			    				 				    	  		System.out.println("33333333333333-----------------------");
			    				 				    	  		 
			    				 				    	  		  String  reportPath = request.getRealPath("/");
			    				 				    	  		  parameters.put("To_Date", To_Date);
			    				 				    	  		parameters.put("From_Date", From_Date);
			    				 				    	  		System.out.println("4444444444-----------------------");   
			    				 				    	  		     
			    				 				    	  		      response.setContentType("application/xls");
			    				 				    	  		      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			    				 				    	  		      JRXlsExporter exporter = new JRXlsExporter();
			    				 				    	  		      // JRXlsExporter exporter = new JRXlsExporter();
			    				 				    	  		       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			    				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

			    				 				    	  		       exporter.exportReport();

			    				 				    	  		     System.out.println("5555555555555-----------------------");							       


			    				 				    	  		response.getOutputStream().flush();
			    				 				    	  		response.getOutputStream().close();



			    				 				    	  		//String user = (String) session.getAttribute("user");
			    				 				    	  			

			    				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			    				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


			    				 				    	  		} catch (FileNotFoundException e) {
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("aa-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (JRException e) {
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("bb-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (ClassNotFoundException e) {
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("cc-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (InstantiationException e) {
			    				 				    	  		// TODO Auto-generated catch block
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("dd-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (IllegalAccessException e) {
			    				 				    	  		// TODO Auto-generated catch block
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("ee-----------------------"+e.getLocalizedMessage());
			    				 				    	  		}
			    				 				    	  		finally {
			    				 				    	  		if(conn!=null){
			    				 				    	  		  try {
			    				 				    	  			conn.close();
			    				 				    	  		} catch (SQLException e) {
			    				 				    	  			// TODO Auto-generated catch block
			    				 				    	  			e.printStackTrace();
			    				 				    	  			 System.out.println("ff-----------------------"+e.getLocalizedMessage());
			    				 				    	  		}
			    				 				    	  		}
			    				 				    	  		}
			    				 				    	  		  }

			    				 				    	  		 @RequestMapping(value = "/saveEmployee_Master", params ="Btn_Employee_Profile", method=RequestMethod.POST)
		    													   public void saveEmployee_Master(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
		    													   { 

		    															// JL_Master jl=new JL_Master();

		    														   System.out.println("inside controller-----------------------------------");
		    														   System.out.println("inside controller-----------------------------------");
			    														  
		    															session = request.getSession();
		    															int DBCode = (int) session.getAttribute("Branch");
		    											                String user=(String) session.getAttribute("user");
		    											                
		    											            	String msg="Active";
		    											                String Emp_Id=em.getEmp_Id();
		    											    			String Emp_Name=null;
		    											    			String Gender=null;
		    											    			String Dob=null;
		    											    			String Father_Name=null;
		    											    			String Marital_Status=null;
		    											    			String Email_id=null;
		    											    			String Mobile_number=null;
		    											    			String Address=null;
		    											    			String Edu_qualifi=null;
		    											    			
		    											    			String User_name=null;
		    											    			String Password=null;
		    											    			String Access_Level=null;
		    											    			String Login_type=null;
		    											    			String Status=null;
		    											    			String Designation=null;
		    											    			String User_Level=null;
		    											    			String Muli_branch=null;
		    											    			String Subakalyan=null;
		    											    			String Transaction_Edit=null;
		    											    			
		    											    			String Joining_date=null;
		    											    			String Attachmentfile=null;
		    											    			
		    											    			String bcode=null;
		    											    			
		    											    			String Attendance_Level=null;
		    											    			String Attendance_Status=null;
		    											    			String Category=null;
		    											    			
		    											    			String Last_Name="";
   														             String Add_Mobile="";
   														             
   														             String Working_Status="";
   														             String Working_Details="";
   														             
   														             String Aadhaar="";
   														             String Pan="";
   														             
   														             String Bank_Acc_No="";
   														             String Bank_Acc_Name="";
   														             String Bank_IFSC="";
   														             String Bank_Name="";
   														             String Promotion_Date="";
   														             String Promotion_Details="";
   														          String Btype="";
 											    				 String Ctype="";	
		    											    			
		    											    			
		    											    			List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
		    											    			for(SimpleBranch s:emplyee)
		    											    			{
		    											    			
		    											    				 Emp_Id=s.getS3();
		    											    				 Emp_Name=s.getS31();
		    											    				 Gender=s.getS39();
		    											    				 Dob=s.getS40();
		    											    				 Father_Name=s.getS131();
		    											    				 Marital_Status=s.getS132();
		    											    				 Email_id=s.getS72();
		    											    				 Mobile_number=s.getS32();
		    											    				 Address=s.getS133();
		    											    				 Edu_qualifi=s.getS134();
		    											    				
		    											    				 User_name=s.getS135();
		    											    				 Access_Level=s.getS137();
		    											    				 Login_type=s.getS76();
		    											    				 Status=s.getS35();
		    											    				 Designation=s.getS36();
		    											    				 User_Level=s.getS34();
		    											    				 Muli_branch=s.getS77();
		    											    				 Subakalyan=s.getS78();
		    											    				 Transaction_Edit=s.getS79();
		    											    				 Category=s.getS138();
		    											    				 Joining_date=s.getS73();
		    											    				 Attachmentfile=s.getS74();
		    											    				 System.out.println("s.getS137()="+s.getS137()); 
		    											    				 System.out.println("s.getS76()="+s.getS76()); 
		    											    				 System.out.println("s.getS77()="+s.getS77()); 	
		    											    				 System.out.println("s.getS78()="+s.getS78()); 	
		    											    				 System.out.println("s.getS79()="+s.getS79()); 	
		    											    				 System.out.println("Access_Level="+Access_Level); 
		    											    				 
		    											    		 Attendance_Level=s.getS4();
		    											    		Attendance_Status=s.getS111();
		    											    					
		    											    				System.out.println("Login_type="+Login_type); 
		    											    				System.out.println("Subakalyan="+Subakalyan); 
		    											    				System.out.println("Transaction_Edit="+Transaction_Edit); 
		    											    				System.out.println("Joining_date="+Joining_date); 
		    											    				
		    											    				 mp.put("Joining_date", Joining_date);
		    											    				 mp.put("Attachmentfile", Attachmentfile);
		    											    				 
		    											    				 em.setEmp_Id(Emp_Id);
		    											    				 em.setEmp_Name(Emp_Name);
		    											    			
		    											    				 mp.put("Emp_Id", Emp_Id);
		    											    				 mp.put("Emp_Name", Emp_Name);
		    											    				 
		    											    				 em.setGender(Gender);
		    											    				 
		    											    				 //mp.put("Gender", Gender);
		    											    				 
		    											    				 mp.put("Dob", Dob);
		    											    				 mp.put("Father_Name", Father_Name);
		    											    				 em.setFather_Name(Father_Name);
		    											    				 em.setDob(Dob);
		    											    				
		    											    				 em.setMarital_Status(Marital_Status);
		    											    				// mp.put("Marital_Status", Marital_Status);
		    											    				 
		    											    				 mp.put("Email_id", Email_id);
		    											    				 mp.put("Mobile_number", Mobile_number);
		    											    				 //mp.put("Address", Address);
		    											    				 em.setAddress(Address);
		    											    				 mp.put("Edu_qualifi", Edu_qualifi);
		    											    				 mp.put("User_name", User_name);
		    											    				 
		    											    				 em.setUser_name(User_name);
		    											    				 em.setEdu_qualifi(Edu_qualifi);
		    											    				 em.setMobile_number(Mobile_number);
		    											    				 em.setEmail_id(Email_id);
		    											    				 
		    											    				// mp.put("Access_Level", Access_Level);
		    											    				 em.setAccess_Level(Access_Level);
		    											    				 
		    											    				 //mp.put("Login_type", Login_type);
		    											    				 em.setLogin_type(Login_type);
		    											    				 
		    											    				// mp.put("Status", Status);
		    											    				 em.setStatus(Status);
		    											    				 
		    											    				 mp.put("Designation", Designation);
		    											    				 mp.put("User_Level", User_Level);
		    											    				 em.setUser_Level(User_Level);
		    											    				 em.setDesignation(Designation);
		    											    				//07-12-2022
		    											    				 em.setUser_Level(User_Level);
		    											    				 
		    											    				 //mp.put("Muli_branch", Muli_branch);
		    											    				 em.setMuli_branch(Muli_branch);
		    											    				 
		    											    				// mp.put("Subakalyan", Subakalyan);
		    											    				 System.out.println("Subakalyan---------------------"+Subakalyan);
		    											    				 em.setSubakalyan(Subakalyan);
		    											    				 
		    											    				 mp.put("Transaction_Edit", Transaction_Edit);
		    											    				 em.setTransaction_Edit(Transaction_Edit);
		    											    				
		    											    				 bcode=s.getS33();
		    											    				 if(bcode.equalsIgnoreCase("200"))
		    											    				 {
		    											    					 Btype="200-Corporate";
		    											    				 }
		    											    				 else
		    											    				 {
			    											    				 Btype=dao10.Get_ScalarFun("select to_char(Branch_Code||'-'||Branch_Name) from branch_Master where to_char(branch_code)='"+bcode+"'", 201);
	 
		    											    				 }
		    											    				 String ccode=s.getS119();
		    											    				if(ccode.equalsIgnoreCase("200"))
		    											    				 {
		    											    					 Ctype="200-Corporate";
		    											    				 }
		    											    				 else
		    											    				 {
			    											    				 Ctype=dao10.Get_ScalarFun("select to_char(Branch_Code||'-'||Branch_Name) from branch_Master where to_char(branch_code)='"+ccode+"'", 201);
	 
		    											    				 }
		    											    				 
		    											    				 
		    											    				 System.out.println("Attendance_Leve="+Attendance_Level);
		    											    				 System.out.println("Attendance_Status="+Attendance_Status);

		    											    				 mp.put("Attendance_Level", Attendance_Level);
		    											    				 mp.put("Attendance_Status", Attendance_Status);
		    											    				 
		    											    					System.out.println("Joining_date="+s.getS73());
		    											    				 em.setAttendance_Level(Attendance_Level);
		    											    				 em.setAttendance_Status(Attendance_Status);
		    											    				 
		    											    				 
		    											    				 em.setResign_Date(s.getS9());
		    											    				 em.setSus_From_Date(s.getS112());
		    											    				 em.setSus_To_Date(s.getS75());
		    											    				 
		    											    				 //04-03-2024
		    											    				 em.setMaternity_From_Date(s.getS113());
		    											    				 em.setMaternity_To_Date(s.getS114());
		    											    				 em.setRemarks(s.getS115());
		    											    				 
		    											    				 
		    											    				 
		    											    				//Corp Transaction
		    											    					String Corp_Transaction=null;
		    											    					Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
		    											    					em.setCorpTransaction(Corp_Transaction);
		    											    			   //PermissionLevel
		    											    					String PermissionLevel=null;
		    											    					PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
		    											    					em.setPermissionLevel(PermissionLevel);

		    											                
		    															
		    															String Branch_Type=em.getBranch_Type().substring(0, 3);
		    															System.out.println("Branch_Type="+Branch_Type);

		    														    String BName="All Branches";
		    															int Bcode = Integer.parseInt(Branch_Type);
		    															if(em.getBranch_Type().equalsIgnoreCase("300"))
		    															{
		    																Bcode=2;
		    															}
		    															else
		    																BName=em.getBranch_Type().substring(4);
		    																
		    															
		    															String Scheme_type=Status;
		    															
		    															System.out.println("Scheme_type="+Scheme_type);
		    															System.out.println("Scheme_type="+Scheme_type);
		    															
		    																if(Scheme_type.equalsIgnoreCase("A"))
		    																	msg="Active";
		    																else if(Scheme_type.equalsIgnoreCase("C"))
		    																	msg="InActive";
		    																else if(Scheme_type.equalsIgnoreCase("M"))
		    																	msg="Maternity Leave";
		    																else if(Scheme_type.equalsIgnoreCase("S"))
		    																	msg="Suspended";
		    																else if(Scheme_type.equalsIgnoreCase("R"))
		    																	msg="Resigned";
		    																
		    																 
	    														             Last_Name=s.getS116();
	    														             Add_Mobile=s.getS238();
	    														             
	    														             Working_Status=s.getS234();
	    														             Working_Details=s.getS235();
	    														             
	    														             Aadhaar=s.getS239();
	    														             Pan=s.getS240();
	    														             
	    														             Bank_Acc_No=s.getS241();
	    														             Bank_Acc_Name=s.getS242();
	    														             Bank_IFSC=s.getS243();
	    														             Bank_Name=s.getS244();
	    														             
	    														             Promotion_Date=s.getS236();
	    														             Promotion_Details=s.getS237();
	    														             
		    											    			}
		    											            //  Status=BName+"-"+Status;
		    											          	System.out.println("Status="+Status);
		    											          	
		    											         	System.out.println("Joining_date="+Joining_date);
		    															
                          
		    															
		    															List<SimpleBranch> list=null;
		    																list = empDao.getEmpProfileReport(Emp_Id);
		    																			    				
		    															
		    													
		    															

		    														
		    															// Connecting to the SQL server database
		    																Connection conn = null;

		    																try {

		    																	// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
		    																	// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
		    																	Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		    																	// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

		    																	// Loading Jasper Report File from Local file system

		    																	// String jrxmlFile =
		    																	// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
		    																	// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
		    																	// String jrxmlFile=request.getRealPath("Report1.jrxml");
		    																	// String jrxmlFile =
		    																	// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

		    																	// String jrxmlFile=request.getRealPath("kk1.jrxml");
		    																	String jrxmlFile = request.getRealPath("Employee_Profile.jrxml");
		    																	/*if(em.getFile_Type().equalsIgnoreCase("2"))
		    															           {
		    																		jrxmlFile = request.getRealPath("Employee_Profile.jrxml");
		    															           }*/
		    																	InputStream input = new FileInputStream(new File(jrxmlFile));

		    																	// String idDyn="101";
		    																	// int idDyn=Transfer_Acc_No;
		    																	// String StartDate=From_Date;
		    																	// String EndDate=To_Date;
		    																	// Map parameters = new HashMap();
		    																	// parameters=null;
		    																	// parameters.put("Accno",idDyn);
		    																	// parameters.put("StartDate",StartDate);
		    																	// parameters.put("EndDate",EndDate);

		    																	/* Convert List to JRBeanCollectionDataSource */
		    																	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
		    																			list);
		    																	/* Map to hold Jasper report Parameters */
		    																	Map<String, Object> parameters = new HashMap<String, Object>();
		    																	
		    																	
		    																
		    																	//------------Get Branch Details----------------------------------
		    														  	             String Branch_Name = null;
		    														  	             String Branch_Address = null;
		    														  	             String Branch_City = null;
		    														  	             String Branch_Pincode = null;
		    														  	             String Branch_Phone = null;
		    														  	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
		    														  	             for(SimpleBranch sb:brInfo)
		    														  	             {
		    														  	            	Branch_Name=sb.getS2();
		    															    	            Branch_Address=sb.getS3();
		    															    	             Branch_City=sb.getS4();
		    															    	             Branch_Pincode=sb.getS5();
		    															    	             Branch_Phone=sb.getS6();
		    															    	             
		    															    	           }
			    															    	 String Filename2="Emp_Profile - "+Emp_Id;

		    														  	             parameters.put("Branch_Name", Filename2);
		    														  	             parameters.put("Branch_Address", Branch_Address+","+Branch_City+","+Branch_Pincode+".");
		    														  	            // parameters.put("Branch_City", Branch_City);
		    														  	            // parameters.put("Branch_Pincode", Branch_Pincode);
		    														  	            // parameters.put("Branch_Phone", Branch_Phone);

		    														  	             System.out.println("Branch_Name"+Branch_Name);
		    														  	     
		    														  	             System.out.println("Branch_Name"+Branch_Name);


		    																	String realPath = request.getRealPath("/resources/Images/");
		    																	
		    																	parameters.put("realPath", realPath);

		    																	parameters.put("itemsJRBean", itemsJRBean);
		    																	 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

		    																	Date Current_Date=(Date) session.getAttribute("Current_Date");
		    															    	String Current=sd.format(Current_Date);
		    															    	 String user_name=empDao.getEmployeeName(user);
		    																	
		    																	 //10-02-2023
		    														             parameters.put("user", user_name);
		    														             
		    														             
		    														            
		    														             parameters.put("Emp_Name", Emp_Name);
		    														             parameters.put("Last_Name", Last_Name);
		    														             
		    														             if(Gender.equalsIgnoreCase("M"))
		    														             {
		    														            	 Gender="Male"; 
		    														             }
		    														             else
		    														            	 Gender="Female";  

		    														             parameters.put("Gender", Gender);
		    														             parameters.put("Dob", Dob);
		    														             parameters.put("Email_id", Email_id);
		    														             parameters.put("Mobile_no", Mobile_number);

		    														             parameters.put("Father_Name", Father_Name);
		    														             parameters.put("Add_Mobile", Add_Mobile);

		    														             parameters.put("Edu_qualify", Edu_qualifi);
		    														             parameters.put("Marital_Status", Marital_Status);

		    														             parameters.put("Working_Status", Working_Status);
		    														             parameters.put("Working_Details", Working_Details);

		    														             parameters.put("Address", Address);
		    														             parameters.put("Address2", Address);

		    														             parameters.put("Aadhaar", Aadhaar);
		    														             parameters.put("Pan", Pan);

		    														             
		    														             parameters.put("Bank_Acc_No", Bank_Acc_No);
		    														             parameters.put("Bank_Acc_Name", Bank_Acc_Name);
		    														             parameters.put("Bank_IFSC", Bank_IFSC);
		    														             parameters.put("Bank_Name", Bank_Name);

		    														             parameters.put("Emp_Id", Emp_Id);
		    														             parameters.put("Designation", Designation);

		    														             parameters.put("Joining_Date", Joining_date);
		    														             
		    														             parameters.put("Status", msg);

		    														            parameters.put("Branch_Type", Btype);
		    														             parameters.put("CBranch_Type", Ctype);

		    														             parameters.put("Promotion_Date", Promotion_Date);
		    														             parameters.put("Promotion_Details", Promotion_Details);
		    														             
		    														             String Image=null;
		    														             int j=201;
		    														             this.template=con.getCon2(j);
		    														             //--------------------------------

		    														             try{	Connection con=template.getDataSource().getConnection();

		    														             PreparedStatement ps=con.prepareStatement("select PHOTO from Employee_Master where empid='"+Emp_Id+"'");  
		    														             ResultSet rs=ps.executeQuery();  
		    														             if(rs.next()){//now on 1st row  
		    														                           
		    														             Blob b=rs.getBlob(1);//24 means 24nd column data  
		    														             if(b!=null)
		    														             {
		    														             byte barr[]=b.getBytes(1,(int)b.length());//1 means first image  


		    														             realPath = request.getRealPath("/resources/Images");
		    														             System.out.println("RealPath="+realPath);
		    														             mp.put("realPath", realPath);


		    														             String contextPath=request.getContextPath();
		    														             String storelocation=contextPath+"/resources/Images";
		    														             System.out.println("storelocation="+storelocation);   

		    														             //final String context = config.getServletContext().getRealPath("/");
		    														             String fileName=""+Emp_Id+".jpg";
		    														             mp.put("fileName", fileName);
		    														             mp.put("contextPath", contextPath);

		    														             FileOutputStream fout=new FileOutputStream(realPath+"/"+fileName);  
		    														             fout.write(barr);  
		    														                     


		    														             Image=realPath+"/"+fileName;
		    														             fout.close();  
		    														             }
		    														             }//end of if  
		    														             System.out.println("ok"); 
		    														             parameters.put("b", Image);
		    														                           
		    														             con.close();  
		    														             }catch (Exception e) {e.printStackTrace();  }  


		    																	
		    																	JasperReport jasperReport = JasperCompileManager
		    																			.compileReport(input);
		    																	JasperPrint jasperPrint = JasperFillManager.fillReport(
		    																			jasperReport, parameters, new JREmptyDataSource());

		    																	// Exporting the report as a PDF

		    																	// JRExporter exporter = null;
		    																	// OutputStream ouputStream = response.getOutputStream();

		    																	// response.setContentType("application/pdf");
		    																	// exporter = new JRPdfExporter();
		    																	// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
		    																	// jasperPrint);
		    																	// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
		    																	// ouputStream);
		    														//---------------------------------------------------------------------------------------------------------------------------------------------
		    																	//String filename = "JL_OD_Report";

		    																	//JasperExportManager.exportReportToPdfStream(jasperPrint,
		    																		//	response.getOutputStream());
		    																	//JasperExportManager.exportReportToPdfFile(jasperPrint,
		    																			//"f:/Reports/" + filename + ".pdf");
		    														//---------------------------------------------------------------------------------------------------------------------------------------------
		    																
		    																	
		    															           String  reportPath = request.getRealPath("/");
		    															           //if(em.getFile_Type().equalsIgnoreCase("1"))
		    															          // {
		    															        	   JRExporter exporter2 = null;
		    															           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		    															           		 
		    															           		 response.setContentType("application/pdf");
		    															           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		    															                    exporter2 = new JRPdfExporter();
		    															                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    															                    exporter2.exportReport();
		    															           /*}
		    															           else if(em.getFile_Type().equalsIgnoreCase("2"))
		    															           {
		    															        	   
		    																          
		    																           response.setContentType("application/xls");
		    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
		    																           JRXlsExporter exporter = new JRXlsExporter();
		    																           // JRXlsExporter exporter = new JRXlsExporter();
		    																            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    																            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
		    																            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

		    																            exporter.exportReport();
		    																    
		    															           }
		    															           else if(em.getFile_Type().equalsIgnoreCase("3"))
		    															           {
		    															        	   response.setContentType("application/docx");
		    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
		    																           JRDocxExporter exporter3 = new JRDocxExporter();
		    																           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    																           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
		    																           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    																           exporter3.exportReport();
		    															           }
*/		    																	// JasperExportManager.exportReportToPdfStream(jasperPrint,
		    																	// response.getOutputStream());
		    																	// JasperExportManager.exportReportToHtmlFile(jasperPrint,
		    																	// "/report1.html");
		    																	// JasperViewer.viewReport(jasperPrint);
		    																	
		    															           
		    															          //------10-02-2023----------------------------------
		    													  			         String File_Type="";
		    													  				     if(em.getFile_Type().equalsIgnoreCase("1"))
		    													  				    	File_Type="PDF";
		    													  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
		    													  				    	File_Type="EXCEL";
		    													  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
		    													  					File_Type="DOCUMENT";
		    													  			        
		    													  	    //---------------------------------
		    												  						//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		    																		dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+"')", 201);


		    																	response.getOutputStream().flush();
		    																	response.getOutputStream().close();

		    																} catch (FileNotFoundException e) {
		    																	e.printStackTrace();
		    																} catch (JRException e) {
		    																	e.printStackTrace();
		    																} catch (ClassNotFoundException e) {
		    																	e.printStackTrace();
		    																} catch (InstantiationException e) {
		    																	// TODO Auto-generated catch block
		    																	e.printStackTrace();
		    																} catch (IllegalAccessException e) {
		    																	// TODO Auto-generated catch block
		    																	e.printStackTrace();
		    																} finally {
		    																	if (conn != null) {
		    																		try {
		    																			conn.close();
		    																		} catch (SQLException e) {
		    																			// TODO Auto-generated catch block
		    																			e.printStackTrace();
		    																		}
		    																	}
		    																}

		    														} 
			    				 				    	  		 
			    				 				    	  		 
			    				 				    	  		 
			    				 				    	  		 @RequestMapping(value = "/saveEmployee_Master", params ="Btn_Employee_Report2", method=RequestMethod.POST)
		    													   public void Btn_Employee_Report2(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
		    													   { 

		    															// JL_Master jl=new JL_Master();

		    														   System.out.println("inside controller-----------------------------------");
		    														   System.out.println("inside controller-----------------------------------");
			    														  
		    															session = request.getSession();
		    															int DBCode = (int) session.getAttribute("Branch");
		    											                String user=(String) session.getAttribute("user");
		    											                
		    											                String msg="Active";
		    											                String Emp_Id=em.getEmp_Id();
		    											    			String Emp_Name=null;
		    											    			String Gender=null;
		    											    			String Dob=null;
		    											    			String Father_Name=null;
		    											    			String Marital_Status=null;
		    											    			String Email_id=null;
		    											    			String Mobile_number=null;
		    											    			String Address=null;
		    											    			String Edu_qualifi=null;
		    											    			
		    											    			String User_name=null;
		    											    			String Password=null;
		    											    			String Access_Level=null;
		    											    			String Login_type=null;
		    											    			String Status=null;
		    											    			String Designation=null;
		    											    			String User_Level=null;
		    											    			String Muli_branch=null;
		    											    			String Subakalyan=null;
		    											    			String Transaction_Edit=null;
		    											    			
		    											    			String Joining_date=null;
		    											    			String Attachmentfile=null;
		    											    			
		    											    			String bcode=null;
		    											    			
		    											    			String Attendance_Level=null;
		    											    			String Attendance_Status=null;
		    											    			String Category=null;
		    											    			
		    											    			String Last_Name="";
   														             String Add_Mobile="";
   														             
   														             String Working_Status="";
   														             String Working_Details="";
   														             
   														             String Aadhaar="";
   														             String Pan="";
   														             
   														             String Bank_Acc_No="";
   														             String Bank_Acc_Name="";
   														             String Bank_IFSC="";
   														             String Bank_Name="";
   														             String Promotion_Date="";
   														             String Promotion_Details="";
   														          String Btype="";
 											    				 String Ctype="";	
 											    				String Communication_Address=null;
 											    				String Father_Occu=null;
 											    				String Mother_name=null;
 											    				String Mother_Occ=null;
 											    				String Place_birth=null;
 											    				String Religion=null;
 											    				String Caste=null;
 											    				String Home_town=null;
 											    				String Driving_licene=null;
 											    				String Psport_no=null;
 											    				String Cibil_score=null;
 											    				String Cibil_date=null; 
		    											    			
		    											    			List <SimpleBranch> emplyee=empDao.getEmployee_Details(Emp_Id,201);
		    											    			for(SimpleBranch s:emplyee)
		    											    			{
		    											    			
		    											    				 Emp_Id=s.getS3();
		    											    				 Emp_Name=s.getS31();
		    											    				 Gender=s.getS39();
		    											    				 Dob=s.getS40();
		    											    				 Father_Name=s.getS131();
		    											    				 Marital_Status=s.getS132();
		    											    				 Email_id=s.getS72();
		    											    				 Mobile_number=s.getS32();
		    											    				 Address=s.getS133();
		    											    				 Edu_qualifi=s.getS134();
		    											    				
		    											    				 User_name=s.getS135();
		    											    				 Access_Level=s.getS137();
		    											    				 Login_type=s.getS76();
		    											    				 Status=s.getS35();
		    											    				 Designation=s.getS36();
		    											    				 User_Level=s.getS34();
		    											    				 Muli_branch=s.getS77();
		    											    				 Subakalyan=s.getS78();
		    											    				 Transaction_Edit=s.getS79();
		    											    				 Category=s.getS138();
		    											    				 Joining_date=s.getS73();
		    											    				 Attachmentfile=s.getS74();
		    											    				 System.out.println("s.getS137()="+s.getS137()); 
		    											    				 System.out.println("s.getS76()="+s.getS76()); 
		    											    				 System.out.println("s.getS77()="+s.getS77()); 	
		    											    				 System.out.println("s.getS78()="+s.getS78()); 	
		    											    				 System.out.println("s.getS79()="+s.getS79()); 	
		    											    				 System.out.println("Access_Level="+Access_Level); 
		    											    				 System.out.println("Joining_date="+Joining_date); 
		    											    		 Attendance_Level=s.getS4();
		    											    		Attendance_Status=s.getS111();
		    											    		
		    											    		
		    											    		Communication_Address=s.getS245();
	   											    				 Father_Occu=s.getS246();
	   											    				 Mother_name=s.getS247();
	   											    				 Mother_Occ=s.getS248();
	   											    				 Place_birth=s.getS249();
	   											    				 Religion=s.getS250();
	   											    				 Caste=s.getS251();
	   											    				 Home_town=s.getS252();
	   											    				 Driving_licene=s.getS253();
	   											    				 Psport_no=s.getS254();
	   											    				 Cibil_score=s.getS255();
	   											    				 Cibil_date=s.getS256();
	   											    				 
	   											    				System.out.println("Communication_Address="+s.getS245()); 
	   											    				System.out.println("Father_Occupation="+s.getS246()); 
	   											    				System.out.println("Mother_name="+s.getS247()); 
	   											    				System.out.println("Mother_Occ="+s.getS248()); 
	   											    				System.out.println("Place_birth="+s.getS249()); 
	   											    				System.out.println("Religion="+s.getS250()); 
	   											    				System.out.println("Caste="+s.getS251()); 
	   											    				System.out.println("Home_town="+s.getS252()); 
	   											    				System.out.println("Driving_licene="+s.getS253()); 
	   											    				System.out.println("Psport_no="+s.getS254()); 
	   											    				System.out.println("Cibil_score="+s.getS255()); 
	   											    				System.out.println("Cibil_date="+s.getS256()); 

		    											    					
		    											    				System.out.println("Login_type="+Login_type); 
		    											    				System.out.println("Subakalyan="+Subakalyan); 
		    											    				System.out.println("Transaction_Edit="+Transaction_Edit); 
		    											    				
		    											    				 mp.put("Joining_date", Joining_date);
		    											    				 mp.put("Attachmentfile", Attachmentfile);
		    											    				 
		    											    				 em.setEmp_Id(Emp_Id);
		    											    				 em.setEmp_Name(Emp_Name);
		    											    			
		    											    				 mp.put("Emp_Id", Emp_Id);
		    											    				 mp.put("Emp_Name", Emp_Name);
		    											    				 
		    											    				 em.setGender(Gender);
		    											    				 
		    											    				 //mp.put("Gender", Gender);
		    											    				 
		    											    				 mp.put("Dob", Dob);
		    											    				 mp.put("Father_Name", Father_Name);
		    											    				 em.setFather_Name(Father_Name);
		    											    				 em.setDob(Dob);
		    											    				
		    											    				 em.setMarital_Status(Marital_Status);
		    											    				// mp.put("Marital_Status", Marital_Status);
		    											    				 
		    											    				 mp.put("Email_id", Email_id);
		    											    				 mp.put("Mobile_number", Mobile_number);
		    											    				 //mp.put("Address", Address);
		    											    				 em.setAddress(Address);
		    											    				 mp.put("Edu_qualifi", Edu_qualifi);
		    											    				 mp.put("User_name", User_name);
		    											    				 
		    											    				 em.setUser_name(User_name);
		    											    				 em.setEdu_qualifi(Edu_qualifi);
		    											    				 em.setMobile_number(Mobile_number);
		    											    				 em.setEmail_id(Email_id);
		    											    				 
		    											    				// mp.put("Access_Level", Access_Level);
		    											    				 em.setAccess_Level(Access_Level);
		    											    				 
		    											    				 //mp.put("Login_type", Login_type);
		    											    				 em.setLogin_type(Login_type);
		    											    				 
		    											    				// mp.put("Status", Status);
		    											    				 em.setStatus(Status);
		    											    				 
		    											    				 mp.put("Designation", Designation);
		    											    				 mp.put("User_Level", User_Level);
		    											    				 em.setUser_Level(User_Level);
		    											    				 em.setDesignation(Designation);
		    											    				//07-12-2022
		    											    				 em.setUser_Level(User_Level);
		    											    				 
		    											    				 //mp.put("Muli_branch", Muli_branch);
		    											    				 em.setMuli_branch(Muli_branch);
		    											    				 
		    											    				// mp.put("Subakalyan", Subakalyan);
		    											    				 System.out.println("Subakalyan---------------------"+Subakalyan);
		    											    				 em.setSubakalyan(Subakalyan);
		    											    				 
		    											    				 mp.put("Transaction_Edit", Transaction_Edit);
		    											    				 em.setTransaction_Edit(Transaction_Edit);
		    											    				
		    											    				 bcode=s.getS33();
		    											    				 if(bcode.equalsIgnoreCase("200"))
		    											    				 {
		    											    					 Btype="200-Corporate";
		    											    				 }
		    											    				 else
		    											    				 {
			    											    				 Btype=dao10.Get_ScalarFun("select to_char(Branch_Code||'-'||Branch_Name) from branch_Master where to_char(branch_code)='"+bcode+"'", 201);
	 
		    											    				 }
		    											    				 String ccode=s.getS119();
		    											    				if(ccode.equalsIgnoreCase("200"))
		    											    				 {
		    											    					 Ctype="200-Corporate";
		    											    				 }
		    											    				 else
		    											    				 {
			    											    				 Ctype=dao10.Get_ScalarFun("select to_char(Branch_Code||'-'||Branch_Name) from branch_Master where to_char(branch_code)='"+ccode+"'", 201);
	 
		    											    				 }
		    											    				 
		    											    				 
		    											    				 System.out.println("Attendance_Leve="+Attendance_Level);
		    											    				 System.out.println("Attendance_Status="+Attendance_Status);

		    											    				 mp.put("Attendance_Level", Attendance_Level);
		    											    				 mp.put("Attendance_Status", Attendance_Status);
		    											    				 em.setAttendance_Level(Attendance_Level);
		    											    				 em.setAttendance_Status(Attendance_Status);
		    											    				 
		    											    				 
		    											    				 em.setResign_Date(s.getS9());
		    											    				 em.setSus_From_Date(s.getS112());
		    											    				 em.setSus_To_Date(s.getS75());
		    											    				 
		    											    				 //04-03-2024
		    											    				 em.setMaternity_From_Date(s.getS113());
		    											    				 em.setMaternity_To_Date(s.getS114());
		    											    				 em.setRemarks(s.getS115());
		    											    				 
		    											    				 
		    											    				 
		    											    				//Corp Transaction
		    											    					String Corp_Transaction=null;
		    											    					Corp_Transaction=dao10.Get_ScalarFun("Select CORP_TRANSACTION from employee_Master where EMPID='"+Emp_Id+"'", 201);
		    											    					em.setCorpTransaction(Corp_Transaction);
		    											    			   //PermissionLevel
		    											    					String PermissionLevel=null;
		    											    					PermissionLevel=dao10.Get_ScalarFun("Select nvl(Permission_Type,'B') from employee_Master where EMPID='"+Emp_Id+"'", 201);
		    											    					em.setPermissionLevel(PermissionLevel);

		    											                
		    															
		    															String Branch_Type=em.getBranch_Type().substring(0, 3);
		    															System.out.println("Branch_Type="+Branch_Type);

		    														    String BName="All Branches";
		    															int Bcode = Integer.parseInt(Branch_Type);
		    															if(em.getBranch_Type().equalsIgnoreCase("300"))
		    															{
		    																Bcode=2;
		    															}
		    															else
		    																BName=em.getBranch_Type().substring(4);
		    																
		    															
		    															String Scheme_type=Status;
		    															
		    															System.out.println("Scheme_type="+Scheme_type);
		    														
		    															
		    																if(Scheme_type.equalsIgnoreCase("A"))
		    																	msg="Active";
		    																else if(Scheme_type.equalsIgnoreCase("C"))
		    																	msg="In Active";
		    																else if(Scheme_type.equalsIgnoreCase("M"))
		    																	msg="Maternity Leave";
		    																else if(Scheme_type.equalsIgnoreCase("S"))
		    																	msg="Suspended";
		    																else if(Scheme_type.equalsIgnoreCase("R"))
		    																	msg="Resigned";
		    																
		    																 
	    														             Last_Name=s.getS116();
	    														             Add_Mobile=s.getS238();
	    														             
	    														             Working_Status=s.getS234();
	    														             Working_Details=s.getS235();
	    														             
	    														             Aadhaar=s.getS239();
	    														             Pan=s.getS240();
	    														             
	    														             Bank_Acc_No=s.getS241();
	    														             Bank_Acc_Name=s.getS242();
	    														             Bank_IFSC=s.getS243();
	    														             Bank_Name=s.getS244();
	    														             
	    														             Promotion_Date=s.getS236();
	    														             Promotion_Details=s.getS237();
	    														             
		    											    			}
		    											                
		    															String Scheme_Code = "600";
		    															List <Simple> branchCode=dao10.getBranchCode();
		    															System.out.println("Branch_Code=getbranch");
		    															List<String> branchCodeList=new ArrayList<>();
		    															for(Simple s:branchCode)
		    															{
		    																String s3=s.getS1()+"-"+s.getS2();
		    																branchCodeList.add(s3);
		    																System.out.println(s3);  
		    																 
		    															}
		    															mp.put("BranchCodeList", branchCodeList);
		    												  				

		    															String Branch_Type="201";
		    															System.out.println("Branch_Type="+Branch_Type);

		    														    String BName="All Branches";
		    															int Bcode = Integer.parseInt(Branch_Type);
		    															/*if(em.getBranch_Type().equalsIgnoreCase("300"))
		    															{
		    																Bcode=2;
		    															}
		    															else
		    																BName=em.getBranch_Type().substring(4);
		    																
		    															
		    															String Scheme_type=em.getRemarks();
		    															
		    															System.out.println("Scheme_type="+Scheme_type);
		    															String msg="All ";
		    															String Status="All ";
		    															if(!Scheme_type.equalsIgnoreCase("600"))
		    															{
		    																Status=Scheme_type;
		    																
		    																if(Scheme_type.equalsIgnoreCase("A"))
		    																	msg="Active";
		    																else if(Scheme_type.equalsIgnoreCase("C"))
		    																	msg="In Active";
		    																else if(Scheme_type.equalsIgnoreCase("M"))
		    																	msg="Maternity Leave";
		    																else if(Scheme_type.equalsIgnoreCase("S"))
		    																	msg="Suspended";
		    																else if(Scheme_type.equalsIgnoreCase("R"))
		    																	msg="Resigned";
		    															}
		    															else
		    															{
		    																
		    																Status="%%";
		    															}*/
		    											            //  Status=BName+"-"+Status;
		    														
		    											          	System.out.println("Status="+Status);
		    															//String From_Date=em.getDob();
		    															//String To_Date=em.getJoining_Date();
		    															//System.out.println("inside control 2----------="+From_Date+" ="+Scheme_Code);
		    															String Sql_Final = null;
		    															

		    															//String Sql="select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS from employee_master where status like '%"+Status+"%' and current_branch like '%"+Bcode+"%' order by current_branch,empid";
		    															//String Sql="select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS,(select branch_name from branch_master where to_char(branch_code)=dbcode) as parent_Branch,(select branch_name from branch_master where to_char(branch_code)=current_branch) as Current_Branch_Name from employee_master where status like '%"+Status+"%' and current_branch like '%"+Bcode+"%' order by current_branch,empid";
		    															//String Sql="select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS,select case when dbcode='200' then 'Corporate' else (select branch_name from branch_master where to_char(branch_code)=employee_master.dbcode) end  as parent_Branch,case when dbcode='200' then 'Corporate' else (select branch_name from branch_master where to_char(branch_code)=current_branch) end as Current_Branch_Name from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid";
		    															String Sql="select a.*,case when a.DBCode='200' then 'Corporate' else b.Branch_Name end as ParentBranch,case when a.Current_Branch='200' then 'Corporate' else c.Branch_Name end as CurrentBranch from (select Empid,to_char(EMPNAME||' '||nvl(LAST_NAME,'')) as empname,mobile,EDU_QUALIFI,EMP_CATEGORY,DESIGNATION,dbcode ,current_branch,JOINING_DATE,STATUS from employee_master where status like '"+Status+"' and current_branch like '%"+Bcode+"%' order by current_branch,empid)a left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)b on a.DBCode=b.Branch_code left join (select to_char(Branch_code) as Branch_code,Branch_Name from branch_master)c on a.Current_Branch=c.Branch_code";


		    											//mmm  mmm  mmm mmm  mmm mmm mmm mmm  mmm mmm  
		    															//List<SimpleBranch> list1=null;
		    															
		    															//List<SimpleBranch> list3=null;
		    															//List<SimpleBranch> list2=null;
		    															
		    															System.out.println(Sql);
		    															
		    															List<SimpleBranch> list=null;
		    																//list = empDao.getEmpReport(Sql);
		    																			    				
		    																list = empDao.getEmpProfileReport(em.getEmp_Id());
		    													
		    															

		    														
		    															// Connecting to the SQL server database
		    																Connection conn = null;

		    																try {

		    																	// Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
		    																	// conn=DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Bank1","sa","pisquare123");
		    																	Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		    																	// conn=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","pisquare123");

		    																	// Loading Jasper Report File from Local file system

		    																	// String jrxmlFile =
		    																	// "C:/Users/Pisquare/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BenefitFund/kk1.jrxml";
		    																	// String jrxmlFile=request.getRealPath("Invoice1.jrxml");
		    																	// String jrxmlFile=request.getRealPath("Report1.jrxml");
		    																	// String jrxmlFile =
		    																	// session.getServletContext().getRealPath(request.getContextPath()+"/kk1.jrxml");

		    																	// String jrxmlFile=request.getRealPath("kk1.jrxml");
		    																	String jrxmlFile = request.getRealPath("Employee_Profile3.jrxml");
		    																		InputStream input = new FileInputStream(new File(jrxmlFile));

		    																	// String idDyn="101";
		    																	// int idDyn=Transfer_Acc_No;
		    																	// String StartDate=From_Date;
		    																	// String EndDate=To_Date;
		    																	// Map parameters = new HashMap();
		    																	// parameters=null;
		    																	// parameters.put("Accno",idDyn);
		    																	// parameters.put("StartDate",StartDate);
		    																	// parameters.put("EndDate",EndDate);

		    																	/* Convert List to JRBeanCollectionDataSource */
		    																	JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(
		    																			list);
		    																	/* Map to hold Jasper report Parameters */
		    																	Map<String, Object> parameters = new HashMap<String, Object>();
		    																	
		    																	
		    																	//------------Get Branch Details----------------------------------
	    														  	             String Branch_Name = null;
	    														  	             String Branch_Address = null;
	    														  	             String Branch_City = null;
	    														  	             String Branch_Pincode = null;
	    														  	             String Branch_Phone = null;
	    														  	             List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	    														  	             for(SimpleBranch sb:brInfo)
	    														  	             {
	    														  	            	Branch_Name=sb.getS2();
	    															    	            Branch_Address=sb.getS3();
	    															    	             Branch_City=sb.getS4();
	    															    	             Branch_Pincode=sb.getS5();
	    															    	             Branch_Phone=sb.getS6();
	    															    	             
	    															    	           }
		    															    	 String Filename2="Emp_Profile - "+Emp_Name+" "+Last_Name;

	    														  	             parameters.put("Branch_Name", Filename2);
	    														  	             parameters.put("Branch_Address", Branch_Address+","+Branch_City+","+Branch_Pincode+".");
	    														  	            // parameters.put("Branch_City", Branch_City);
	    														  	            // parameters.put("Branch_Pincode", Branch_Pincode);
	    														  	            // parameters.put("Branch_Phone", Branch_Phone);

	    														  	             System.out.println("Branch_Name"+Branch_Name);
	    														  	     


	    																	String realPath = request.getRealPath("/resources/Images/");
	    																	
	    																	parameters.put("realPath", realPath);

	    																	parameters.put("itemsJRBean", itemsJRBean);
	    																	 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

	    																	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    															    	String Current=sd.format(Current_Date);
	    															    	 String user_name=empDao.getEmployeeName(user);
	    																	
	    																	 //10-02-2023
	    														             parameters.put("user", user_name);
	    														             
	    														             
	    														            
	    														             parameters.put("Emp_Name", Emp_Name);
	    														             parameters.put("Last_Name", Last_Name);

	    														             parameters.put("Gender", Gender);
	    														             parameters.put("Dob", Dob);
	    														             parameters.put("Email_id", Email_id);
	    														             parameters.put("Mobile_no", Mobile_number);

	    														             parameters.put("Father_Name", Father_Name);
	    														             parameters.put("Add_Mobile", Add_Mobile);

	    														             parameters.put("Edu_qualify", Edu_qualifi);
	    														             parameters.put("Marital_Status", Marital_Status);

	    														             parameters.put("Working_Status", Working_Status);
	    														             parameters.put("Working_Details", Working_Details);

	    														             parameters.put("Address", Address);
	    														             parameters.put("Address2", Address);

	    														             parameters.put("Aadhaar", Aadhaar);
	    														             parameters.put("Pan", Pan);

	    														          System.out.println("Joining_Date="+Joining_date);   
	    														             parameters.put("Bank_Acc_No", Bank_Acc_No);
	    														             parameters.put("Bank_Acc_Name", Bank_Acc_Name);
	    														             parameters.put("Bank_IFSC", Bank_IFSC);
	    														             parameters.put("Bank_Name", Bank_Name);

	    														             parameters.put("Emp_Id", Emp_Id);
	    														             parameters.put("Designation", Designation);

	    														             parameters.put("Joining_date", Joining_date);
	    														             
	    														             parameters.put("Status", msg);

	    														            parameters.put("Branch_Type", Btype);
	    														             parameters.put("CBranch_Type", Ctype);

	    														             parameters.put("Promotion_Date", Promotion_Date);
	    														             parameters.put("Promotion_Details", Promotion_Details);
	    														             
	    														             parameters.put("Communication_Address", Communication_Address);
	    		  											    				
	    														             parameters.put("Father_Occupation", Father_Occu);
	    														             parameters.put("Mother_Name", Mother_name);
	    														             parameters.put("Mother_Occupation", Mother_Occ);
	    														             parameters.put("Place_birth", Place_birth);
	    														             parameters.put("Religion", Religion);
	    	   											    				
	    	   											    				// mp.put("Caste", Caste);
	    	   											    				// em.setCaste(Caste);
	    														             parameters.put("Caste", Caste);
	    	  											    				 
	    														             parameters.put("Home_Town", Home_town);
	    														             parameters.put("Driving_Licence", Driving_licene);
	    														             parameters.put("Passport_No", Psport_no);
	    														             parameters.put("Cibil_Score", Cibil_score);
	    														             parameters.put("Cibil_Date", Cibil_date);
	    	   											    					
	    														             
	    														             
	    														             String Image=null;
	    														             int j=201;
	    														             this.template=con.getCon2(j);
	    														             //--------------------------------

	    														             try{	Connection con=template.getDataSource().getConnection();

	    														             PreparedStatement ps=con.prepareStatement("select PHOTO from Employee_Master where empid='"+Emp_Id+"'");  
	    														             ResultSet rs=ps.executeQuery();  
	    														             if(rs.next()){//now on 1st row  
	    														                           
	    														             Blob b=rs.getBlob(1);//24 means 24nd column data  
	    														             if(b!=null)
	    														             {
	    														             byte barr[]=b.getBytes(1,(int)b.length());//1 means first image  


	    														             //String  realPath = request.getRealPath("/resources/images");
	    														             System.out.println("RealPath="+realPath);
	    														             mp.put("realPath", realPath);


	    														             String contextPath=request.getContextPath();
	    														             String storelocation=contextPath+"/resources/Images";
	    														             System.out.println("storelocation="+storelocation);   
	    														             System.out.println("storelocation="+storelocation);   
	    														             System.out.println("storelocation="+storelocation);   
	    														             //final String context = config.getServletContext().getRealPath("/");
	    														             String fileName=""+Emp_Id+".png";
	    														             mp.put("fileName", fileName);
	    														             mp.put("contextPath", contextPath);

	    														             FileOutputStream fout=new FileOutputStream(realPath+"/"+fileName);  
	    														             fout.write(barr);  
	    														                     


	    														             Image=realPath+"/"+fileName;
	    														             fout.close();  
	    														             }
	    														             }//end of if  
	    														             System.out.println("ok"); 
	    														             parameters.put("b", Image);
	    														                           
	    														             con.close();  
	    														             }catch (Exception e) {e.printStackTrace();  }  


		    																	JasperReport jasperReport = JasperCompileManager
		    																			.compileReport(input);
		    																	JasperPrint jasperPrint = JasperFillManager.fillReport(
		    																			jasperReport, parameters, new JREmptyDataSource());

		    																	// Exporting the report as a PDF

		    																	// JRExporter exporter = null;
		    																	// OutputStream ouputStream = response.getOutputStream();

		    																	// response.setContentType("application/pdf");
		    																	// exporter = new JRPdfExporter();
		    																	// exporter.setParameter(JRExporterParameter.JASPER_PRINT,
		    																	// jasperPrint);
		    																	// exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,
		    																	// ouputStream);
		    														//---------------------------------------------------------------------------------------------------------------------------------------------
		    																	//String filename = "JL_OD_Report";

		    																	//JasperExportManager.exportReportToPdfStream(jasperPrint,
		    																		//	response.getOutputStream());
		    																	//JasperExportManager.exportReportToPdfFile(jasperPrint,
		    																			//"f:/Reports/" + filename + ".pdf");
		    														//---------------------------------------------------------------------------------------------------------------------------------------------
		    																em.setFile_Type("1");
		    																	//String Filename2="Emp_Report";
		    															           String  reportPath = request.getRealPath("/");
		    															           if(em.getFile_Type().equalsIgnoreCase("1"))
		    															           {
		    															        	   JRExporter exporter2 = null;
		    															           		 ServletOutputStream ouputStream2 = response.getOutputStream();
		    															           		 
		    															           		 response.setContentType("application/pdf");
		    															           		 response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".pdf");
		    															                    exporter2 = new JRPdfExporter();
		    															                    exporter2.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".pdf");
		    															                    exporter2.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    															                    exporter2.exportReport();
		    															           }
		    															           else if(em.getFile_Type().equalsIgnoreCase("2"))
		    															           {
		    															        	   
		    																          
		    																           response.setContentType("application/xls");
		    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
		    																           JRXlsExporter exporter = new JRXlsExporter();
		    																           // JRXlsExporter exporter = new JRXlsExporter();
		    																            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    																            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
		    																            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

		    																            exporter.exportReport();
		    																    
		    															           }
		    															           else if(em.getFile_Type().equalsIgnoreCase("3"))
		    															           {
		    															        	   response.setContentType("application/docx");
		    																           response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".docx");
		    																           JRDocxExporter exporter3 = new JRDocxExporter();
		    																           exporter3.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
		    																           exporter3.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".docx");
		    																           exporter3.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		    																           exporter3.exportReport();
		    															           }
		    																	// JasperExportManager.exportReportToPdfStream(jasperPrint,
		    																	// response.getOutputStream());
		    																	// JasperExportManager.exportReportToHtmlFile(jasperPrint,
		    																	// "/report1.html");
		    																	// JasperViewer.viewReport(jasperPrint);
		    																	
		    															           
		    															          //------10-02-2023----------------------------------
		    													  			         String File_Type="";
		    													  				     if(em.getFile_Type().equalsIgnoreCase("1"))
		    													  				    	File_Type="PDF";
		    													  				    else if(em.getFile_Type().equalsIgnoreCase("2"))
		    													  				    	File_Type="EXCEL";
		    													  				    else if(em.getFile_Type().equalsIgnoreCase("3"))
		    													  					File_Type="DOCUMENT";
		    													  			        
		    													  	    //---------------------------------
		    												  			 
		    																	
		    																		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
		    																		dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('Employee Profile','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+"')", 201);


		    																	response.getOutputStream().flush();
		    																	response.getOutputStream().close();

		    																} catch (FileNotFoundException e) {
		    																	e.printStackTrace();
		    																} catch (JRException e) {
		    																	e.printStackTrace();
		    																} catch (ClassNotFoundException e) {
		    																	e.printStackTrace();
		    																} catch (InstantiationException e) {
		    																	// TODO Auto-generated catch block
		    																	e.printStackTrace();
		    																} catch (IllegalAccessException e) {
		    																	// TODO Auto-generated catch block
		    																	e.printStackTrace();
		    																} finally {
		    																	if (conn != null) {
		    																		try {
		    																			conn.close();
		    																		} catch (SQLException e) {
		    																			// TODO Auto-generated catch block
		    																			e.printStackTrace();
		    																		}
		    																	}
		    																}

		    														} 
		    													   
			    				 				    	  		 
			    				 				    	  		
			    				 				    	  		@RequestMapping(value = "/getGLReport", params ="Btn_GLTransaction_Report", method=RequestMethod.POST)
			    				 				    	  		  public void getGLTransactionReport_inGL(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
			    				 				    	  		  { 
			    				 				    	  		session=request.getSession();
			    				 				    	  		int DBCode=(int) session.getAttribute("Branch");

			    				 				    	  		System.out.println("con----------------------------");

			    				 				    	  		SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

			    				 				    	  			Date Current_Date=(Date) session.getAttribute("Current_Date");
			    				 				    	  			String sys=sd.format(Current_Date);


			    				 				    	  		String user=(String) session.getAttribute("user");
			    				 				    	  			
			    				 				    	  			String Branch_Name1="";
			    				 				    	  			String Scheme_name="";
			    				 				    	  			String Account_No="";
			    				 				    	  			String Customer_Name="";
			    				 				    	  			String Open_date="";
			    				 				    	  			String Loan_Amount="";
			    				 				    	  			String CB="";
			    				 				    	  			String pending_days="";
			    				 				    	  			String Interest_Upto="";
			    				 				    	  			String Arrear_Interest="";
			    				 				    	  			String From_Date=em.getDob();
			    				 				    	  			String To_Date=em.getJoining_Date();
			    				 				    	  			String GL_Code1=em.getGL_Code2().substring(0, 5);
			    				 				    	  			String BCode=em.getBranch_Type().substring(0, 3);
			    				 				    	  			String Branch=null;
			    				 				    	  			String GL_Code=null;
			    				 				    	  			
			    				 				    	  			String GL_Name="All";
			    				 				    	  			
			    				 				    	  			if(BCode.equalsIgnoreCase("200")){
			    				 				    	  				Branch="%";
			    				 				    	  			}
			    				 				    	  			else{
			    				 				    	  				Branch=BCode;
			    				 				    	  			}
			    				 				    	  			
			    				 				    	  			if(GL_Code1.equalsIgnoreCase("20000")){
			    				 				    	  				GL_Code="%";
			    				 				    	  				GL_Name="All";
			    				 				    	  			}
			    				 				    	  			else{
			    				 				    	  				GL_Code=GL_Code1;
			    				 				    	  				GL_Name=GL_Code1;
			    				 				    	  			}
			    				 				    	  			
			    				 				    	  			System.out.println("BCode--------------------------"+BCode);
			    				 				    	  			System.out.println("GL_Code--------------------------"+GL_Code);
			    				 				    	  			int Bcode=201;
			    				 				    	  		System.out.println("Inside controller---------------------------------------");
			    				 				    	  		   String BranchName="";      
			    				 				    	  		  

			    				 				    	  		Connection conn=null;
			    				 				    	  		try {

			    				 				    	  		  
			    				 				    	  		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			    				 				    	  		   
			    				 				    	  		        String jrxmlFile=null;

			    				 				    	  		        	 jrxmlFile=request.getRealPath("GL_Transaction_Report_xl.jrxml");
			    				 				    	  		        
			    				 				    	  		       // jrxmlFile=request.getRealPath("demo.jrxml");
			    				 				    	  		   InputStream input = new FileInputStream(new File(jrxmlFile));
			    				 				    	  		   
			    				 				    	  		   




			    				 				    	  		 	       	    	           
			    				 				    	  		  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
			    				 				    	  		   String Filename2=GL_Name+" Trans on "+To_Date;
			    				 				    	  		   

			    				 				    	  				 Map parameters = new HashMap();
			    				 				    	  			
			    				 				    	  		    System.out.println("Filename2--------------------------------"+Filename2);   

			    				 				    	  				String  realPath = request.getRealPath("/resources/images/");
			    				 				    	  				List<SimpleBranch> list=null;
			    				 				    	  				
			    				 				    	  			//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
			    				 				    	  				String Date2=To_Date;
			    				 				    	  				String Branch_Code=BranchName;
			    				 				    	  				//String sql="";
			    				 				    	  			 	
			    				 				    	  			// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
			    				 				    	  				if(GL_Code1.equalsIgnoreCase("20000")){
			    				 				    	  					list=empDao.getGL_Transaction_ReportAll(From_Date,To_Date,Branch,Bcode);
			    				 				    	  				}
			    				 				    	  				else{
			    				 				    	  				 list=empDao.getGL_Transaction_Report(From_Date,To_Date,GL_Code,Branch,Bcode);
			    				 				    	  				}
			    				 				    	  				
			    				 				    	  				
			    				 				    	  				
			    				 				    	  			 
			    				 				    	  			mp.put("list",list);
			    				 				    	  			JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
			    				 				    	  			
			    				 				    	  		      parameters.put("itemsJRBean", itemsJRBean); 
			    				 				    	  		  
			    				 				    	  		parameters.put("Heading", Filename2); 

			    				 				    	  		System.out.println("11111-----------------------");

			    				 				    	  		String Branch_Name = null;
			    				 				    	  		String Branch_Address = null;
			    				 				    	  		String Branch_City = null;
			    				 				    	  		String Branch_Pincode = null;
			    				 				    	  		String Branch_Phone = null;
			    				 				    	  		List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
			    				 				    	  		for(SimpleBranch sb:brInfo)
			    				 				    	  		{
			    				 				    	  		Branch_Name=sb.getS2();
			    				 				    	  		Branch_Address=sb.getS3();
			    				 				    	  		Branch_City=sb.getS4();
			    				 				    	  		Branch_Pincode=sb.getS5();
			    				 				    	  		Branch_Phone=sb.getS6();

			    				 				    	  		}
			    				 				    	  		System.out.println("222222222-----------------------");
			    				 				    	  		parameters.put("Branch_Name", Branch_Name);
			    				 				    	  		parameters.put("Branch_Address", Branch_Address);
			    				 				    	  		parameters.put("Branch_City", Branch_City);
			    				 				    	  		parameters.put("Branch_Pincode", Branch_Pincode);
			    				 				    	  		parameters.put("Branch_Phone", Branch_Phone);
			    				 				    	  		parameters.put("To_Date", To_Date);
			    				 				    	  		parameters.put("user", user);
			    				 				    	  		  JasperReport jasperReport = JasperCompileManager.compileReport(input);
			    				 				    	  		  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

			    				 				    	  		System.out.println("33333333333333-----------------------");
			    				 				    	  		 
			    				 				    	  		  String  reportPath = request.getRealPath("/");
			    				 				    	  		  parameters.put("To_Date", To_Date);
			    				 				    	  		parameters.put("From_Date", From_Date);
			    				 				    	  		System.out.println("4444444444-----------------------");   
			    				 				    	  		     
			    				 				    	  		      response.setContentType("application/xls");
			    				 				    	  		      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
			    				 				    	  		      JRXlsExporter exporter = new JRXlsExporter();
			    				 				    	  		      // JRXlsExporter exporter = new JRXlsExporter();
			    				 				    	  		       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			    				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
			    				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
			    				 				    	  		    exporter.setParameter(JRXlsAbstractExporterParameter.SHEET_NAMES, new String[] {Filename2,         "sheet three"});
			    				 				    	  		       exporter.exportReport();

			    				 				    	  		     System.out.println("5555555555555-----------------------");							       


			    				 				    	  		response.getOutputStream().flush();
			    				 				    	  		response.getOutputStream().close();



			    				 				    	  		//String user = (String) session.getAttribute("user");
			    				 				    	  			

			    				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
			    				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


			    				 				    	  		} catch (FileNotFoundException e) {
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("aa-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (JRException e) {
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("bb-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (ClassNotFoundException e) {
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("cc-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (InstantiationException e) {
			    				 				    	  		// TODO Auto-generated catch block
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("dd-----------------------"+e.getLocalizedMessage());
			    				 				    	  		} catch (IllegalAccessException e) {
			    				 				    	  		// TODO Auto-generated catch block
			    				 				    	  		e.printStackTrace();
			    				 				    	  		System.out.println("ee-----------------------"+e.getLocalizedMessage());
			    				 				    	  		}
			    				 				    	  		finally {
			    				 				    	  		if(conn!=null){
			    				 				    	  		  try {
			    				 				    	  			conn.close();
			    				 				    	  		} catch (SQLException e) {
			    				 				    	  			// TODO Auto-generated catch block
			    				 				    	  			e.printStackTrace();
			    				 				    	  			 System.out.println("ff-----------------------"+e.getLocalizedMessage());
			    				 				    	  		}
			    				 				    	  		}
			    				 				    	  		}
			    				 				    	  		  }
			    				 				    	  		
			    				 				    	  	 @RequestMapping(value = "/Value_Report")
		    				 				    	  			public String View_Value_Report(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
		    				 				    	  		    	///Session-------------------------------------------------------------
		    				 				    	  				 session=request.getSession();
		    				 				    	  					String user=(String) session.getAttribute("user");
		    				 				    	  					if(user==null)
		    				 				    	  					return  "Session_Popup";
		    				 				    	  			   //--------------------------------------------------------------------
		    				 				    	  					
		    				 				    	  					String fun_name="EOM Report";
		    				 								  			String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
		    				 								  	        String Operation_status=dao10.Get_ScalarFun(query, 201);
		    				 								  	 		 	if(!Operation_status.equalsIgnoreCase("Y"))
		    				 								  	 		 		return "/Report_Alert";
		    				 								  		
		    				 				    	  					
		    				 				    	  					
		    				 				    	  					String[] per1=perdao.GetPermission(user, "Recovery");
		    				 				    	  					
		    				 				    	  					
		    				 				    	  					 String View=null;
		    				 				    	  					 String Save=null;
		    				 				    	  					 String Update=null;
		    				 				    	  					 String Delete=null;
		    				 				    	  					 String Verify2=null;
		    				 				    	  					 String Verify3=null;
		    				 				    	  					 String Verify4=null;
		    				 				    	  					 String Verify5=null;
		    				 				    	  					 String Reports1=null;
		    				 				    	  					 String Button=null;
		    				 				    	  					 String Finger_Print=null;
		    				 				    	  							
		    				 				    	  					 
		    				 				    	  					 
		    				 				    	  					 View=per1[0];
		    				 				    	  					 Save=per1[1];
		    				 				    	  					 Update=per1[2];
		    				 				    	  					 Delete=per1[3];
		    				 				    	  					 Verify2=per1[4];
		    				 				    	  					 Verify3=per1[5];
		    				 				    	  					 Verify4=per1[6];
		    				 				    	  					 Verify5=per1[7];
		    				 				    	  					 Reports1=per1[8];
		    				 				    	  					 Button=per1[9];
		    				 				    	  					 Finger_Print=per1[10];
		    				 				    	  					
		    				 				    	  					 
		    				 				    	  					 System.out.println("View-------------------------"+View);
		    				 				    	  					 System.out.println("Save-------------------------"+Save);
		    				 				    	  					 System.out.println("Update-------------------------"+Update);
		    				 				    	  					 System.out.println("Delete-------------------------"+Delete);
		    				 				    	  					 System.out.println("Verify2-------------------------"+Verify2);
		    				 				    	  					 System.out.println("Verify3-------------------------"+Verify3);
		    				 				    	  					 System.out.println("Verify4-------------------------"+Verify4);
		    				 				    	  					 System.out.println("Verify5-------------------------"+Verify5);
		    				 				    	  					 System.out.println("Reports1-------------------------"+Reports1);
		    				 				    	  					 System.out.println("Button-------------------------"+Button);
		    				 				    	  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
		    				 				    	  					 
		    				 				    	  					 
		    				 				    	  					
		    				 				    	  					int btn_Verify=1;
		    				 				    	  					int btn_Save=1;
		    				 				    	  					int btn_Delete=1;
		    				 				    	  					
		    				 				    	  					if (View.equalsIgnoreCase("N"))
		    				 				    	  						return ("/Authorization"); 
		    				 				    	  					
		    				 				    	  					 List <Simple> branchCode=dao10.getBranchCode();
		    				 				    	  						System.out.println("Branch_Code=getbranch");
		    				 				    	  						List<String> branchCodeList=new ArrayList<>();
		    				 				    	  						for(Simple s:branchCode)
		    				 				    	  						{
		    				 				    	  							String s3=s.getS1()+"-"+s.getS2();
		    				 				    	  							branchCodeList.add(s3);
		    				 				    	  							System.out.println(s3);  
		    				 				    	  							 
		    				 				    	  						}
		    				 				    	  						mp.put("BranchCodeList", branchCodeList);
		    				 				    	  						
		    				 				    	  	                 Employee em = new Employee();
		    				 				    	  					 mp.put("Profit", em);
		    				 				    	  					 

		    				 				    	  					
		    				 				    	  				return  "value_report";
		    				 				    	  			}
		    				 				    	  		    
		    				 				    	  	  @RequestMapping(value = "/getValue_Report", params ="BTN_Value", method=RequestMethod.POST)
	    				 				    	  		  public void getValue_Report(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
	    				 				    	  		  { 
	    				 				    	  		session=request.getSession();
	    				 				    	  		int DBCode=(int) session.getAttribute("Branch");

	    				 				    	  		System.out.println("con----------------------------");

	    				 				    	  		SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

	    				 				    	  			Date Current_Date=(Date) session.getAttribute("Current_Date");
	    				 				    	  			String sys=sd.format(Current_Date);


	    				 				    	  		String user=(String) session.getAttribute("user");
	    				 				    	  			
	    				 				    	  			String Branch_Name1="";
	    				 				    	  			String Scheme_name="";
	    				 				    	  			String Account_No="";
	    				 				    	  			String Customer_Name="";
	    				 				    	  			String Open_date="";
	    				 				    	  			String Loan_Amount="";
	    				 				    	  			String CB="";
	    				 				    	  			String pending_days="";
	    				 				    	  			String Interest_Upto="";
	    				 				    	  			String Arrear_Interest="";
	    				 				    	  			String From_Date=em.getTxt_from_date();
	    				 				    	  			String To_Date=em.getTxt_to_date();
	    				 				    	  			//String GL_Code1=em.getGL_Code().substring(0, 5);
	    				 				    	  			String BCode=em.getBranch_Type().substring(0, 3);
	    				 				    	  			String Branch=null;
	    				 				    	  			String GL_Code=null;
	    				 				    	  			if(BCode.equalsIgnoreCase("200")){
	    				 				    	  				Branch="%";
	    				 				    	  			}
	    				 				    	  			else{
	    				 				    	  				Branch=BCode;
	    				 				    	  			}
	    				 				    	  			
	    				 				    	  					    				 				    	  			
	    				 				    	  			System.out.println("BCode--------------------------"+BCode);
	    				 				    	  			//System.out.println("GL_Code--------------------------"+GL_Code);
	    				 				    	  			int Bcode=201;
	    				 				    	  		System.out.println("Inside controller---------------------------------------");
	    				 				    	  		   String BranchName="";      
	    				 				    	  		  

	    				 				    	  		Connection conn=null;
	    				 				    	  		try {

	    				 				    	  		  
	    				 				    	  		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
	    				 				    	  		   
	    				 				    	  		        String jrxmlFile=null;

	    				 				    	  		        	 jrxmlFile=request.getRealPath("Value_Report_xl.jrxml");
	    				 				    	  		        
	    				 				    	  		       // jrxmlFile=request.getRealPath("demo.jrxml");
	    				 				    	  		   InputStream input = new FileInputStream(new File(jrxmlFile));
	    				 				    	  		   
	    				 				    	  		   




	    				 				    	  		 	       	    	           
	    				 				    	  		  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
	    				 				    	  		   String Filename2="Net Value Report as on "+To_Date;
	    				 				    	  		   

	    				 				    	  				 Map parameters = new HashMap();
	    				 				    	  			
	    				 				    	  		    System.out.println("Filename2--------------------------------"+Filename2);   

	    				 				    	  				String  realPath = request.getRealPath("/resources/images/");
	    				 				    	  				List<SimpleBranch> list=null;
	    				 				    	  				
	    				 				    	  			//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
	    				 				    	  				String Date2=To_Date;
	    				 				    	  				String Branch_Code=BranchName;
	    				 				    	  				//String sql="";
	    				 				    	  			 	
	    				 				    	  			// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
	    				 				    	  			/*	if(GL_Code1.equalsIgnoreCase("20000")){
	    				 				    	  					list=empDao.getGL_Transaction_ReportAll(From_Date,To_Date,Branch,Bcode);
	    				 				    	  				}
	    				 				    	  				else{
	    				 				    	  				 list=empDao.getGL_Transaction_Report(From_Date,To_Date,GL_Code,Branch,Bcode);
	    				 				    	  				*/
	    				 				    	  				
	    				 				    	  			 list=empDao.getValue_Report(Branch,From_Date,To_Date,Bcode);
	    				 				    	  				
	    				 				    	  				
	    				 				    	  			 
	    				 				    	  			mp.put("list",list);
	    				 				    	  			JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
	    				 				    	  			
	    				 				    	  		      parameters.put("itemsJRBean", itemsJRBean); 
	    				 				    	  		  
	    				 				    	  		parameters.put("Heading", Filename2); 

	    				 				    	  		System.out.println("11111-----------------------");

	    				 				    	  		String Branch_Name = null;
	    				 				    	  		String Branch_Address = null;
	    				 				    	  		String Branch_City = null;
	    				 				    	  		String Branch_Pincode = null;
	    				 				    	  		String Branch_Phone = null;
	    				 				    	  		List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
	    				 				    	  		for(SimpleBranch sb:brInfo)
	    				 				    	  		{
	    				 				    	  		Branch_Name=sb.getS2();
	    				 				    	  		Branch_Address=sb.getS3();
	    				 				    	  		Branch_City=sb.getS4();
	    				 				    	  		Branch_Pincode=sb.getS5();
	    				 				    	  		Branch_Phone=sb.getS6();

	    				 				    	  		}
	    				 				    	  		System.out.println("222222222-----------------------");
	    				 				    	  		parameters.put("Branch_Name", Branch_Name);
	    				 				    	  		parameters.put("Branch_Address", Branch_Address);
	    				 				    	  		parameters.put("Branch_City", Branch_City);
	    				 				    	  		parameters.put("Branch_Pincode", Branch_Pincode);
	    				 				    	  		parameters.put("Branch_Phone", Branch_Phone);
	    				 				    	  		parameters.put("To_Date", To_Date);
	    				 				    	  		parameters.put("user", user);
	    				 				    	  		  JasperReport jasperReport = JasperCompileManager.compileReport(input);
	    				 				    	  		  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

	    				 				    	  		System.out.println("33333333333333-----------------------");
	    				 				    	  		 
	    				 				    	  		  String  reportPath = request.getRealPath("/");
	    				 				    	  		  parameters.put("To_Date", To_Date);
	    				 				    	  		parameters.put("From_Date", From_Date);
	    				 				    	  		System.out.println("4444444444-----------------------");   
	    				 				    	  		     
	    				 				    	  		      response.setContentType("application/xls");
	    				 				    	  		      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
	    				 				    	  		      JRXlsExporter exporter = new JRXlsExporter();
	    				 				    	  		      // JRXlsExporter exporter = new JRXlsExporter();
	    				 				    	  		       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
	    				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
	    				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

	    				 				    	  		       exporter.exportReport();

	    				 				    	  		     System.out.println("5555555555555-----------------------");							       


	    				 				    	  		response.getOutputStream().flush();
	    				 				    	  		response.getOutputStream().close();



	    				 				    	  		//String user = (String) session.getAttribute("user");
	    				 				    	  			

	    				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
	    				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


	    				 				    	  		} catch (FileNotFoundException e) {
	    				 				    	  		e.printStackTrace();
	    				 				    	  		System.out.println("aa-----------------------"+e.getLocalizedMessage());
	    				 				    	  		} catch (JRException e) {
	    				 				    	  		e.printStackTrace();
	    				 				    	  		System.out.println("bb-----------------------"+e.getLocalizedMessage());
	    				 				    	  		} catch (ClassNotFoundException e) {
	    				 				    	  		e.printStackTrace();
	    				 				    	  		System.out.println("cc-----------------------"+e.getLocalizedMessage());
	    				 				    	  		} catch (InstantiationException e) {
	    				 				    	  		// TODO Auto-generated catch block
	    				 				    	  		e.printStackTrace();
	    				 				    	  		System.out.println("dd-----------------------"+e.getLocalizedMessage());
	    				 				    	  		} catch (IllegalAccessException e) {
	    				 				    	  		// TODO Auto-generated catch block
	    				 				    	  		e.printStackTrace();
	    				 				    	  		System.out.println("ee-----------------------"+e.getLocalizedMessage());
	    				 				    	  		}
	    				 				    	  		finally {
	    				 				    	  		if(conn!=null){
	    				 				    	  		  try {
	    				 				    	  			conn.close();
	    				 				    	  		} catch (SQLException e) {
	    				 				    	  			// TODO Auto-generated catch block
	    				 				    	  			e.printStackTrace();
	    				 				    	  			 System.out.println("ff-----------------------"+e.getLocalizedMessage());
	    				 				    	  		}
	    				 				    	  		}
	    				 				    	  		}
	    				 				    	  		  }


		    				 				    	  	  
		    				 				    	  	  
		    				 				    		 @RequestMapping(value = "/SearchEmployee_List",params = "Inactive",method=RequestMethod.POST)
	    					 				    	 		public String searchEmployeeMaster_InActive(@ModelAttribute("Employee2") Employee em,BindingResult result,Map<String,Object> model,ModelMap mp,HttpSession session,HttpServletRequest request)throws Exception{

	    					 				    	    	
	    					 				    	   	    session=request.getSession();
	    					 				    			String user=(String) session.getAttribute("user");
	    					 				    			if(user==null)
	    					 				    				 return ("Session"); 
	    					 				    			
	    					 				    			 int DBCode=(int) session.getAttribute("Branch");
	    					 				    			 
	    					 				    			 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
	    					 				    		    	
	    					 				    		    	
	    					 				    		    	
	    					 				    		    	Date Current_Date=(Date) session.getAttribute("Current_Date");
	    					 				    		    	String Current=sd.format(Current_Date);

	    					 				    		    	
	    					 				    		    	/*String[] per1=perdao.GetPermission(user, "MS");
	    					 				    				
	    					 				    				 String View=null;
	    					 				    				 String Save=null;
	    					 				    				 String Update=null;
	    					 				    				 String Delete=null;
	    					 				    				 String Verify2=null;
	    					 				    				 String Verify3=null;
	    					 				    				 String Verify4=null;
	    					 				    				 String Verify5=null;
	    					 				    				 String Reports1=null;
	    					 				    				 String Button=null;
	    					 				    				 String Finger_Print=null;
	    					 				    						
	    					 				    				 
	    					 				    				 
	    					 				    				 View=per1[0];
	    					 				    				 Save=per1[1];
	    					 				    				 Update=per1[2];
	    					 				    				 Delete=per1[3];
	    					 				    				 Verify2=per1[4];
	    					 				    				 Verify3=per1[5];
	    					 				    				 Verify4=per1[6];
	    					 				    				 Verify5=per1[7];
	    					 				    				 Reports1=per1[8];
	    					 				    				 Button=per1[9];
	    					 				    				 Finger_Print=per1[10];
	    					 				    				
	    					 				    				 int btn_Delete=1;
	    					 				    				 int btn_Save=1;
	    					 				    				 int btn_Update=1;
	    					 				    				 
	    					 				    				 System.out.println("View-------------------------"+View);
	    					 				    				 System.out.println("Save-------------------------"+Save);
	    					 				    				 System.out.println("Update-------------------------"+Update);
	    					 				    				 System.out.println("Delete-------------------------"+Delete);
	    					 				    				 System.out.println("Verify2-------------------------"+Verify2);
	    					 				    				 System.out.println("Verify3-------------------------"+Verify3);
	    					 				    				 System.out.println("Verify4-------------------------"+Verify4);
	    					 				    				 System.out.println("Verify5-------------------------"+Verify5);
	    					 				    				 System.out.println("Reports1-------------------------"+Reports1);
	    					 				    				 System.out.println("Button-------------------------"+Button);
	    					 				    				 System.out.println("Finger_Print-------------------------"+Finger_Print);
	    					 				    				 
	    					 				    				 if (View.equalsIgnoreCase("N"))
	    					 				    						return "/Authorization";

	    					 				    				
	    					 				    				 if (Delete.equalsIgnoreCase("N"))	
	    					 				    					 btn_Delete = 2;
	    					 				    				 
	    					 				    				 if (Save.equalsIgnoreCase("N"))	
	    					 				    					 btn_Save = 2;
	    					 				    				 
	    					 				    				 if (Update.equalsIgnoreCase("N"))	
	    					 				    					 btn_Update = 2;
	    					 				    				
	    					 				    				 System.out.println("btn_Verify-------------"+btn_Delete);
	    					 				    				  String DeleteFlag=null;
	    					 				    				  String updateFlag=null;
	    					 				    				  String saveFlag=null;
	    					 				    				 if(btn_Delete==2)
	    					 				    				    {
	    					 				    					 DeleteFlag="Display:none;";
	    					 				    					 System.out.println("1111111111111111111111");
	    					 				    				    }
	    					 				    				 mp.put("deletDisplay", DeleteFlag);
	    					 				    				 
	    					 				    				 if(btn_Update==2)
	    					 				    				    {
	    					 				    					 updateFlag="Display:none;";
	    					 				    					 System.out.println("1111111111111111111111");
	    					 				    				    }
	    					 				    				 if(btn_Save==2)
	    					 				    				    {
	    					 				    					 saveFlag="Display:none;";
	    					 				    					 System.out.println("1111111111111111111111");
	    					 				    				    }
	    					 				    				mp.put("UpdateDisplay", updateFlag);
	    					 				    				
	    					 				    				*/
	    					 				    		    	
	    					 				    		   

	    					 				    				 mp.put("Employee2", em);
	    					 				    				
	    					 				    				  
	    					 				    				
	    					 				    				// mp.put("SaveDisplay", saveFlag);
	    					 				    				 
	    					 				    				 String Emp_Id=em.getEmp_Id();
	    					 				    				 
	    					 				    				 List<SimpleBranch> list=empDao.searchEmployee_List_InActive(Emp_Id,em.getRemarks(), 201);
	    					 				    			    	
	    					 				    				 System.out.println("size-----------------------"+list.size());
	    					 				    			    	if(list.size()!=0)
	    					 				    			    	{
	    					 				    			    		mp.put("NoOfRecords", list.size());
	    					 				    			    		System.out.println("size22222222-----------------------"+list.size());
	    					 				    			    	}
	    					 				    			    	else
	    					 				    			    	{
	    					 				    			    		mp.put("NoOfRecords", 0);
	    					 				    			    		System.out.println("size1111111111-----------------------");
	    					 				    			    	}
	    					 				    			    	
	    					 				    			 		model.put("list",list);
	    					 				    			 		
	    					 				    			 		
	    					 				    			 		int page=1;
	    					 				    					
	    					 				    					
	    					 				    			 	    PagedListHolder<SimpleBranch> pagedListHolder = new PagedListHolder<>(list);
	    					 				    			        pagedListHolder.setPageSize(10);
	    					 				    			        mp.put("maxPages", pagedListHolder.getPageCount());
	    					 				    			        int n= pagedListHolder.getPageCount();
	    					 				    			        
	    					 				    			        if(page <= pagedListHolder.getPageCount()) {
	    					 				    			            pagedListHolder.setPage(page-1);
	    					 				    			            mp.put("list", pagedListHolder.getPageList());
	    					 				    			        }
	    					 				    					 
	    					 				    			        int minPages=1;
	    					 				    			 		int maxPages=n;
	    					 				    			 		
	    					 				    			 		
	    					 				    			 		
	    					 				    			 		minPages=page/10;
	    					 				    			 		if(minPages==0)
	    					 				    			 		{
	    					 				    			 			minPages=1;
	    					 				    			 			int i=minPages+20;
	    					 				    			 			if(i>n)
	    					 				    			 			maxPages=n;
	    					 				    			 			else
	    					 				    			 				maxPages=i;
	    					 				    			 		}
	    					 				    			 		else
	    					 				    			 		{
	    					 				    			 			minPages=minPages*10;
	    					 				    			 			int i=minPages+20;
	    					 				    			 			if(i>n)
	    					 				    			 			maxPages=n;
	    					 				    			 			else
	    					 				    			 				maxPages=i;
	    					 				    			 		}
	    					 				    			        System.out.println("NoOfPages="+n);
	    					 				    			        
	    					 				    			        mp.put("minPages",minPages);
	    					 				    			        mp.put("maxPages",maxPages);
	    					 				    					
	    					 				    					mp.put("page", page);
	    					 				    					
	    					 				    					int getOverall =dao20.Get_ScalarINT("select nvl(count(*),0) from employee_master where status is not null", 201);
	    					 				    					//	int getActive =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y'", 201);
	    					 				    						int getActive =dao20.Get_ScalarINT("select count(*) from employee_master where status in ('A','M')", 201);
	    					 				    						//int getBranchOnly =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')", 201);
	    					 				    						int getBranchOnly =dao20.Get_ScalarINT("select count(*) from employee_master where user_name in (select username from login_details WHERE enable='Y' and username not in (select username from logindetails WHERE value !='B')) and Access_level ='B'", 201);

	    					 				    						
	    					 				    						int getBranchandCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from login_details WHERE enable='Y' and username  in (select username from logindetails WHERE value !='B')", 201);

	    					 				    						
	    					 				    						int getCorp =dao20.Get_ScalarINT("select nvl(count(*),0) from logindetails WHERE value !='B' and username  not in (select username from login_details WHERE enable='Y')", 201);
	    					 				    						
	    					 				    						mp.put("OverAll", getOverall);
	    					 				    						mp.put("ActiveAll", getActive);
	    					 				    						mp.put("Active", getBranchOnly);
	    					 				    						mp.put("Corporate", getActive-getBranchOnly);
	    					 				    				
	    					 				    					//Search Info
		    														 session.removeAttribute("Search_EmpInfo");
		    														 
		    													 session.setAttribute("Search_EmpInfo",em);
		    												            	mp.addAttribute("Search_EmpInfo",em);
		    												            	
		    												          Employee em1= ( Employee)	session.getAttribute("Search_EmpInfo");
System.out.println("from session: "+em.getEmp_Id());

	    					 				    				 return "Employee_List";  
	    					 				    	    }
	    					 				    	  		 

		    				 				    		 
		    				 				    		 
		    				 				    		 @RequestMapping("/CheckEmpPhoto.htm")
		    				 			    			@ResponseBody
		    				 			    	 		 public String getuser_name_CheckEmpPhoto(@RequestParam String User_name,HttpServletRequest request, HttpServletResponse response,@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpSession session,Model m)throws Exception
		    				 			    	  		{
		    				 			    	  		 
		    				 			    	    
		    				 			    	  		 String user_name=User_name;
		    				 			    	     		 
		    				 			    	     		 session=request.getSession();
		    				 			    	   			String user=(String) session.getAttribute("user");
		    				 			    	   			if(user==null)
		    				 			    	   				 return ("Session");  
		    				 			    	      	//-----------------------------------------------------GetPermission-------------------------------------

		    				 			    	   		session=request.getSession();
		    				 			    	   		
		    				 			    	   		System.out.println("user_name-------------------------"+user_name);
		    				 			   			String query = "select count(*) from Employee_Master where photo is not null and empid='"+User_name+"'";
                                                  int i=   dao20.Get_ScalarINT(query, 201);
		    				 			    	   		
		    				 			    	   		 
		    				 			    	   		System.out.println("i="+i);

		    				 			    	          String res = ""+i;
		    				 			    	  		   
		    				 			    	  		
		    				 			    	  		  return res;
		    				 			    	  		 }
		    				 				    		 
		    				 				    		 
		    				 				    		 
		    				 				    	  	  
		    				 				    	  	 @RequestMapping("/SMS_Provider")
    							 				   		 public ModelAndView viewSMS_Provider(HttpServletRequest request,HttpSession session,Map<String,Object> model,ModelMap mp) throws SQLException
    							 				   		 {  
    							 				   			session=request.getSession();
    							 				   			
    							 				   			 session=request.getSession();
    							 				   				String user=(String) session.getAttribute("user");
    							 				   				if(user==null)
    							 				   				return  new ModelAndView("Session");
    							 				   		   //--------------------------------------------------------------------
    							 				   			 int DBCode=(int) session.getAttribute("Branch");

    							 				   			//-----------------------------------------------------GetPermission-------------------------------------

    							 				   				session=request.getSession();
    							 				   				//request.getSession().setMaxInactiveInterval(40);
    							 				   				
    							 				   				// user=(String) session.getAttribute("user"); 
    							 				   				
    							 				   				session=request.getSession();
    							 				   				
    							 				   				String[] per1=perdao.GetPermission(user, "HR");
    							 				   				
    							 				   				 String View=null;
    							 				   				 String Save=null;
    							 				   				 String Update=null;
    							 				   				 String Delete=null;
    							 				   				 String Verify2=null;
    							 				   				 String Verify3=null;
    							 				   				 String Verify4=null;
    							 				   				 String Verify5=null;
    							 				   				 String Reports1=null;
    							 				   				 String Button=null;
    							 				   				 String Finger_Print=null;
    							 				   						
    							 				   				 
    							 				   				 
    							 				   				 View=per1[0];
    							 				   				 Save=per1[1];
    							 				   				 Update=per1[2];
    							 				   				 Delete=per1[3];
    							 				   				 Verify2=per1[4];
    							 				   				 Verify3=per1[5];
    							 				   				 Verify4=per1[6];
    							 				   				 Verify5=per1[7];
    							 				   				 Reports1=per1[8];
    							 				   				 Button=per1[9];
    							 				   				 Finger_Print=per1[10];
    							 				   				
    							 				   				 int btn_Delete=1;
    							 				   				 int btn_Save=1;
    							 				   				 int btn_Update=1;
    							 				   				 
    							 				   				 System.out.println("View-------------------------"+View);
    							 				   				 System.out.println("Save-------------------------"+Save);
    							 				   				 System.out.println("Update-------------------------"+Update);
    							 				   				 System.out.println("Delete-------------------------"+Delete);
    							 				   				 System.out.println("Verify2-------------------------"+Verify2);
    							 				   				 System.out.println("Verify3-------------------------"+Verify3);
    							 				   				 System.out.println("Verify4-------------------------"+Verify4);
    							 				   				 System.out.println("Verify5-------------------------"+Verify5);
    							 				   				 System.out.println("Reports1-------------------------"+Reports1);
    							 				   				 System.out.println("Button-------------------------"+Button);
    							 				   				 System.out.println("Finger_Print-------------------------"+Finger_Print);
    							 				   				 
    							 				   				 if (View.equalsIgnoreCase("N"))
    							 				   						return new ModelAndView("/Authorization");

    							 				   				
    							 				   				 if (Delete.equalsIgnoreCase("N"))	
    							 				   					 btn_Delete = 2;
    							 				   				 
    							 				   				 if (Save.equalsIgnoreCase("N"))	
    							 				   					 btn_Save = 2;
    							 				   				 
    							 				   				 if (Update.equalsIgnoreCase("N"))	
    							 				   					 btn_Update = 2;
    							 				   				
    							 				   				 System.out.println("btn_Verify-------------"+btn_Delete);
    							 				   				  String DeleteFlag=null;
    							 				   				  String SaveFlag=null;
    							 				   				 if(btn_Delete==2)
    							 				   				    {
    							 				   					 DeleteFlag="Display:none;";
    							 				   					 System.out.println("1111111111111111111111");
    							 				   				    }
    							 				   				 
    							 				   				 if(btn_Save==2)
    							 				   				    {
    							 				   					 SaveFlag="Display:none;";
    							 				   					 System.out.println("1111111111111111111111");
    							 				   				    }
    							 				   				mp.put("SaveDisplay", SaveFlag);
    							 				   				
    							 				   				
    							 				 	          
    							 				    			List <SimpleBranch> branchCode=empDao.GetSMS_ProviderList();
    							 				    			System.out.println("Branch_Code=getbranch");
    							 				    			List<String> branchCodeList=new ArrayList<>();
    							 				    			for(SimpleBranch s:branchCode)
    							 				    			{
    							 				    				String s3=s.getS2()+"-"+s.getS3();
    							 				    				branchCodeList.add(s3);
    							 				    				System.out.println(s3);  
    							 				    				System.out.println("branchCodeList--------------------"+s3);
    							 				    			}
    							 				    			
    							 				    			//---------------------------------------------
    							 				         		
    							 				         		
    							 				         		mp.put("BranchCodeList", branchCodeList);
    							 				   				
    							 				   				 Employee em = new Employee();
    							 				   				 mp.put("SMS_Provider", em);
    							 				   				 
    							 				   		 

    							 				   			
    							 				   			if(branchCode.size()!=0)
    							 				   			{
    							 				   				mp.put("NoOfRecords", branchCode.size());
    							 				   			}
    							 				   			else
    							 				   			{
    							 				   				mp.put("NoOfRecords", 0);
    							 				   			}
    							 				   			mp.put("SimpleList", branchCode);
    							 				   			
    							 				   			
    							 				   			return new ModelAndView("SMS_Provider");
    							 				   	  } 
    							 				   		
    							 				   		
    							 				   	  @RequestMapping(value="/saveSMS_Provider",method = RequestMethod.POST)  
    							 				   	    public ModelAndView saveSMS_Provider(HttpServletRequest request,HttpSession session,@ModelAttribute("Employee3") Employee il,Map<String,Object> model,ModelMap mp)
    							 				   	    {  
    							 				   		 session=request.getSession();
    							 				   		 int DBCode=(int) session.getAttribute("Branch");

    							 				   		

    							 				   	    		 
    							 				   		 		empDao.saveCategory(il,DBCode);
    							 				   		 		mp.put("message", "Records Successfully Added");
    							 				   		 		
    							 				   		 		List<Simple> list=empDao.getCategory(DBCode);
    							 				   				mp.put("SimpleList", list);
    							 				   				return new ModelAndView("SMS_Provider");
    							 				   	    	}
    							 				   	  
    							 				   	  
    							 				   	@RequestMapping(value = "/Tareget_Consolidated_Report")
				 				    	  			public String View_Tareget_Consolidated(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
				 				    	  		    	///Session-------------------------------------------------------------
				 				    	  				 session=request.getSession();
				 				    	  					String user=(String) session.getAttribute("user");
				 				    	  					if(user==null)
				 				    	  					return  "Session_Popup";
				 				    	  			   //--------------------------------------------------------------------
				 				    	  					
				 				    	  					
				 				    	  				//--------------------------------------------------------------------
				 				    	  					String fun_name="EOM Report";
				 				    	  					String query = "select nvl(FUNCTION_STATUS,'N')  from Operation_Status where FUN_NAME='"+fun_name+"'";
				 				    	  	                String Operation_status=dao10.Get_ScalarFun(query, 201);
				 				    	  			 		 	if(!Operation_status.equalsIgnoreCase("Y"))
				 				    	  			 		 		return "/Report_Alert";
				 				    	  			 	//---------------------------------------
				 				    	  					
				 				    	  					String[] per1=perdao.GetPermission(user, "Recovery");
				 				    	  					
				 				    	  					
				 				    	  					 String View=null;
				 				    	  					 String Save=null;
				 				    	  					 String Update=null;
				 				    	  					 String Delete=null;
				 				    	  					 String Verify2=null;
				 				    	  					 String Verify3=null;
				 				    	  					 String Verify4=null;
				 				    	  					 String Verify5=null;
				 				    	  					 String Reports1=null;
				 				    	  					 String Button=null;
				 				    	  					 String Finger_Print=null;
				 				    	  							
				 				    	  					 
				 				    	  					 
				 				    	  					 View=per1[0];
				 				    	  					 Save=per1[1];
				 				    	  					 Update=per1[2];
				 				    	  					 Delete=per1[3];
				 				    	  					 Verify2=per1[4];
				 				    	  					 Verify3=per1[5];
				 				    	  					 Verify4=per1[6];
				 				    	  					 Verify5=per1[7];
				 				    	  					 Reports1=per1[8];
				 				    	  					 Button=per1[9];
				 				    	  					 Finger_Print=per1[10];
				 				    	  					
				 				    	  					 
				 				    	  					 System.out.println("View-------------------------"+View);
				 				    	  					 System.out.println("Save-------------------------"+Save);
				 				    	  					 System.out.println("Update-------------------------"+Update);
				 				    	  					 System.out.println("Delete-------------------------"+Delete);
				 				    	  					 System.out.println("Verify2-------------------------"+Verify2);
				 				    	  					 System.out.println("Verify3-------------------------"+Verify3);
				 				    	  					 System.out.println("Verify4-------------------------"+Verify4);
				 				    	  					 System.out.println("Verify5-------------------------"+Verify5);
				 				    	  					 System.out.println("Reports1-------------------------"+Reports1);
				 				    	  					 System.out.println("Button-------------------------"+Button);
				 				    	  					 System.out.println("Finger_Print-------------------------"+Finger_Print);
				 				    	  					 
				 				    	  					 
				 				    	  					
				 				    	  					int btn_Verify=1;
				 				    	  					int btn_Save=1;
				 				    	  					int btn_Delete=1;
				 				    	  					
				 				    	  					if (View.equalsIgnoreCase("N"))
				 				    	  						return ("/Authorization"); 
				 				    	  					
				 				    	  					 List <Simple> branchCode=dao10.getBranchCode();
				 				    	  						System.out.println("Branch_Code=getbranch");
				 				    	  						List<String> branchCodeList=new ArrayList<>();
				 				    	  						for(Simple s:branchCode)
				 				    	  						{
				 				    	  							String s3=s.getS1()+"-"+s.getS2();
				 				    	  							branchCodeList.add(s3);
				 				    	  							System.out.println(s3);  
				 				    	  							 
				 				    	  						}
				 				    	  						mp.put("BranchCodeList", branchCodeList);
				 				    	  						
				 				    	  	                 Employee em = new Employee();
				 				    	  					 mp.put("Profit", em);
				 				    	  					 

				 				    	  					
				 				    	  				return  "Target_consolidated_report";
				 				    	  			}
    				 				    		 
    				 				    		 
    				 				    		 @RequestMapping(value = "/getTarget_Consolidated_Report", params ="BTN_Deposit_Target", method=RequestMethod.POST)
				 				    	  		  public void getTarget_Consolidated_Report(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
				 				    	  		  { 
				 				    	  		session=request.getSession();
				 				    	  		int DBCode=(int) session.getAttribute("Branch");

				 				    	  		System.out.println("con----------------------------");

				 				    	  		SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

				 				    	  			Date Current_Date=(Date) session.getAttribute("Current_Date");
				 				    	  			String sys=sd.format(Current_Date);


				 				    	  		String user=(String) session.getAttribute("user");
				 				    	  			
				 				    	  			String Branch_Name1="";
				 				    	  			String Scheme_name="";
				 				    	  			String Account_No="";
				 				    	  			String Customer_Name="";
				 				    	  			String Open_date="";
				 				    	  			String Loan_Amount="";
				 				    	  			String CB="";
				 				    	  			String pending_days="";
				 				    	  			String Interest_Upto="";
				 				    	  			String Arrear_Interest="";
				 				    	  			String From_Date=em.getTxt_from_date();
				 				    	  			String To_Date=em.getTxt_to_date();
				 				    	  			//String GL_Code1=em.getGL_Code().substring(0, 5);
				 				    	  			String BCode=em.getBranch_Type().substring(0, 3);
				 				    	  			String Branch=null;
				 				    	  			String GL_Code=null;
				 				    	  			if(BCode.equalsIgnoreCase("200")){
				 				    	  				Branch="%";
				 				    	  			}
				 				    	  			else{
				 				    	  				Branch=BCode;
				 				    	  			}
				 				    	  			
				 				    	  					    				 				    	  			
				 				    	  			System.out.println("BCode--------------------------"+BCode);
				 				    	  			//System.out.println("GL_Code--------------------------"+GL_Code);
				 				    	  			int Bcode=201;
				 				    	  		System.out.println("Inside controller---------------------------------------");
				 				    	  		   String BranchName="";      
				 				    	  		  

				 				    	  		Connection conn=null;
				 				    	  		try {

				 				    	  		  
				 				    	  		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				 				    	  		   
				 				    	  		        String jrxmlFile=null;

				 				    	  		        	 jrxmlFile=request.getRealPath("Target_Depoit_Report_xl.jrxml");
				 				    	  		        
				 				    	  		       // jrxmlFile=request.getRealPath("demo.jrxml");
				 				    	  		   InputStream input = new FileInputStream(new File(jrxmlFile));
				 				    	  		   
				 				    	  		   




				 				    	  		 	       	    	           
				 				    	  		  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
				 				    	  		   String Filename2="Target Deposit Report between "+From_Date+" - "+To_Date;
				 				    	  		   

				 				    	  				 Map parameters = new HashMap();
				 				    	  			
				 				    	  		    System.out.println("Filename2--------------------------------"+Filename2);   

				 				    	  				String  realPath = request.getRealPath("/resources/images/");
				 				    	  				List<SimpleBranch> list=null;
				 				    	  				
				 				    	  			//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
				 				    	  				String Date2=To_Date;
				 				    	  				String Branch_Code=BranchName;
				 				    	  				//String sql="";
				 				    	  			 	
				 				    	  			// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
				 				    	  			/*	if(GL_Code1.equalsIgnoreCase("20000")){
				 				    	  					list=empDao.getGL_Transaction_ReportAll(From_Date,To_Date,Branch,Bcode);
				 				    	  				}
				 				    	  				else{
				 				    	  				 list=empDao.getGL_Transaction_Report(From_Date,To_Date,GL_Code,Branch,Bcode);
				 				    	  				*/
				 				    	  				SimpleDateFormat sd1=new SimpleDateFormat("MM/dd/yyyy");
				 				    	  	 			String Current1= sd1.format(Current_Date);
				 				    	  				
				 				    	  				String str[] = Current1.split("/");
				 					 	       		    int month = Integer.parseInt(str[0]);
				 					 	       		    int day = Integer.parseInt(str[1]);
				 					 	       	  int year = Integer.parseInt(str[2]);
				 				    	  				
				 				    	  			 list=empDao.Get_Staff_Performance_Branch(Branch,From_Date,To_Date,month,year,Bcode);
				 				    	  				
				 				    	  				
				 				    	  			 
				 				    	  			mp.put("list",list);
				 				    	  			JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
				 				    	  			
				 				    	  		      parameters.put("itemsJRBean", itemsJRBean); 
				 				    	  		  
				 				    	  		parameters.put("Heading", Filename2); 

				 				    	  		System.out.println("11111-----------------------");

				 				    	  		String Branch_Name = null;
				 				    	  		String Branch_Address = null;
				 				    	  		String Branch_City = null;
				 				    	  		String Branch_Pincode = null;
				 				    	  		String Branch_Phone = null;
				 				    	  		List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
				 				    	  		for(SimpleBranch sb:brInfo)
				 				    	  		{
				 				    	  		Branch_Name=sb.getS2();
				 				    	  		Branch_Address=sb.getS3();
				 				    	  		Branch_City=sb.getS4();
				 				    	  		Branch_Pincode=sb.getS5();
				 				    	  		Branch_Phone=sb.getS6();

				 				    	  		}
				 				    	  		System.out.println("222222222-----------------------");
				 				    	  		parameters.put("Branch_Name", Branch_Name);
				 				    	  		parameters.put("Branch_Address", Branch_Address);
				 				    	  		parameters.put("Branch_City", Branch_City);
				 				    	  		parameters.put("Branch_Pincode", Branch_Pincode);
				 				    	  		parameters.put("Branch_Phone", Branch_Phone);
				 				    	  		parameters.put("To_Date", To_Date);
				 				    	  		parameters.put("user", user);
				 				    	  		  JasperReport jasperReport = JasperCompileManager.compileReport(input);
				 				    	  		  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

				 				    	  		System.out.println("33333333333333-----------------------");
				 				    	  		 
				 				    	  		  String  reportPath = request.getRealPath("/");
				 				    	  		  parameters.put("To_Date", To_Date);
				 				    	  		parameters.put("From_Date", From_Date);
				 				    	  		System.out.println("4444444444-----------------------");   
				 				    	  		     
				 				    	  		      response.setContentType("application/xls");
				 				    	  		      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
				 				    	  		      JRXlsExporter exporter = new JRXlsExporter();
				 				    	  		      // JRXlsExporter exporter = new JRXlsExporter();
				 				    	  		       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				 				    	  		       exporter.exportReport();

				 				    	  		     System.out.println("5555555555555-----------------------");							       


				 				    	  		response.getOutputStream().flush();
				 				    	  		response.getOutputStream().close();



				 				    	  		//String user = (String) session.getAttribute("user");
				 				    	  			

				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


				 				    	  		} catch (FileNotFoundException e) {
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("aa-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (JRException e) {
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("bb-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (ClassNotFoundException e) {
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("cc-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (InstantiationException e) {
				 				    	  		// TODO Auto-generated catch block
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("dd-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (IllegalAccessException e) {
				 				    	  		// TODO Auto-generated catch block
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("ee-----------------------"+e.getLocalizedMessage());
				 				    	  		}
				 				    	  		finally {
				 				    	  		if(conn!=null){
				 				    	  		  try {
				 				    	  			conn.close();
				 				    	  		} catch (SQLException e) {
				 				    	  			// TODO Auto-generated catch block
				 				    	  			e.printStackTrace();
				 				    	  			 System.out.println("ff-----------------------"+e.getLocalizedMessage());
				 				    	  		}
				 				    	  		}
				 				    	  		}
				 				    	  		  }



    				 				    		 @RequestMapping(value = "/getTarget_Consolidated_Report", params ="BTN_Loan_Target", method=RequestMethod.POST)
				 				    	  		  public void getTarget_Consolidated_Report_Loan(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
				 				    	  		  { 
				 				    	  		session=request.getSession();
				 				    	  		int DBCode=(int) session.getAttribute("Branch");

				 				    	  		System.out.println("con----------------------------");

				 				    	  		SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

				 				    	  			Date Current_Date=(Date) session.getAttribute("Current_Date");
				 				    	  			String sys=sd.format(Current_Date);


				 				    	  		String user=(String) session.getAttribute("user");
				 				    	  			
				 				    	  			String Branch_Name1="";
				 				    	  			String Scheme_name="";
				 				    	  			String Account_No="";
				 				    	  			String Customer_Name="";
				 				    	  			String Open_date="";
				 				    	  			String Loan_Amount="";
				 				    	  			String CB="";
				 				    	  			String pending_days="";
				 				    	  			String Interest_Upto="";
				 				    	  			String Arrear_Interest="";
				 				    	  			String From_Date=em.getTxt_from_date();
				 				    	  			String To_Date=em.getTxt_to_date();
				 				    	  			//String GL_Code1=em.getGL_Code().substring(0, 5);
				 				    	  			String BCode=em.getBranch_Type().substring(0, 3);
				 				    	  			String Branch=null;
				 				    	  			String GL_Code=null;
				 				    	  			if(BCode.equalsIgnoreCase("200")){
				 				    	  				Branch="%";
				 				    	  			}
				 				    	  			else{
				 				    	  				Branch=BCode;
				 				    	  			}
				 				    	  			
				 				    	  					    				 				    	  			
				 				    	  			System.out.println("BCode--------------------------"+BCode);
				 				    	  			//System.out.println("GL_Code--------------------------"+GL_Code);
				 				    	  			int Bcode=201;
				 				    	  		System.out.println("Inside controller---------------------------------------");
				 				    	  		   String BranchName="";      
				 				    	  		  

				 				    	  		Connection conn=null;
				 				    	  		try {

				 				    	  		  
				 				    	  		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
				 				    	  		   
				 				    	  		        String jrxmlFile=null;

				 				    	  		        	 jrxmlFile=request.getRealPath("Target_Loan_Report_xl.jrxml");
				 				    	  		        
				 				    	  		       // jrxmlFile=request.getRealPath("demo.jrxml");
				 				    	  		   InputStream input = new FileInputStream(new File(jrxmlFile));
				 				    	  		   
				 				    	  		   




				 				    	  		 	       	    	           
				 				    	  		  // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
				 				    	  		   String Filename2="Target Loan Report between "+From_Date+" - "+To_Date;
				 				    	  		   

				 				    	  				 Map parameters = new HashMap();
				 				    	  			
				 				    	  		    System.out.println("Filename2--------------------------------"+Filename2);   

				 				    	  				String  realPath = request.getRealPath("/resources/images/");
				 				    	  				List<SimpleBranch> list=null;
				 				    	  				
				 				    	  			//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
				 				    	  				String Date2=To_Date;
				 				    	  				String Branch_Code=BranchName;
				 				    	  				//String sql="";
				 				    	  			 	
				 				    	  			// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
				 				    	  			/*	if(GL_Code1.equalsIgnoreCase("20000")){
				 				    	  					list=empDao.getGL_Transaction_ReportAll(From_Date,To_Date,Branch,Bcode);
				 				    	  				}
				 				    	  				else{
				 				    	  				 list=empDao.getGL_Transaction_Report(From_Date,To_Date,GL_Code,Branch,Bcode);
				 				    	  				*/
				 				    	  				SimpleDateFormat sd1=new SimpleDateFormat("MM/dd/yyyy");
				 				    	  	 			String Current1= sd1.format(Current_Date);
				 				    	  				
				 				    	  				String str[] = Current1.split("/");
				 					 	       		    int month = Integer.parseInt(str[0]);
				 					 	       		    int day = Integer.parseInt(str[1]);
				 					 	       	  int year = Integer.parseInt(str[2]);
				 				    	  				
				 				    	  			 list=empDao.Get_Staff_Performance_Branch_Loan(Branch,From_Date,To_Date,month,year,Bcode);
				 				    	  				
				 				    	  				
				 				    	  			 
				 				    	  			mp.put("list",list);
				 				    	  			JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
				 				    	  			
				 				    	  		      parameters.put("itemsJRBean", itemsJRBean); 
				 				    	  		  
				 				    	  		parameters.put("Heading", Filename2); 

				 				    	  		System.out.println("11111-----------------------");

				 				    	  		String Branch_Name = null;
				 				    	  		String Branch_Address = null;
				 				    	  		String Branch_City = null;
				 				    	  		String Branch_Pincode = null;
				 				    	  		String Branch_Phone = null;
				 				    	  		List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
				 				    	  		for(SimpleBranch sb:brInfo)
				 				    	  		{
				 				    	  		Branch_Name=sb.getS2();
				 				    	  		Branch_Address=sb.getS3();
				 				    	  		Branch_City=sb.getS4();
				 				    	  		Branch_Pincode=sb.getS5();
				 				    	  		Branch_Phone=sb.getS6();

				 				    	  		}
				 				    	  		System.out.println("222222222-----------------------");
				 				    	  		parameters.put("Branch_Name", Branch_Name);
				 				    	  		parameters.put("Branch_Address", Branch_Address);
				 				    	  		parameters.put("Branch_City", Branch_City);
				 				    	  		parameters.put("Branch_Pincode", Branch_Pincode);
				 				    	  		parameters.put("Branch_Phone", Branch_Phone);
				 				    	  		parameters.put("To_Date", To_Date);
				 				    	  		parameters.put("user", user);
				 				    	  		  JasperReport jasperReport = JasperCompileManager.compileReport(input);
				 				    	  		  JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

				 				    	  		System.out.println("33333333333333-----------------------");
				 				    	  		 
				 				    	  		  String  reportPath = request.getRealPath("/");
				 				    	  		  parameters.put("To_Date", To_Date);
				 				    	  		parameters.put("From_Date", From_Date);
				 				    	  		System.out.println("4444444444-----------------------");   
				 				    	  		     
				 				    	  		      response.setContentType("application/xls");
				 				    	  		      response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
				 				    	  		      JRXlsExporter exporter = new JRXlsExporter();
				 				    	  		      // JRXlsExporter exporter = new JRXlsExporter();
				 				    	  		       exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
				 				    	  		       exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

				 				    	  		       exporter.exportReport();

				 				    	  		     System.out.println("5555555555555-----------------------");							       


				 				    	  		response.getOutputStream().flush();
				 				    	  		response.getOutputStream().close();



				 				    	  		//String user = (String) session.getAttribute("user");
				 				    	  			

				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
				 				    	  		//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


				 				    	  		} catch (FileNotFoundException e) {
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("aa-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (JRException e) {
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("bb-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (ClassNotFoundException e) {
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("cc-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (InstantiationException e) {
				 				    	  		// TODO Auto-generated catch block
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("dd-----------------------"+e.getLocalizedMessage());
				 				    	  		} catch (IllegalAccessException e) {
				 				    	  		// TODO Auto-generated catch block
				 				    	  		e.printStackTrace();
				 				    	  		System.out.println("ee-----------------------"+e.getLocalizedMessage());
				 				    	  		}
				 				    	  		finally {
				 				    	  		if(conn!=null){
				 				    	  		  try {
				 				    	  			conn.close();
				 				    	  		} catch (SQLException e) {
				 				    	  			// TODO Auto-generated catch block
				 				    	  			e.printStackTrace();
				 				    	  			 System.out.println("ff-----------------------"+e.getLocalizedMessage());
				 				    	  		}
				 				    	  		}
				 				    	  		}
				 				    	  		  }


		

    				 				    		 @RequestMapping(value = "/EOM_Home")
    				 			    			public String EOM_Home(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
    				 			    		    	///Session-------------------------------------------------------------
    				 			    				 session=request.getSession();
    				 			    					String user=(String) session.getAttribute("user");
    				 			    					if(user==null)
    				 			    					return  "Session_Popup";
    				 			    			   //--------------------------------------------------------------------
    				 			    					String[] per1=perdao.GetPermission(user, "Admin");
    				 			    					
    				 			    					
    				 			   					 String View=null;
    				 			   					 String Save=null;
    				 			   					 String Update=null;
    				 			   					 String Delete=null;
    				 			   					 String Verify2=null;
    				 			   					 String Verify3=null;
    				 			   					 String Verify4=null;
    				 			   					 String Verify5=null;
    				 			   					 String Reports1=null;
    				 			   					 String Button=null;
    				 			   					 String Finger_Print=null;
    				 			   							
    				 			   					 
    				 			   					 
    				 			   					 View=per1[0];
    				 			   					 Save=per1[1];
    				 			   					 Update=per1[2];
    				 			   					 Delete=per1[3];
    				 			   					 Verify2=per1[4];
    				 			   					 Verify3=per1[5];
    				 			   					 Verify4=per1[6];
    				 			   					 Verify5=per1[7];
    				 			   					 Reports1=per1[8];
    				 			   					 Button=per1[9];
    				 			   					 Finger_Print=per1[10];
    				 			   					
    				 			   					 
    				 			   					 System.out.println("View-------------------------"+View);
    				 			   					 System.out.println("Save-------------------------"+Save);
    				 			   					 System.out.println("Update-------------------------"+Update);
    				 			   					 System.out.println("Delete-------------------------"+Delete);
    				 			   					 System.out.println("Verify2-------------------------"+Verify2);
    				 			   					 System.out.println("Verify3-------------------------"+Verify3);
    				 			   					 System.out.println("Verify4-------------------------"+Verify4);
    				 			   					 System.out.println("Verify5-------------------------"+Verify5);
    				 			   					 System.out.println("Reports1-------------------------"+Reports1);
    				 			   					 System.out.println("Button-------------------------"+Button);
    				 			   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
    				 			   					 
    				 			   					 
    				 			   					
    				 			   					
    				 			   					int btn_Verify=1;
    				 			   					int btn_Save=1;
    				 			   					int btn_Delete=1;
    				 			   					
    				 			   					if (View.equalsIgnoreCase("N"))
    				 			   						return ("/Authorization");  
    				 			    					
    				 			    					
    				 			    				return  "EOM_Home";
    				 			    			}		   	
    				 				    		 
    				 				    		 
    				 				    		 @RequestMapping(value = "/Settings_Home")
     				 			    			public String SettingsHome(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
     				 			    		    	///Session-------------------------------------------------------------
     				 			    				 session=request.getSession();
     				 			    					String user=(String) session.getAttribute("user");
     				 			    					if(user==null)
     				 			    					return  "Session_Popup";
     				 			    			   //--------------------------------------------------------------------
     				 			    					String[] per1=perdao.GetPermission(user, "Admin");
     				 			    					
     				 			    					
     				 			   					 String View=null;
     				 			   					 String Save=null;
     				 			   					 String Update=null;
     				 			   					 String Delete=null;
     				 			   					 String Verify2=null;
     				 			   					 String Verify3=null;
     				 			   					 String Verify4=null;
     				 			   					 String Verify5=null;
     				 			   					 String Reports1=null;
     				 			   					 String Button=null;
     				 			   					 String Finger_Print=null;
     				 			   							
     				 			   					 
     				 			   					 
     				 			   					 View=per1[0];
     				 			   					 Save=per1[1];
     				 			   					 Update=per1[2];
     				 			   					 Delete=per1[3];
     				 			   					 Verify2=per1[4];
     				 			   					 Verify3=per1[5];
     				 			   					 Verify4=per1[6];
     				 			   					 Verify5=per1[7];
     				 			   					 Reports1=per1[8];
     				 			   					 Button=per1[9];
     				 			   					 Finger_Print=per1[10];
     				 			   					
     				 			   					 
     				 			   					 System.out.println("View-------------------------"+View);
     				 			   					 System.out.println("Save-------------------------"+Save);
     				 			   					 System.out.println("Update-------------------------"+Update);
     				 			   					 System.out.println("Delete-------------------------"+Delete);
     				 			   					 System.out.println("Verify2-------------------------"+Verify2);
     				 			   					 System.out.println("Verify3-------------------------"+Verify3);
     				 			   					 System.out.println("Verify4-------------------------"+Verify4);
     				 			   					 System.out.println("Verify5-------------------------"+Verify5);
     				 			   					 System.out.println("Reports1-------------------------"+Reports1);
     				 			   					 System.out.println("Button-------------------------"+Button);
     				 			   					 System.out.println("Finger_Print-------------------------"+Finger_Print);
     				 			   					 
     				 			   					 
     				 			   					
     				 			   					
     				 			   					int btn_Verify=1;
     				 			   					int btn_Save=1;
     				 			   					int btn_Delete=1;
     				 			   					
     				 			   					if (View.equalsIgnoreCase("N"))
     				 			   						return ("/Authorization");  
     				 			    					
     				 			    					
     				 			    				return  "Settings_Home";
     				 			    			}		   	
    				 				    		 
    				 				    		 
    				 				    		 @RequestMapping(value = "/Log_Home")
      				 			    			public String LogHome(ModelMap mp,Model model,HttpServletRequest request,HttpSession session) throws SQLException { 
      				 			    		    	///Session-------------------------------------------------------------
      				 			    				 session=request.getSession();
      				 			    					String user=(String) session.getAttribute("user");
      				 			    					if(user==null)
      				 			    					return  "Session_Popup";
      				 			    			   //--------------------------------------------------------------------
      				 			    							
      				 			    					
      				 			    				return  "Log_Home";
      				 			    			}		   	
     				 				    		 
    				 				    		@RequestMapping("/Holiday_Master")
          				 				  		 public ModelAndView Holiday_Master(HttpServletRequest request,HttpSession session,Map<String,Object> model,ModelMap mp)
          				 				  		 {  
          				 				  			session=request.getSession();
          				 				  			
          				 				  			 session=request.getSession();
          				 				  				String user=(String) session.getAttribute("user");
          				 				  				if(user==null)
          				 				  				return  new ModelAndView("Session");
          				 				  		   //--------------------------------------------------------------------
          				 				  			 int DBCode=(int) session.getAttribute("Branch");

          				 				  			//-----------------------------------------------------GetPermission-------------------------------------

          				 				  				session=request.getSession();
          				 				  				//request.getSession().setMaxInactiveInterval(40);
          				 				  				
          				 				  				// user=(String) session.getAttribute("user"); 
          				 				  				
          				 				  				String[] per;
          				 				  				try {
          				 				  					per = perdao.GetPermission(user, "HR");
          				 				  				} catch (SQLException e) {
          				 				  					// TODO Auto-generated catch block
          				 				  					mp.put("e", e);
          				 				  					return new ModelAndView("/Error");
          				 				  				}
          				 				  				
          				 				  				 String View=null;
          				 				  				 String Save=null;
          				 				  				 String Update=null;
          				 				  				 String Delete=null;
          				 				  				 String Verify1=null;
          				 				  				 String Reports1=null;
          				 				  				 String Verify_21=null;
          				 				  				 
          				 				  				 View=per[0];
          				 				  				 Save=per[1];
          				 				  				 Update=per[2];
          				 				  				 Delete=per[3];
          				 				  				 Verify1=per[4];
          				 				  				 Reports1=per[5];
          				 				  				 Verify_21=per[6];
          				 				  				
          				 				  				
          				 				  				int btn_Verify=1;
          				 				  				int btn_Save=1;
          				 				  				int btn_Update=1;
          				 				  				int btn_Delete=1;
          				 				  				
          				 				  				if (View==null)
          				 				  					return new ModelAndView("/Authorization");
          				 				  				if (View.equalsIgnoreCase("N")||View.isEmpty())
          				 				  					return new ModelAndView("/Authorization");
          				 				  				
          				 				  			    if (Delete.equalsIgnoreCase("N"))
          				 				  			    	btn_Delete = 2;
          				 				  			    if (Save.equalsIgnoreCase("N"))
          				 				  			        btn_Save= 2;
          				 				  			    if (Update.equalsIgnoreCase("N"))
          				 				  			    	btn_Update=2;
          				 				  			    System.out.println("btn_Delete="+btn_Delete);
          				 				  			    System.out.println("btn_Save="+btn_Save);
          				 				  			    System.out.println("btn_Update="+btn_Update);
          				 				  			  //---------------------------------------------------------------------------------------------------
          				 				  			  // 1.----------
          				 				  			    mp.put("SaveFlag", btn_Save);//SaveFlag
          				 				  			  
          				 				  			    // 2. ----------
          				 				  			   String DeleteLinkDisplay=null;
          				 				  			    if(btn_Delete==2)
          				 				  			    {
          				 				  			    	DeleteLinkDisplay="Display:none;";
          				 				  			    }
          				 				  			    mp.put("DeleteLinkDisplay", DeleteLinkDisplay);//DeleteLinkDisplay
          				 				  			    
          				 				  			    // 3. ------
          				 				  			    String UpdateLinkDisplay=null;
          				 				  			    if(btn_Update==2)
          				 				  			    {
          				 				  			    	UpdateLinkDisplay="Display:none;";
          				 				  			    }
          				 				  			    mp.put("UpdateLinkDisplay", UpdateLinkDisplay);//UpdateLinkDisplay
          				 				  				
          				 				  			//----------------------------------------------------------------------------------------------------------	
          				 				  				//------------------------------------Admin Level check------------------------------	
          				 				  		
          				 				  				String userLevel=(String) session.getAttribute("UserLevel");
          				 				  				   System.out.println("New="+userLevel); 
          				 				  				   String User_Level=userLevel;
          				 				  				   String Level=User_Level;
          				 				  						int i=1;

          				 				  						/* if(Level.equalsIgnoreCase("A") || user.equalsIgnoreCase("pikarthi") || Level.equalsIgnoreCase("C")) 
          				 				  						 {
          				 				  					 		
          				 				  					 		i=2;
          				 				  						 }
          				 				  				 mp.put("Level",i);
          				 				  				 
          				 				  				 
          				 				  					System.out.println("Level="+Level);*/
          				 				  					
          				 				  					
          				 				  					/*if (i==1)
          				 				  					return new ModelAndView("/Authorization");
          				 				  					*/
          				 				  		//---------------------------------------------------------------------------------------------------------------------			
          				 				  				
          				 				  				


          				 				  			NEFT_Bank il=new NEFT_Bank();
          				 				  			mp.put("Holiday_Master",il);
          				 				  			
          				 				  			
          				 				  			List<Simple> list=empDao.getSimple_Holiday(201);
          				 				  			if(list.size()!=0)
          				 				  			{
          				 				  				mp.put("NoOfRecords", list.size());
          				 				  			}
          				 				  			else
          				 				  			{
          				 				  				mp.put("NoOfRecords", 0);
          				 				  			}
          				 				  			mp.put("SimpleList", list);
          				 				  			
          				 				  			
          				 				  			return new ModelAndView("Holiday_Master");
          				 				  	  } 
          				 				  		
          				 				  		
          				 				  		 @RequestMapping(value="/saveHoliday_Master",method = RequestMethod.POST)  
          				 				  		    public ModelAndView saveHoliday_Master(HttpServletRequest request,HttpSession session,@ModelAttribute("Holiday_Master") NEFT_Bank il,Map<String,Object> model,ModelMap mp,RedirectAttributes attributes)
          				 				  		    {  
          				 				  			 session=request.getSession();
          				 				  			 int DBCode=(int) session.getAttribute("Branch");

          				 				  			

          				 				  String sqlc="select nvl(count(*),0) from HoliDAy_CAlendar where to_char(CurrentDate,'dd/MM/yyyy')='"+il.getBank_Desc()+"'";
          				 				  String sqli="insert into HoliDAy_CAlendar(Current_date,CurrentDate) values(Current_date,to_date('"+il.getBank_Desc()+"','dd/MM/yyyy'))";  
          				 				  int count=empDao.Get_ScalarINT(sqlc, 201);
          				 				  if(count==0)
          				 				  {
          				 					 empDao.UpdateDATA(sqli, 201);
          				 				  	 attributes.addFlashAttribute("message","Records Successfully Added");
          				 				  	  return new ModelAndView("redirect:/Holiday_Master");
          				 				  }
          				 				  else
          				 				  {
          				 				  	
          				 				  	  attributes.addFlashAttribute("message","Already have records!");     
          				 				  	  return new ModelAndView("redirect:/Holiday_Master");
          				 				  }
          				 				  			 		
          				 				  		    	}
          				 				  		 
          				 				  		 
          				 				  		  @RequestMapping(value="/deleteHoliday_Master/{Bank_Desc}",method = RequestMethod.GET)  
          				 				  		    public ModelAndView deleteHoliday_Master(HttpServletRequest request,HttpSession session,@PathVariable int Bank_Desc,ModelMap mp,RedirectAttributes attributes) throws SQLException{  
          				 				  		      
          				 				  		    	session=request.getSession();
          				 				  		    	 int DBCode=(int) session.getAttribute("Branch");

          				 				  		    	

          				 				  		    	
          				 				  		    	String sqld="delete from Holiday_CAlendar where id="+Bank_Desc+"";
          				 				  		    	empDao.UpdateDATA(sqld, 201);
          				 				  		    	 attributes.addFlashAttribute("message","Record was Deleted");
          				 				  		    	  return new ModelAndView("redirect:/Holiday_Master");
          				 				  		    	 
          				 				  		    }  
      		 				   	

          				 				  	 @RequestMapping(value = "/downloadAttachmentDynResume/{id}", method = RequestMethod.GET, produces = "application/pdf")
    										    public @ResponseBody void downloadAttachmentDynResume(@PathVariable String id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException {
    											 
    										    	byte barr[] = null;    
    										    	session=request.getSession();
    										    	 int DBCode=(int) session.getAttribute("Branch");
    										    	 
    										    	//--Set Connection------------------------------------
    													int j=DBCode;
    													this.template=con.getCon2(j);
    										//-----------------------------------------------------
    													
    													//String fileName=Customer_Id+"_idproof2.jpg";
    													 String fileName=empDao.getAttachement_FilesNameResume(id);
    													System.out.println("fileName-----"+fileName);
    													 // String FILE_PATH = request.getRealPath(File_Path+fileName);
    													
    													 if(!fileName.equalsIgnoreCase(null) && !fileName.isEmpty())
    													 { 
    														 System.out.println("fileName-----");
    	    													
    														 String FILE_PATH = File_Path2+fileName;
    														 System.out.println("FILE_PATH-----"+FILE_PATH);
    	    													
    													 File file = new File(FILE_PATH);
    											        InputStream in = new FileInputStream(file);
    											        
    											        
    											      //26-12-2023
    											        String 	fileType="Undetermined";	        
    											        try
    											        {
    											        	 System.out.println("try-----");
     	    												
    											        	  fileType = Files.probeContentType(file.toPath());
    											        }
    											        catch(Exception e)
    											        {
    											        	System.out.println("catch-----");
     	    												
    											        	fileType="application/pdf";
    											        }

    											        response.setContentType(fileType);

    											        //response.setContentType("application/pdf");
    											        response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
    											        response.setHeader("Content-Length", String.valueOf(file.length()));
    											        FileCopyUtils.copy(in, response.getOutputStream()); 
    										   
    													 }
    										    	
    										       // OutputStream out = new FileOutputStream("out.pdf");
    										       // out.write(barr);
    										       // out.close();
    										    }
    				 				  		  
    				 				  		  
    				 				  	 @RequestMapping(value = "/deleteEmp_Resume/{id}", method = RequestMethod.GET, produces = "application/pdf")
 									    public ModelAndView deleteEmp_Resume(@PathVariable String id,ModelMap mp,HttpServletResponse response,HttpServletRequest request,HttpSession session) throws IOException, SQLException {
 										 
 									    	byte barr[] = null;    
 									    	session=request.getSession();
 									    	 int DBCode=(int) session.getAttribute("Branch");
 									    	 
 									 			
 												//String fileName=Customer_Id+"_idproof2.jpg";
 												 String fileName=empDao.getAttachement_FilesNameResume(id);
 												// String FILE_PATH = request.getRealPath(File_Path+fileName);
 												 String FILE_PATH = File_Path2+fileName;
 												 System.out.println(FILE_PATH);
 										        File file = new File(FILE_PATH);
 										        file.delete();
 										       //-------------------------------------------------------
 										        Employee jm=new Employee();
 											       jm= (Employee) session.getAttribute("Emp_Info");	      
 											       empDao.Delete_Emp_Resume(jm.getEmp_Id(),201);
 											      
 											       
 											       List<SimpleBranch> list9 = empDao.getResumeDetail(jm.getEmp_Id());
 													mp.put("list9", list9);
 								//---------Filling Pages----------------------------------------------------------------------------
 												// Date loading on Page
 												
 													  session.setAttribute("Employee2",jm);
 													  
 													  session.setAttribute("Emp_Info",jm);
 												       
 												     	mp.addAttribute("Emp_Info",jm);
 												    	mp.addAttribute("Employee2",jm);
 													
 											 session.setAttribute("Emp_Att_List", list9);
 											 mp.addAttribute("Emp_Att_List", list9);
 											//---------------------------------------------------------------------------------------

 													  //---------filling Pages-----------------------------------------------------------------------------
 											 //---------filling Pages-----------------------------------------------------------------------------
 									     
 									         
 												int empc=Integer.parseInt(dao10.Get_ScalarFun("select nvl(count(*),'0') from employee_master where empid='"+jm.getEmp_Id()+"'",201));
 												 if(empc==0)
 													{
 														jm.setEmpmasterflag(2);
 													}
 												 else
 												 {
 													return new ModelAndView("redirect:/editEmployeeMaster/"+jm.getEmp_Id());  
 												 }
 												
 											
 										     
 										     	 
 											 List <Simple> branchCode=dao10.getBranchCode();
 												System.out.println("Branch_Code=getbranch");
 												List<String> branchCodeList=new ArrayList<>();
 												for(Simple s:branchCode)
 												{
 													String s3=s.getS1()+"-"+s.getS2();
 													branchCodeList.add(s3);
 													System.out.println(s3);  
 													 
 												}
 												mp.put("BranchCodeList", branchCodeList);
 												
 												
 												List<Simple> list=empDao.getSimple(201);
 												List<String> desList=new ArrayList<>();
 												for(Simple s1:list)
 												{
 													String s3=s1.getS2();
 													desList.add(s3);
 													System.out.println(s3);  
 													 
 												}
 												mp.put("DesignationList", desList);
 											
 												List<Simple> list2=empDao.getCategory(201);
 												List<String> desList2=new ArrayList<>();
 												for(Simple s1:list2)
 												{
 													String s3=s1.getS2();
 													desList2.add(s3);
 													System.out.println(s3);  
 													 
 												}
 												mp.put("Category", desList2);
 												
  													if(empc==0)
  													{
  														jm.setEmpmasterflag(2);
  													}
  													else
  														jm.setEmpmasterflag(3);
 												        
 													System.out.println("bm.getEmpmasterflag()="+jm.getEmpmasterflag());
 												if(jm.getEmpmasterflag()==2)
 												{
 											 String btn_update="display:none";
 											 
 											 mp.put("UpdateDisplay", btn_update);
 											 
 											 mp.put("empmasterflag", 2);
 											 
 											 mp.put("cvView", "display:none");
 												mp.put("joinView", "display:none");
 												}
 										     
 											return new ModelAndView("Employee_Master"); 
 										 
 													     

 									    }
    				 				  	 
    				 				  	 

    	   				 				 @RequestMapping(value = "/getEmployee_Report", params ="Btn_Employee_Staff_Report", method=RequestMethod.POST)
    									   public void Btn_Employee_Report1(@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpServletRequest request,HttpSession session,HttpServletResponse response) throws IOException 
    									   {
    			 				  			 
    			 				  			 
    			 				  			session=request.getSession();
    			 				  			int DBCode=(int) session.getAttribute("Branch");
    			 				  			String user = (String) session.getAttribute("user");

    			 				  			System.out.println("con----------------------------");

    			 				  			 SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");

    			 				  			 	Date Current_Date=(Date) session.getAttribute("Current_Date");
    			 				  				String sys=sd.format(Current_Date);


    			 				  				
    			 				  				String Branch_Name1="";
    			 				  				String Scheme_name="";
    			 				  				String Account_No="";
    			 				  				String Customer_Name="";
    			 				  				String Open_date="";
    			 				  				String Loan_Amount="";
    			 				  				String CB="";
    			 				  				String pending_days="";
    			 				  				String Interest_Upto="";
    			 				  				String Arrear_Interest="";
    			 				  				
    			 				  				int Bcode=201;
    			 				  			System.out.println("Inside controller---------------------------------------");
    			 				  			    String BranchName="";      
    			 				  			   

    			 				  			Connection conn=null;
    			 				  			try {

    			 				  			   
    			 				  			Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
    			 				  			    
    			 				  			         String jrxmlFile=null;

    			 				  			         	 jrxmlFile=request.getRealPath("Employee_Report_xl.jrxml");
    			 				  			         
    			 				  			        // jrxmlFile=request.getRealPath("demo.jrxml");
    			 				  			    InputStream input = new FileInputStream(new File(jrxmlFile));
    			 				  			    
    			 				  			    




    			 				  			  	       	    	           
    			 				  			   // String Filename2="Jewel Loan Arrear-"+DBCode+"_"+To_Date;
    			 				  			    String Filename2="Employee Personal Report";
    			 				  			    

    			 				  					 Map parameters = new HashMap();
    			 				  				
    			 				  			     System.out.println("Filename2--------------------------------"+Filename2);   

    			 				  					String  realPath = request.getRealPath("/resources/images/");
    			 				  					List<SimpleBranch> list=null;
    			 				  					
    			 				  				//List<SimpleBranch> list=JLDao.getMLArrearReport(To_Date,em.getDays(),DBCode);  
    			 				  					//String Date2=To_Date;
    			 				  					String Branch=BranchName;
    			 				  					//String sql="";
    			 				  				 	
    			 				  				// sql="select main_qry.Account_No,main_qry.Customer_Name,main_qry.Open_Date,main_qry.Loan_Amount,main_qry.Last_Trans_Date ,main_qry.Outstanding,main_qry.Os_Proj,main_qry.Pending_Due,main_qry.EMI,main_qry.Mobile_No,main_qry.Last_Repaid_Date,main_qry.Last_Trans_Amt,main_qry.curr_Int,nvl(main_qry.Outstanding,0)+ nvl(curr_Int,0) as Closing_Outstanding,(select branch_name from branch_master where to_char(branch_code)=substr(main_qry.Account_No,0,3)) as bname,main_qry.Due_date from(Select a.Account_No,a.Customer_Name,Open_Date,Loan_Amount,g.Last_Trans_Date as Last_Trans_Date,NVL(Debit,0)-NVL(Credit,0) as Outstanding,Loan_Amount-NVL(EMI_Prin,0) as Os_Proj,case when NVL(Debit,0)-NVL(Credit,0)>Loan_Amount-NVL(EMI_Prin,0) then (NVL(Debit,0)-NVL(Credit,0))-(Loan_Amount-NVL(EMI_Prin,0)) else 0 End as Pending_Due,(Select EMI from EMI_View where Account_no=a.Account_No and EMI_View.REFERENCE_ID=1) as EMI,Mobile_No,nvl(Last_Repaid_Date,Open_Date) as Last_Repaid_Date,nvl(f.Last_Trans_Amt,0) as Last_Trans_Amt ,round(nvl(calc_ML_Product_View(a.Account_No,Interest_Paid_Upto,'"+Date2+"'),0)) as curr_Int,Due_Date from OL_Master_View3 a left join customer_view b on a.customer_id=b.customer_id and a.Branch=b.Branch left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS CREDIT FROM DAILY_TRANSACTION_Table WHERE FLAG='AC' AND TRANSACTION_TYPE='Credit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) c on a.Account_No=c.Account_No left join (SELECT Account_No,SUM(TRANSACTION_AMOUNT) AS DEBIT FROM DAILY_TRANSACTION_Table WHERE TRANSACTION_TYPE='Debit' and Transaction_Date<='"+Date2+"' group by ACCOUNT_NO) d on a.Account_No=d.Account_No left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Repaid_Date FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and Transaction_Date<='"+Date2+"' and TRANSACTION_TYPE='Credit' group by ACCOUNT_NO) e1 on a.Account_No=e1.Account_No left join (SELECT Account_No,sum(Principal) AS EMI_Prin FROM EMI_View WHERE To_Date<='"+Date2+"' group by ACCOUNT_NO) e on a.Account_No=e.Account_No left join (select Account_No,transaction_date,sum(transaction_amount) as Last_Trans_Amt FROM DAILY_TRANSACTION_Table WHERE Page_Source not in ('EOM','JNL') and TRANSACTION_TYPE='Credit' group by Account_no,transaction_date)f on a.Account_No=f.Account_No and f.transaction_date=e1.Last_Repaid_Date left join (SELECT Account_No,max(TRANSACTION_DATE) AS Last_Trans_Date FROM DAILY_TRANSACTION_Table WHERE  Transaction_Date<='"+Date2+"'  group by ACCOUNT_NO) g on a.Account_No=g.Account_No where Scheme_Code='80001' and Open_Date<='"+Date2+"' and NVL(Debit,0)-NVL(Credit,0)!=0)main_qry order by main_qry.Account_No";
    			 				  					
    			 				  				 
    			 				  					 list=empDao.getEmployee_Details_New(em.getEmp_Id(),Bcode);
    			 				  				
    			 				  				 
    			 				  				mp.put("list",list);
    			 				  				JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(list);
    			 				  				
    			 				  			       parameters.put("itemsJRBean", itemsJRBean); 
    			 				  			   
    			 				  			 parameters.put("Heading", Filename2); 
    			 				  			 
    			 				  			 System.out.println("11111-----------------------");
    			 				  			 
    			 				  			String Branch_Name = null;
    			 				  			String Branch_Address = null;
    			 				  			String Branch_City = null;
    			 				  			String Branch_Pincode = null;
    			 				  			String Branch_Phone = null;
    			 				  			List<SimpleBranch> brInfo=AuditDao.useBranch_Code2(DBCode);
    			 				  			for(SimpleBranch sb:brInfo)
    			 				  			{
    			 				  			Branch_Name=sb.getS2();
    			 				  			 Branch_Address=sb.getS3();
    			 				  			 Branch_City=sb.getS4();
    			 				  			 Branch_Pincode=sb.getS5();
    			 				  			 Branch_Phone=sb.getS6();
    			 				  			 
    			 				  			}
    			 				  			System.out.println("222222222-----------------------");
    			 				  			parameters.put("Branch_Name", Branch_Name);
    			 				  			parameters.put("Branch_Address", Branch_Address);
    			 				  			parameters.put("Branch_City", Branch_City);
    			 				  			parameters.put("Branch_Pincode", Branch_Pincode);
    			 				  			parameters.put("Branch_Phone", Branch_Phone);
    			 				  			//parameters.put("To_Date", To_Date);
    			 				  			   JasperReport jasperReport = JasperCompileManager.compileReport(input);
    			 				  			   JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters,new JREmptyDataSource());

    			 				  			 System.out.println("33333333333333-----------------------");
    			 				  			  
    			 				  			   String  reportPath = request.getRealPath("/");
    			 				  			 //  parameters.put("To_Date", To_Date);
    			 				  			 //parameters.put("From_Date", From_Date);
    			 				  			 parameters.put("user", user);
    			 				  			System.out.println("4444444444-----------------------");   
    			 				  			      
    			 				  			       response.setContentType("application/xls");
    			 				  			       response.addHeader("Content-Disposition", "attachment; filename="+Filename2+".xls");
    			 				  			       JRXlsExporter exporter = new JRXlsExporter();
    			 				  			       // JRXlsExporter exporter = new JRXlsExporter();
    			 				  			        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
    			 				  			        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, Filename2+".xls");
    			 				  			        exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());

    			 				  			        exporter.exportReport();

    			 				  			      System.out.println("5555555555555-----------------------");							       

    			 				  			    	dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('DL Recovery Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),"+Bcode+",'"+Filename2+"')", 201);

    			 				  			response.getOutputStream().flush();
    			 				  			response.getOutputStream().close();



    			 				  			//String user = (String) session.getAttribute("user");
    			 				  					

    			 				  			//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('JL Stock Report','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201)", 201);
    			 				  			//dao20.UpdateDATA("insert into Operational_Log(TYPE,CREATED_BY,CREATED_DATE,TIME_INFO,BRANCH,FILE_TYPE) values ('ML Arrear Report 2','"+user+"',TO_DATE(to_char(sysdate,'dd/MM/yyyy'),'dd/MM/yyyy'),to_char(SYSDATE,'dd/mm/yyyy HH12:MI:SS AM'),201,'"+File_Type+":on "+To_Date+"')", 201);


    			 				  			} catch (FileNotFoundException e) {
    			 				  			e.printStackTrace();
    			 				  			System.out.println("aa-----------------------"+e.getLocalizedMessage());
    			 				  			} catch (JRException e) {
    			 				  			e.printStackTrace();
    			 				  			System.out.println("bb-----------------------"+e.getLocalizedMessage());
    			 				  			} catch (ClassNotFoundException e) {
    			 				  			e.printStackTrace();
    			 				  			System.out.println("cc-----------------------"+e.getLocalizedMessage());
    			 				  			} catch (InstantiationException e) {
    			 				  			// TODO Auto-generated catch block
    			 				  			e.printStackTrace();
    			 				  			System.out.println("dd-----------------------"+e.getLocalizedMessage());
    			 				  			} catch (IllegalAccessException e) {
    			 				  			// TODO Auto-generated catch block
    			 				  			e.printStackTrace();
    			 				  			System.out.println("ee-----------------------"+e.getLocalizedMessage());
    			 				  			}
    			 				  			finally {
    			 				  			if(conn!=null){
    			 				  			   try {
    			 				  				conn.close();
    			 				  			} catch (SQLException e) {
    			 				  				// TODO Auto-generated catch block
    			 				  				e.printStackTrace();
    			 				  				 System.out.println("ff-----------------------"+e.getLocalizedMessage());
    			 				  			}
    			 				  			}
    			 				  			}

    			 				  			 
    									   }
    	   				 				 
    	   				 				@RequestMapping(value = "/Search_EmpDetails/{empid}")
    			 				  		public String Search_Share1(ModelMap mp,HttpServletRequest request,@PathVariable String empid,Model model,HttpSession session) { 

    			 				  			//Session-------------------------------------------------------------
    			 				  			 session=request.getSession();
    			 				  				String user=(String) session.getAttribute("user");
    			 				  				if(user==null)
    			 				  				return  "Session";
    			 				  		   //--------------------------------------------------------------------
    			 				  				try
    			 				  				{
    			 				  				int DBCode=(int) session.getAttribute("Branch");	
    			 				  			List<SimpleBranch> list=null;
    			 				  			
    			 				  			
    			 				  				list=empDao.getEmployee_Details_New(empid,DBCode);
    			 				  			
    			 				  			
    			 				  			 			mp.put("list",list);
    			 				  				}
    			 				  				catch(Exception ex)
    			 				  				{
    			 				  							 				  		            
    			 				  		           // mp.put("e",""+ log.getClass().getMethods());
    			 				  					return "error";
    			 				  				}
    			 				  			return  "SelectEmployeeList";
    			 				  		}
    			 				  		

    	   				 			@RequestMapping("/getcashier_type.htm")
    	   			    			@ResponseBody
    	   			    	 		 public String getcashier_type(@RequestParam String brannch,HttpServletRequest request, HttpServletResponse response,@ModelAttribute("Employee2")Employee em,ModelMap mp,HttpSession session,Model m)throws Exception
    	   			    	  		{
    	   			    	  		 
    	   			    	    
    	   			    	  		 String bcode=brannch;
    	   			    	     		 
    	   			    	     		 session=request.getSession();
    	   			    	   			String user=(String) session.getAttribute("user");
    	   			    	   			if(user==null)
    	   			    	   				 return ("Session");  
    	   			    	      	//-----------------------------------------------------GetPermission-------------------------------------

    	   			    	   		session=request.getSession();
    	   			    	   		
    	   			    	   		System.out.println("brannch-------------------------"+brannch);
    	   			    	   		
    	   			    	     int b1=empDao.getCahier_detailscount(brannch.substring(0,3), 201);
    	   			    	  String res="0";
    	   			     	 if(b1>0){    		 
    	   			     		 		
    	   			    	   	String a=empDao.getCahier_details(brannch.substring(0, 3), 201);
    	   			    	   		 
    	   			    	   		System.out.println("a---------------"+a);
    	   			    	   	  res = a +" Cashier Already in this branch";
    				    	  		 
    	   			     	 }

    	   			    	           
    	   			    	  		
    	   			    	  		  return res;
    	   			    	  		 }

    	   				 			

    		 

}

